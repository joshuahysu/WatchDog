//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 原始程式碼已由 Microsoft.VSDesigner 自動產生，版本 4.0.30319.42000。
// 
#pragma warning disable 1591

namespace WatchDog.WebReference{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AMSWebServiceSoap", Namespace="http://tempuri.org/")]
    public partial class AMSWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckEECertificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAMSCusLotNO_CusNameByUstLotNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback LotDispatch_API_ByAMSLotIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeAMSLotAttributeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetONSEMITestProgramsForBOMOperationCompleted;
        
        private System.Threading.SendOrPostCallback B2B_QORVO_USP_CHECKOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNPIBulidPlanForAMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMCNDeviceCodeForNotesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenFCMaterialLabelInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback RCV_NotesCPBOM_NumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback RCV_NotesPCN_NumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback ToGet_TestProgram_EffectiveDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPSMData_MaskIDListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBladeRecipeOperationCompleted;
        
        private System.Threading.SendOrPostCallback eCIMToMESAlarmOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckResourceLogFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckResourceLogFileForTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetECLikeSetting_HoldReasonOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetECLikeSetting_OwnerDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback ECLikeAllowSkipOperationCompleted;
        
        private System.Threading.SendOrPostCallback ECLikeCheckHaveSettingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetECLikeSetting_IsHoldLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDPTapingRecipeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRecipeNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecordTestProgramForWSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOperInstrOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOperSIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOperSID_WithValidateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDPGRINDRecipeOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertRawDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDPPnPRecipeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDPPnPRecipeByParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBSRecipeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBSRecipeRuncardOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQCLPNCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQCLPNCodeBySiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRICHTEKLPNCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMTKLPNCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAUDIENCELPNCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSONYLPNCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLotAttributeFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback apiChangeAttributeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GeneraterCustLotIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GeneraterDateCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GeneraterTraceCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GeneratorWaferIDWithCheckSumOperationCompleted;
        
        private System.Threading.SendOrPostCallback GeneraterJsonFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback QARMS2_RecipeApplyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBrcmDataForBomOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChkBrcmGatingRuleOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChkBrcmProdEngOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChkBrcmTestProgramWhenASISCreateSIOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChkBrcmASISEndorseRuleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBrcmSkipBinListForBomOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSourceDevice_GF_BumpOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFoupCleanStatusFromPCServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback PCSERVERDBQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback OperatorReviewMFGNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAMSLotInfoByBlueToothTagOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateBlutToothTagBaseInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateBlutToothTagBaseInfo4ServerDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisassociateCarrierRelationByLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisassociateCarrierRelationByTxnTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetADIDPSMarkingSpecOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecAMSAPIOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAMSAPI_DataStructureOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateANFOperationCompleted;
        
        private System.Threading.SendOrPostCallback apiAmkGroupHoldMaintOperationCompleted;
        
        private System.Threading.SendOrPostCallback apiAmkGroupHoldMaintWithUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback apiUpdateResourceStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback apiQACompleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback apiChangeLotAttributeOperationCompleted;
        
        private System.Threading.SendOrPostCallback apiChangeLotAttribute2OperationCompleted;
        
        private System.Threading.SendOrPostCallback CTM_UpdateCPToolBLOBOperationCompleted;
        
        private System.Threading.SendOrPostCallback CTM_GetCPToolBLOBOperationCompleted;
        
        private System.Threading.SendOrPostCallback CTM_SendMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback AES_GetWaferBinDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback AES_UpdateFTPServerFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AES_CheckSamplingLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMultiLotAndWaferCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback InlineStockDBQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback AESDBQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback LEGACYDBQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback InlineStockMTSQLExecOperationCompleted;
        
        private System.Threading.SendOrPostCallback AMSDBQueryForVBOperationCompleted;
        
        private System.Threading.SendOrPostCallback AMSDBQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback AMSDBQuery1OperationCompleted;
        
        private System.Threading.SendOrPostCallback AMSDBQuery2OperationCompleted;
        
        private System.Threading.SendOrPostCallback AMSDBQuery3OperationCompleted;
        
        private System.Threading.SendOrPostCallback AMSDBQuery4OperationCompleted;
        
        private System.Threading.SendOrPostCallback AMSMTSQLExecOperationCompleted;
        
        private System.Threading.SendOrPostCallback AMSMTSQLExecRPTOperationCompleted;
        
        private System.Threading.SendOrPostCallback AMSDBQueryRPTOperationCompleted;
        
        private System.Threading.SendOrPostCallback AMSDBQueryRPT1OperationCompleted;
        
        private System.Threading.SendOrPostCallback AMSDBQueryRENOperationCompleted;
        
        private System.Threading.SendOrPostCallback AMS_UpdateBLOBOperationCompleted;
        
        private System.Threading.SendOrPostCallback AMS_GetBLOBOperationCompleted;
        
        private System.Threading.SendOrPostCallback AMSDBQueryWithExcelOperationCompleted;
        
        private System.Threading.SendOrPostCallback AMS_PI_IsPMBeforeRtnToMFGOperationCompleted;
        
        private System.Threading.SendOrPostCallback AMS_ShutdownMCOperationCompleted;
        
        private System.Threading.SendOrPostCallback eCIMInfoToAMSPIOperationCompleted;
        
        private System.Threading.SendOrPostCallback QAOperationLotMoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback Check_FAIReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckMaskInStockByTrackingNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckMaskPhaseOutByTrackingNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBomDataForAMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGFCustInputDataForAMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback LotTxnValidationOperationCompleted;
        
        private System.Threading.SendOrPostCallback LotTxnValidation2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMultipleBinLotDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback TnRCombineRuleCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback TnRCombineRuleCheckMsgOperationCompleted;
        
        private System.Threading.SendOrPostCallback TnRCombineRuleGetByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback TnRCombineRuleGetByLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback StringParserOperationCompleted;
        
        private System.Threading.SendOrPostCallback LowYieldCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback LowYieldCheckXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReelAutoNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckLotIsAllowedToOpenNowOperationCompleted;
        
        private System.Threading.SendOrPostCallback DieSorterEndorseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenAttributeNewValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenAttributeNewValue3OperationCompleted;
        
        private System.Threading.SendOrPostCallback GenAttributeNewValue2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GenAttributeNewValue_SAPInterfaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPSMDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPSMData_ProductCustomerReqInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback VMM_SendToEasyFlowOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAMSServiceStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateFTDeviationReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateFTDeviationReportByStepOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFTRTBinOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckFTRTCommandOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOperationByCustLotIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHandlerDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAMSLotNoByWSLotNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWSLotNoByAMSLotNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWaferListByCustLotId_EqualOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWaferListByCustLotId_LikeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWaferListByAMSLotId_EqualOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWaferListByAMSLotId_LikeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllSubLotByAMSLotIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustLotIDbyWaferIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMachineNameByAMSLotIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAMSLotInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTIIASN_DSByBatchNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback LotHold_API_ByAMSLotIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback LotHold_API_ByAMSLotIdwithUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback LotRelease_API_ByAMSLotIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback LotRelease_API_ByAMSLotIdwithUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback LotSplit_API_ByAMSLotIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback LotRelease_API_ByAMSLotIdWithHoldCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEDATAReplyStatusFor8HOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEDATAConvertStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEDATAConvertInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEDATAUploadStatus2NullOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEDATAReplyStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback EDataFrozenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEDC_Time_OperatorByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEDC_DataByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWaferDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWaferDetailsWithBinOperationCompleted;
        
        private System.Threading.SendOrPostCallback EData_UPDWaferIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback EData_FQC_RPT_SuccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckBumpMapFilesAndFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveBumpMapCombineFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckBumpMapSamplingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetF054_StdLogReportByLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback AETC_RSC_StatusUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback PLAT_RSC_StatusUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ATT_FC_FileTmpeMaintOperationCompleted;
        
        private System.Threading.SendOrPostCallback ATT_FC_GetFileTmpeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ATT_FC_GetRecipeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ATT_FCGetSIDBYBDOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyDomainAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyDomainAccount2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainServerIPOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetDomainPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEnvInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAPIPOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAPUIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAPPWDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAASIPOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback apiResourceChangeStateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AMSWebService() {
            this.Url = global::WatchDog.Properties.Settings.Default.WatchDog_WebReference_AMSWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckEECertificationCompletedEventHandler CheckEECertificationCompleted;
        
        /// <remarks/>
        public event GetAMSCusLotNO_CusNameByUstLotNoCompletedEventHandler GetAMSCusLotNO_CusNameByUstLotNoCompleted;
        
        /// <remarks/>
        public event LotDispatch_API_ByAMSLotIdCompletedEventHandler LotDispatch_API_ByAMSLotIdCompleted;
        
        /// <remarks/>
        public event ChangeAMSLotAttributeCompletedEventHandler ChangeAMSLotAttributeCompleted;
        
        /// <remarks/>
        public event GetONSEMITestProgramsForBOMCompletedEventHandler GetONSEMITestProgramsForBOMCompleted;
        
        /// <remarks/>
        public event B2B_QORVO_USP_CHECKCompletedEventHandler B2B_QORVO_USP_CHECKCompleted;
        
        /// <remarks/>
        public event GetNPIBulidPlanForAMSCompletedEventHandler GetNPIBulidPlanForAMSCompleted;
        
        /// <remarks/>
        public event GetMCNDeviceCodeForNotesCompletedEventHandler GetMCNDeviceCodeForNotesCompleted;
        
        /// <remarks/>
        public event GenFCMaterialLabelInfoCompletedEventHandler GenFCMaterialLabelInfoCompleted;
        
        /// <remarks/>
        public event RCV_NotesCPBOM_NumberCompletedEventHandler RCV_NotesCPBOM_NumberCompleted;
        
        /// <remarks/>
        public event RCV_NotesPCN_NumberCompletedEventHandler RCV_NotesPCN_NumberCompleted;
        
        /// <remarks/>
        public event ToGet_TestProgram_EffectiveDateCompletedEventHandler ToGet_TestProgram_EffectiveDateCompleted;
        
        /// <remarks/>
        public event GetPSMData_MaskIDListCompletedEventHandler GetPSMData_MaskIDListCompleted;
        
        /// <remarks/>
        public event GetBladeRecipeCompletedEventHandler GetBladeRecipeCompleted;
        
        /// <remarks/>
        public event eCIMToMESAlarmCompletedEventHandler eCIMToMESAlarmCompleted;
        
        /// <remarks/>
        public event CheckResourceLogFileCompletedEventHandler CheckResourceLogFileCompleted;
        
        /// <remarks/>
        public event CheckResourceLogFileForTestCompletedEventHandler CheckResourceLogFileForTestCompleted;
        
        /// <remarks/>
        public event GetECLikeSetting_HoldReasonCompletedEventHandler GetECLikeSetting_HoldReasonCompleted;
        
        /// <remarks/>
        public event GetECLikeSetting_OwnerDepartmentCompletedEventHandler GetECLikeSetting_OwnerDepartmentCompleted;
        
        /// <remarks/>
        public event ECLikeAllowSkipCompletedEventHandler ECLikeAllowSkipCompleted;
        
        /// <remarks/>
        public event ECLikeCheckHaveSettingCompletedEventHandler ECLikeCheckHaveSettingCompleted;
        
        /// <remarks/>
        public event GetECLikeSetting_IsHoldLotCompletedEventHandler GetECLikeSetting_IsHoldLotCompleted;
        
        /// <remarks/>
        public event GetDPTapingRecipeCompletedEventHandler GetDPTapingRecipeCompleted;
        
        /// <remarks/>
        public event GetRecipeNameCompletedEventHandler GetRecipeNameCompleted;
        
        /// <remarks/>
        public event RecordTestProgramForWSCompletedEventHandler RecordTestProgramForWSCompleted;
        
        /// <remarks/>
        public event GetOperInstrCompletedEventHandler GetOperInstrCompleted;
        
        /// <remarks/>
        public event GetOperSIDCompletedEventHandler GetOperSIDCompleted;
        
        /// <remarks/>
        public event GetOperSID_WithValidateCompletedEventHandler GetOperSID_WithValidateCompleted;
        
        /// <remarks/>
        public event GetDPGRINDRecipeCompletedEventHandler GetDPGRINDRecipeCompleted;
        
        /// <remarks/>
        public event InsertRawDataCompletedEventHandler InsertRawDataCompleted;
        
        /// <remarks/>
        public event GetDPPnPRecipeCompletedEventHandler GetDPPnPRecipeCompleted;
        
        /// <remarks/>
        public event GetDPPnPRecipeByParameterCompletedEventHandler GetDPPnPRecipeByParameterCompleted;
        
        /// <remarks/>
        public event GetBSRecipeCompletedEventHandler GetBSRecipeCompleted;
        
        /// <remarks/>
        public event GetBSRecipeRuncardCompletedEventHandler GetBSRecipeRuncardCompleted;
        
        /// <remarks/>
        public event GetQCLPNCodeCompletedEventHandler GetQCLPNCodeCompleted;
        
        /// <remarks/>
        public event GetQCLPNCodeBySiteCompletedEventHandler GetQCLPNCodeBySiteCompleted;
        
        /// <remarks/>
        public event GetRICHTEKLPNCodeCompletedEventHandler GetRICHTEKLPNCodeCompleted;
        
        /// <remarks/>
        public event GetMTKLPNCodeCompletedEventHandler GetMTKLPNCodeCompleted;
        
        /// <remarks/>
        public event GetAUDIENCELPNCodeCompletedEventHandler GetAUDIENCELPNCodeCompleted;
        
        /// <remarks/>
        public event GetSONYLPNCodeCompletedEventHandler GetSONYLPNCodeCompleted;
        
        /// <remarks/>
        public event GetLotAttributeFieldsCompletedEventHandler GetLotAttributeFieldsCompleted;
        
        /// <remarks/>
        public event apiChangeAttributeCompletedEventHandler apiChangeAttributeCompleted;
        
        /// <remarks/>
        public event GeneraterCustLotIDCompletedEventHandler GeneraterCustLotIDCompleted;
        
        /// <remarks/>
        public event GeneraterDateCodeCompletedEventHandler GeneraterDateCodeCompleted;
        
        /// <remarks/>
        public event GeneraterTraceCodeCompletedEventHandler GeneraterTraceCodeCompleted;
        
        /// <remarks/>
        public event GeneratorWaferIDWithCheckSumCompletedEventHandler GeneratorWaferIDWithCheckSumCompleted;
        
        /// <remarks/>
        public event GeneraterJsonFileCompletedEventHandler GeneraterJsonFileCompleted;
        
        /// <remarks/>
        public event QARMS2_RecipeApplyCompletedEventHandler QARMS2_RecipeApplyCompleted;
        
        /// <remarks/>
        public event GetBrcmDataForBomCompletedEventHandler GetBrcmDataForBomCompleted;
        
        /// <remarks/>
        public event ChkBrcmGatingRuleCompletedEventHandler ChkBrcmGatingRuleCompleted;
        
        /// <remarks/>
        public event ChkBrcmProdEngCompletedEventHandler ChkBrcmProdEngCompleted;
        
        /// <remarks/>
        public event ChkBrcmTestProgramWhenASISCreateSICompletedEventHandler ChkBrcmTestProgramWhenASISCreateSICompleted;
        
        /// <remarks/>
        public event ChkBrcmASISEndorseRuleCompletedEventHandler ChkBrcmASISEndorseRuleCompleted;
        
        /// <remarks/>
        public event GetBrcmSkipBinListForBomCompletedEventHandler GetBrcmSkipBinListForBomCompleted;
        
        /// <remarks/>
        public event CheckSourceDevice_GF_BumpCompletedEventHandler CheckSourceDevice_GF_BumpCompleted;
        
        /// <remarks/>
        public event GetFoupCleanStatusFromPCServerCompletedEventHandler GetFoupCleanStatusFromPCServerCompleted;
        
        /// <remarks/>
        public event PCSERVERDBQueryCompletedEventHandler PCSERVERDBQueryCompleted;
        
        /// <remarks/>
        public event OperatorReviewMFGNotificationCompletedEventHandler OperatorReviewMFGNotificationCompleted;
        
        /// <remarks/>
        public event GetAMSLotInfoByBlueToothTagCompletedEventHandler GetAMSLotInfoByBlueToothTagCompleted;
        
        /// <remarks/>
        public event UpdateBlutToothTagBaseInfoCompletedEventHandler UpdateBlutToothTagBaseInfoCompleted;
        
        /// <remarks/>
        public event UpdateBlutToothTagBaseInfo4ServerDownCompletedEventHandler UpdateBlutToothTagBaseInfo4ServerDownCompleted;
        
        /// <remarks/>
        public event DisassociateCarrierRelationByLotCompletedEventHandler DisassociateCarrierRelationByLotCompleted;
        
        /// <remarks/>
        public event DisassociateCarrierRelationByTxnTypeCompletedEventHandler DisassociateCarrierRelationByTxnTypeCompleted;
        
        /// <remarks/>
        public event GetADIDPSMarkingSpecCompletedEventHandler GetADIDPSMarkingSpecCompleted;
        
        /// <remarks/>
        public event ExecAMSAPICompletedEventHandler ExecAMSAPICompleted;
        
        /// <remarks/>
        public event GetAMSAPI_DataStructureCompletedEventHandler GetAMSAPI_DataStructureCompleted;
        
        /// <remarks/>
        public event CreateANFCompletedEventHandler CreateANFCompleted;
        
        /// <remarks/>
        public event apiAmkGroupHoldMaintCompletedEventHandler apiAmkGroupHoldMaintCompleted;
        
        /// <remarks/>
        public event apiAmkGroupHoldMaintWithUserCompletedEventHandler apiAmkGroupHoldMaintWithUserCompleted;
        
        /// <remarks/>
        public event apiUpdateResourceStatusCompletedEventHandler apiUpdateResourceStatusCompleted;
        
        /// <remarks/>
        public event apiQACompleteCompletedEventHandler apiQACompleteCompleted;
        
        /// <remarks/>
        public event apiChangeLotAttributeCompletedEventHandler apiChangeLotAttributeCompleted;
        
        /// <remarks/>
        public event apiChangeLotAttribute2CompletedEventHandler apiChangeLotAttribute2Completed;
        
        /// <remarks/>
        public event CTM_UpdateCPToolBLOBCompletedEventHandler CTM_UpdateCPToolBLOBCompleted;
        
        /// <remarks/>
        public event CTM_GetCPToolBLOBCompletedEventHandler CTM_GetCPToolBLOBCompleted;
        
        /// <remarks/>
        public event CTM_SendMailCompletedEventHandler CTM_SendMailCompleted;
        
        /// <remarks/>
        public event AES_GetWaferBinDataCompletedEventHandler AES_GetWaferBinDataCompleted;
        
        /// <remarks/>
        public event AES_UpdateFTPServerFolderCompletedEventHandler AES_UpdateFTPServerFolderCompleted;
        
        /// <remarks/>
        public event AES_CheckSamplingLotCompletedEventHandler AES_CheckSamplingLotCompleted;
        
        /// <remarks/>
        public event GetMultiLotAndWaferCountCompletedEventHandler GetMultiLotAndWaferCountCompleted;
        
        /// <remarks/>
        public event InlineStockDBQueryCompletedEventHandler InlineStockDBQueryCompleted;
        
        /// <remarks/>
        public event AESDBQueryCompletedEventHandler AESDBQueryCompleted;
        
        /// <remarks/>
        public event LEGACYDBQueryCompletedEventHandler LEGACYDBQueryCompleted;
        
        /// <remarks/>
        public event InlineStockMTSQLExecCompletedEventHandler InlineStockMTSQLExecCompleted;
        
        /// <remarks/>
        public event AMSDBQueryForVBCompletedEventHandler AMSDBQueryForVBCompleted;
        
        /// <remarks/>
        public event AMSDBQueryCompletedEventHandler AMSDBQueryCompleted;
        
        /// <remarks/>
        public event AMSDBQuery1CompletedEventHandler AMSDBQuery1Completed;
        
        /// <remarks/>
        public event AMSDBQuery2CompletedEventHandler AMSDBQuery2Completed;
        
        /// <remarks/>
        public event AMSDBQuery3CompletedEventHandler AMSDBQuery3Completed;
        
        /// <remarks/>
        public event AMSDBQuery4CompletedEventHandler AMSDBQuery4Completed;
        
        /// <remarks/>
        public event AMSMTSQLExecCompletedEventHandler AMSMTSQLExecCompleted;
        
        /// <remarks/>
        public event AMSMTSQLExecRPTCompletedEventHandler AMSMTSQLExecRPTCompleted;
        
        /// <remarks/>
        public event AMSDBQueryRPTCompletedEventHandler AMSDBQueryRPTCompleted;
        
        /// <remarks/>
        public event AMSDBQueryRPT1CompletedEventHandler AMSDBQueryRPT1Completed;
        
        /// <remarks/>
        public event AMSDBQueryRENCompletedEventHandler AMSDBQueryRENCompleted;
        
        /// <remarks/>
        public event AMS_UpdateBLOBCompletedEventHandler AMS_UpdateBLOBCompleted;
        
        /// <remarks/>
        public event AMS_GetBLOBCompletedEventHandler AMS_GetBLOBCompleted;
        
        /// <remarks/>
        public event AMSDBQueryWithExcelCompletedEventHandler AMSDBQueryWithExcelCompleted;
        
        /// <remarks/>
        public event AMS_PI_IsPMBeforeRtnToMFGCompletedEventHandler AMS_PI_IsPMBeforeRtnToMFGCompleted;
        
        /// <remarks/>
        public event AMS_ShutdownMCCompletedEventHandler AMS_ShutdownMCCompleted;
        
        /// <remarks/>
        public event eCIMInfoToAMSPICompletedEventHandler eCIMInfoToAMSPICompleted;
        
        /// <remarks/>
        public event QAOperationLotMoveCompletedEventHandler QAOperationLotMoveCompleted;
        
        /// <remarks/>
        public event Check_FAIReportCompletedEventHandler Check_FAIReportCompleted;
        
        /// <remarks/>
        public event CheckMaskInStockByTrackingNoCompletedEventHandler CheckMaskInStockByTrackingNoCompleted;
        
        /// <remarks/>
        public event CheckMaskPhaseOutByTrackingNoCompletedEventHandler CheckMaskPhaseOutByTrackingNoCompleted;
        
        /// <remarks/>
        public event GetBomDataForAMSCompletedEventHandler GetBomDataForAMSCompleted;
        
        /// <remarks/>
        public event GetGFCustInputDataForAMSCompletedEventHandler GetGFCustInputDataForAMSCompleted;
        
        /// <remarks/>
        public event LotTxnValidationCompletedEventHandler LotTxnValidationCompleted;
        
        /// <remarks/>
        public event LotTxnValidation2CompletedEventHandler LotTxnValidation2Completed;
        
        /// <remarks/>
        public event GetMultipleBinLotDataCompletedEventHandler GetMultipleBinLotDataCompleted;
        
        /// <remarks/>
        public event TnRCombineRuleCheckCompletedEventHandler TnRCombineRuleCheckCompleted;
        
        /// <remarks/>
        public event TnRCombineRuleCheckMsgCompletedEventHandler TnRCombineRuleCheckMsgCompleted;
        
        /// <remarks/>
        public event TnRCombineRuleGetByNameCompletedEventHandler TnRCombineRuleGetByNameCompleted;
        
        /// <remarks/>
        public event TnRCombineRuleGetByLotCompletedEventHandler TnRCombineRuleGetByLotCompleted;
        
        /// <remarks/>
        public event StringParserCompletedEventHandler StringParserCompleted;
        
        /// <remarks/>
        public event LowYieldCheckCompletedEventHandler LowYieldCheckCompleted;
        
        /// <remarks/>
        public event LowYieldCheckXMLCompletedEventHandler LowYieldCheckXMLCompleted;
        
        /// <remarks/>
        public event GetReelAutoNumberCompletedEventHandler GetReelAutoNumberCompleted;
        
        /// <remarks/>
        public event CheckLotIsAllowedToOpenNowCompletedEventHandler CheckLotIsAllowedToOpenNowCompleted;
        
        /// <remarks/>
        public event DieSorterEndorseCompletedEventHandler DieSorterEndorseCompleted;
        
        /// <remarks/>
        public event GenAttributeNewValueCompletedEventHandler GenAttributeNewValueCompleted;
        
        /// <remarks/>
        public event GenAttributeNewValue3CompletedEventHandler GenAttributeNewValue3Completed;
        
        /// <remarks/>
        public event GenAttributeNewValue2CompletedEventHandler GenAttributeNewValue2Completed;
        
        /// <remarks/>
        public event GenAttributeNewValue_SAPInterfaceCompletedEventHandler GenAttributeNewValue_SAPInterfaceCompleted;
        
        /// <remarks/>
        public event GetPSMDataCompletedEventHandler GetPSMDataCompleted;
        
        /// <remarks/>
        public event GetPSMData_ProductCustomerReqInfoCompletedEventHandler GetPSMData_ProductCustomerReqInfoCompleted;
        
        /// <remarks/>
        public event VMM_SendToEasyFlowCompletedEventHandler VMM_SendToEasyFlowCompleted;
        
        /// <remarks/>
        public event GetAMSServiceStatusCompletedEventHandler GetAMSServiceStatusCompleted;
        
        /// <remarks/>
        public event CreateFTDeviationReportCompletedEventHandler CreateFTDeviationReportCompleted;
        
        /// <remarks/>
        public event CreateFTDeviationReportByStepCompletedEventHandler CreateFTDeviationReportByStepCompleted;
        
        /// <remarks/>
        public event GetFTRTBinCompletedEventHandler GetFTRTBinCompleted;
        
        /// <remarks/>
        public event CheckFTRTCommandCompletedEventHandler CheckFTRTCommandCompleted;
        
        /// <remarks/>
        public event GetOperationByCustLotIdCompletedEventHandler GetOperationByCustLotIdCompleted;
        
        /// <remarks/>
        public event GetHandlerDataCompletedEventHandler GetHandlerDataCompleted;
        
        /// <remarks/>
        public event GetAMSLotNoByWSLotNoCompletedEventHandler GetAMSLotNoByWSLotNoCompleted;
        
        /// <remarks/>
        public event GetWSLotNoByAMSLotNoCompletedEventHandler GetWSLotNoByAMSLotNoCompleted;
        
        /// <remarks/>
        public event GetWaferListByCustLotId_EqualCompletedEventHandler GetWaferListByCustLotId_EqualCompleted;
        
        /// <remarks/>
        public event GetWaferListByCustLotId_LikeCompletedEventHandler GetWaferListByCustLotId_LikeCompleted;
        
        /// <remarks/>
        public event GetWaferListByAMSLotId_EqualCompletedEventHandler GetWaferListByAMSLotId_EqualCompleted;
        
        /// <remarks/>
        public event GetWaferListByAMSLotId_LikeCompletedEventHandler GetWaferListByAMSLotId_LikeCompleted;
        
        /// <remarks/>
        public event GetAllSubLotByAMSLotIdCompletedEventHandler GetAllSubLotByAMSLotIdCompleted;
        
        /// <remarks/>
        public event GetCustLotIDbyWaferIdCompletedEventHandler GetCustLotIDbyWaferIdCompleted;
        
        /// <remarks/>
        public event GetMachineNameByAMSLotIdCompletedEventHandler GetMachineNameByAMSLotIdCompleted;
        
        /// <remarks/>
        public event GetAMSLotInfoCompletedEventHandler GetAMSLotInfoCompleted;
        
        /// <remarks/>
        public event GetTIIASN_DSByBatchNumberCompletedEventHandler GetTIIASN_DSByBatchNumberCompleted;
        
        /// <remarks/>
        public event LotHold_API_ByAMSLotIdCompletedEventHandler LotHold_API_ByAMSLotIdCompleted;
        
        /// <remarks/>
        public event LotHold_API_ByAMSLotIdwithUserCompletedEventHandler LotHold_API_ByAMSLotIdwithUserCompleted;
        
        /// <remarks/>
        public event LotRelease_API_ByAMSLotIdCompletedEventHandler LotRelease_API_ByAMSLotIdCompleted;
        
        /// <remarks/>
        public event LotRelease_API_ByAMSLotIdwithUserCompletedEventHandler LotRelease_API_ByAMSLotIdwithUserCompleted;
        
        /// <remarks/>
        public event LotSplit_API_ByAMSLotIdCompletedEventHandler LotSplit_API_ByAMSLotIdCompleted;
        
        /// <remarks/>
        public event LotRelease_API_ByAMSLotIdWithHoldCommentCompletedEventHandler LotRelease_API_ByAMSLotIdWithHoldCommentCompleted;
        
        /// <remarks/>
        public event UpdateEDATAReplyStatusFor8HCompletedEventHandler UpdateEDATAReplyStatusFor8HCompleted;
        
        /// <remarks/>
        public event UpdateEDATAConvertStatusCompletedEventHandler UpdateEDATAConvertStatusCompleted;
        
        /// <remarks/>
        public event UpdateEDATAConvertInfoCompletedEventHandler UpdateEDATAConvertInfoCompleted;
        
        /// <remarks/>
        public event UpdateEDATAUploadStatus2NullCompletedEventHandler UpdateEDATAUploadStatus2NullCompleted;
        
        /// <remarks/>
        public event UpdateEDATAReplyStatusCompletedEventHandler UpdateEDATAReplyStatusCompleted;
        
        /// <remarks/>
        public event EDataFrozenCompletedEventHandler EDataFrozenCompleted;
        
        /// <remarks/>
        public event GetEDC_Time_OperatorByTypeCompletedEventHandler GetEDC_Time_OperatorByTypeCompleted;
        
        /// <remarks/>
        public event GetEDC_DataByTypeCompletedEventHandler GetEDC_DataByTypeCompleted;
        
        /// <remarks/>
        public event UpdateWaferDetailsCompletedEventHandler UpdateWaferDetailsCompleted;
        
        /// <remarks/>
        public event UpdateWaferDetailsWithBinCompletedEventHandler UpdateWaferDetailsWithBinCompleted;
        
        /// <remarks/>
        public event EData_UPDWaferIDCompletedEventHandler EData_UPDWaferIDCompleted;
        
        /// <remarks/>
        public event EData_FQC_RPT_SuccessCompletedEventHandler EData_FQC_RPT_SuccessCompleted;
        
        /// <remarks/>
        public event CheckBumpMapFilesAndFolderCompletedEventHandler CheckBumpMapFilesAndFolderCompleted;
        
        /// <remarks/>
        public event RetrieveBumpMapCombineFilesCompletedEventHandler RetrieveBumpMapCombineFilesCompleted;
        
        /// <remarks/>
        public event CheckBumpMapSamplingCompletedEventHandler CheckBumpMapSamplingCompleted;
        
        /// <remarks/>
        public event GetF054_StdLogReportByLotCompletedEventHandler GetF054_StdLogReportByLotCompleted;
        
        /// <remarks/>
        public event AETC_RSC_StatusUpdateCompletedEventHandler AETC_RSC_StatusUpdateCompleted;
        
        /// <remarks/>
        public event PLAT_RSC_StatusUpdateCompletedEventHandler PLAT_RSC_StatusUpdateCompleted;
        
        /// <remarks/>
        public event ATT_FC_FileTmpeMaintCompletedEventHandler ATT_FC_FileTmpeMaintCompleted;
        
        /// <remarks/>
        public event ATT_FC_GetFileTmpeCompletedEventHandler ATT_FC_GetFileTmpeCompleted;
        
        /// <remarks/>
        public event ATT_FC_GetRecipeCompletedEventHandler ATT_FC_GetRecipeCompleted;
        
        /// <remarks/>
        public event ATT_FCGetSIDBYBDCompletedEventHandler ATT_FCGetSIDBYBDCompleted;
        
        /// <remarks/>
        public event VerifyDomainAccountCompletedEventHandler VerifyDomainAccountCompleted;
        
        /// <remarks/>
        public event VerifyDomainAccount2CompletedEventHandler VerifyDomainAccount2Completed;
        
        /// <remarks/>
        public event GetDomainServerIPCompletedEventHandler GetDomainServerIPCompleted;
        
        /// <remarks/>
        public event ResetDomainPasswordCompletedEventHandler ResetDomainPasswordCompleted;
        
        /// <remarks/>
        public event GetEnvInfoCompletedEventHandler GetEnvInfoCompleted;
        
        /// <remarks/>
        public event GetAPIPCompletedEventHandler GetAPIPCompleted;
        
        /// <remarks/>
        public event GetAPUIDCompletedEventHandler GetAPUIDCompleted;
        
        /// <remarks/>
        public event GetAPPWDCompletedEventHandler GetAPPWDCompleted;
        
        /// <remarks/>
        public event GetAASIPCompletedEventHandler GetAASIPCompleted;
        
        /// <remarks/>
        public event GetTimeCompletedEventHandler GetTimeCompleted;
        
        /// <remarks/>
        public event apiResourceChangeStateCompletedEventHandler apiResourceChangeStateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckEECertification", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckEECertification(string pEmployeeName, string pResourceName) {
            object[] results = this.Invoke("CheckEECertification", new object[] {
                        pEmployeeName,
                        pResourceName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckEECertificationAsync(string pEmployeeName, string pResourceName) {
            this.CheckEECertificationAsync(pEmployeeName, pResourceName, null);
        }
        
        /// <remarks/>
        public void CheckEECertificationAsync(string pEmployeeName, string pResourceName, object userState) {
            if ((this.CheckEECertificationOperationCompleted == null)) {
                this.CheckEECertificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckEECertificationOperationCompleted);
            }
            this.InvokeAsync("CheckEECertification", new object[] {
                        pEmployeeName,
                        pResourceName}, this.CheckEECertificationOperationCompleted, userState);
        }
        
        private void OnCheckEECertificationOperationCompleted(object arg) {
            if ((this.CheckEECertificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckEECertificationCompleted(this, new CheckEECertificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAMSCusLotNO_CusNameByUstLotNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAMSCusLotNO_CusNameByUstLotNo(string UstLotNo, ref string sMsg) {
            object[] results = this.Invoke("GetAMSCusLotNO_CusNameByUstLotNo", new object[] {
                        UstLotNo,
                        sMsg});
            sMsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAMSCusLotNO_CusNameByUstLotNoAsync(string UstLotNo, string sMsg) {
            this.GetAMSCusLotNO_CusNameByUstLotNoAsync(UstLotNo, sMsg, null);
        }
        
        /// <remarks/>
        public void GetAMSCusLotNO_CusNameByUstLotNoAsync(string UstLotNo, string sMsg, object userState) {
            if ((this.GetAMSCusLotNO_CusNameByUstLotNoOperationCompleted == null)) {
                this.GetAMSCusLotNO_CusNameByUstLotNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAMSCusLotNO_CusNameByUstLotNoOperationCompleted);
            }
            this.InvokeAsync("GetAMSCusLotNO_CusNameByUstLotNo", new object[] {
                        UstLotNo,
                        sMsg}, this.GetAMSCusLotNO_CusNameByUstLotNoOperationCompleted, userState);
        }
        
        private void OnGetAMSCusLotNO_CusNameByUstLotNoOperationCompleted(object arg) {
            if ((this.GetAMSCusLotNO_CusNameByUstLotNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAMSCusLotNO_CusNameByUstLotNoCompleted(this, new GetAMSCusLotNO_CusNameByUstLotNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LotDispatch_API_ByAMSLotId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LotDispatch_API_ByAMSLotId(string sAMSLotId, ref string sMsg, string sComments, string sUserName) {
            object[] results = this.Invoke("LotDispatch_API_ByAMSLotId", new object[] {
                        sAMSLotId,
                        sMsg,
                        sComments,
                        sUserName});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LotDispatch_API_ByAMSLotIdAsync(string sAMSLotId, string sMsg, string sComments, string sUserName) {
            this.LotDispatch_API_ByAMSLotIdAsync(sAMSLotId, sMsg, sComments, sUserName, null);
        }
        
        /// <remarks/>
        public void LotDispatch_API_ByAMSLotIdAsync(string sAMSLotId, string sMsg, string sComments, string sUserName, object userState) {
            if ((this.LotDispatch_API_ByAMSLotIdOperationCompleted == null)) {
                this.LotDispatch_API_ByAMSLotIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLotDispatch_API_ByAMSLotIdOperationCompleted);
            }
            this.InvokeAsync("LotDispatch_API_ByAMSLotId", new object[] {
                        sAMSLotId,
                        sMsg,
                        sComments,
                        sUserName}, this.LotDispatch_API_ByAMSLotIdOperationCompleted, userState);
        }
        
        private void OnLotDispatch_API_ByAMSLotIdOperationCompleted(object arg) {
            if ((this.LotDispatch_API_ByAMSLotIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LotDispatch_API_ByAMSLotIdCompleted(this, new LotDispatch_API_ByAMSLotIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeAMSLotAttribute", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ChangeAMSLotAttribute(string sAMSLotId, string sAttributeName, string sAttributeValue, ref string sMsg) {
            object[] results = this.Invoke("ChangeAMSLotAttribute", new object[] {
                        sAMSLotId,
                        sAttributeName,
                        sAttributeValue,
                        sMsg});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeAMSLotAttributeAsync(string sAMSLotId, string sAttributeName, string sAttributeValue, string sMsg) {
            this.ChangeAMSLotAttributeAsync(sAMSLotId, sAttributeName, sAttributeValue, sMsg, null);
        }
        
        /// <remarks/>
        public void ChangeAMSLotAttributeAsync(string sAMSLotId, string sAttributeName, string sAttributeValue, string sMsg, object userState) {
            if ((this.ChangeAMSLotAttributeOperationCompleted == null)) {
                this.ChangeAMSLotAttributeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeAMSLotAttributeOperationCompleted);
            }
            this.InvokeAsync("ChangeAMSLotAttribute", new object[] {
                        sAMSLotId,
                        sAttributeName,
                        sAttributeValue,
                        sMsg}, this.ChangeAMSLotAttributeOperationCompleted, userState);
        }
        
        private void OnChangeAMSLotAttributeOperationCompleted(object arg) {
            if ((this.ChangeAMSLotAttributeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeAMSLotAttributeCompleted(this, new ChangeAMSLotAttributeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetONSEMITestProgramsForBOM", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetONSEMITestProgramsForBOM(string sDevice, string sTester) {
            object[] results = this.Invoke("GetONSEMITestProgramsForBOM", new object[] {
                        sDevice,
                        sTester});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetONSEMITestProgramsForBOMAsync(string sDevice, string sTester) {
            this.GetONSEMITestProgramsForBOMAsync(sDevice, sTester, null);
        }
        
        /// <remarks/>
        public void GetONSEMITestProgramsForBOMAsync(string sDevice, string sTester, object userState) {
            if ((this.GetONSEMITestProgramsForBOMOperationCompleted == null)) {
                this.GetONSEMITestProgramsForBOMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetONSEMITestProgramsForBOMOperationCompleted);
            }
            this.InvokeAsync("GetONSEMITestProgramsForBOM", new object[] {
                        sDevice,
                        sTester}, this.GetONSEMITestProgramsForBOMOperationCompleted, userState);
        }
        
        private void OnGetONSEMITestProgramsForBOMOperationCompleted(object arg) {
            if ((this.GetONSEMITestProgramsForBOMCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetONSEMITestProgramsForBOMCompleted(this, new GetONSEMITestProgramsForBOMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/B2B_QORVO_USP_CHECK", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string B2B_QORVO_USP_CHECK(string sRC, string sUserName) {
            object[] results = this.Invoke("B2B_QORVO_USP_CHECK", new object[] {
                        sRC,
                        sUserName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void B2B_QORVO_USP_CHECKAsync(string sRC, string sUserName) {
            this.B2B_QORVO_USP_CHECKAsync(sRC, sUserName, null);
        }
        
        /// <remarks/>
        public void B2B_QORVO_USP_CHECKAsync(string sRC, string sUserName, object userState) {
            if ((this.B2B_QORVO_USP_CHECKOperationCompleted == null)) {
                this.B2B_QORVO_USP_CHECKOperationCompleted = new System.Threading.SendOrPostCallback(this.OnB2B_QORVO_USP_CHECKOperationCompleted);
            }
            this.InvokeAsync("B2B_QORVO_USP_CHECK", new object[] {
                        sRC,
                        sUserName}, this.B2B_QORVO_USP_CHECKOperationCompleted, userState);
        }
        
        private void OnB2B_QORVO_USP_CHECKOperationCompleted(object arg) {
            if ((this.B2B_QORVO_USP_CHECKCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.B2B_QORVO_USP_CHECKCompleted(this, new B2B_QORVO_USP_CHECKCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetNPIBulidPlanForAMS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNPIBulidPlanForAMS(string sLotID, string sWaferID) {
            object[] results = this.Invoke("GetNPIBulidPlanForAMS", new object[] {
                        sLotID,
                        sWaferID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNPIBulidPlanForAMSAsync(string sLotID, string sWaferID) {
            this.GetNPIBulidPlanForAMSAsync(sLotID, sWaferID, null);
        }
        
        /// <remarks/>
        public void GetNPIBulidPlanForAMSAsync(string sLotID, string sWaferID, object userState) {
            if ((this.GetNPIBulidPlanForAMSOperationCompleted == null)) {
                this.GetNPIBulidPlanForAMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNPIBulidPlanForAMSOperationCompleted);
            }
            this.InvokeAsync("GetNPIBulidPlanForAMS", new object[] {
                        sLotID,
                        sWaferID}, this.GetNPIBulidPlanForAMSOperationCompleted, userState);
        }
        
        private void OnGetNPIBulidPlanForAMSOperationCompleted(object arg) {
            if ((this.GetNPIBulidPlanForAMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNPIBulidPlanForAMSCompleted(this, new GetNPIBulidPlanForAMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMCNDeviceCodeForNotes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMCNDeviceCodeForNotes(string sMCN) {
            object[] results = this.Invoke("GetMCNDeviceCodeForNotes", new object[] {
                        sMCN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMCNDeviceCodeForNotesAsync(string sMCN) {
            this.GetMCNDeviceCodeForNotesAsync(sMCN, null);
        }
        
        /// <remarks/>
        public void GetMCNDeviceCodeForNotesAsync(string sMCN, object userState) {
            if ((this.GetMCNDeviceCodeForNotesOperationCompleted == null)) {
                this.GetMCNDeviceCodeForNotesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMCNDeviceCodeForNotesOperationCompleted);
            }
            this.InvokeAsync("GetMCNDeviceCodeForNotes", new object[] {
                        sMCN}, this.GetMCNDeviceCodeForNotesOperationCompleted, userState);
        }
        
        private void OnGetMCNDeviceCodeForNotesOperationCompleted(object arg) {
            if ((this.GetMCNDeviceCodeForNotesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMCNDeviceCodeForNotesCompleted(this, new GetMCNDeviceCodeForNotesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenFCMaterialLabelInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenFCMaterialLabelInfo(string sMaterialInfo) {
            object[] results = this.Invoke("GenFCMaterialLabelInfo", new object[] {
                        sMaterialInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenFCMaterialLabelInfoAsync(string sMaterialInfo) {
            this.GenFCMaterialLabelInfoAsync(sMaterialInfo, null);
        }
        
        /// <remarks/>
        public void GenFCMaterialLabelInfoAsync(string sMaterialInfo, object userState) {
            if ((this.GenFCMaterialLabelInfoOperationCompleted == null)) {
                this.GenFCMaterialLabelInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenFCMaterialLabelInfoOperationCompleted);
            }
            this.InvokeAsync("GenFCMaterialLabelInfo", new object[] {
                        sMaterialInfo}, this.GenFCMaterialLabelInfoOperationCompleted, userState);
        }
        
        private void OnGenFCMaterialLabelInfoOperationCompleted(object arg) {
            if ((this.GenFCMaterialLabelInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenFCMaterialLabelInfoCompleted(this, new GenFCMaterialLabelInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RCV_NotesCPBOM_Number", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RCV_NotesCPBOM_Number(string CP_BOM_RequestNo, string TargetDevice, string TestProgram) {
            object[] results = this.Invoke("RCV_NotesCPBOM_Number", new object[] {
                        CP_BOM_RequestNo,
                        TargetDevice,
                        TestProgram});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RCV_NotesCPBOM_NumberAsync(string CP_BOM_RequestNo, string TargetDevice, string TestProgram) {
            this.RCV_NotesCPBOM_NumberAsync(CP_BOM_RequestNo, TargetDevice, TestProgram, null);
        }
        
        /// <remarks/>
        public void RCV_NotesCPBOM_NumberAsync(string CP_BOM_RequestNo, string TargetDevice, string TestProgram, object userState) {
            if ((this.RCV_NotesCPBOM_NumberOperationCompleted == null)) {
                this.RCV_NotesCPBOM_NumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRCV_NotesCPBOM_NumberOperationCompleted);
            }
            this.InvokeAsync("RCV_NotesCPBOM_Number", new object[] {
                        CP_BOM_RequestNo,
                        TargetDevice,
                        TestProgram}, this.RCV_NotesCPBOM_NumberOperationCompleted, userState);
        }
        
        private void OnRCV_NotesCPBOM_NumberOperationCompleted(object arg) {
            if ((this.RCV_NotesCPBOM_NumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RCV_NotesCPBOM_NumberCompleted(this, new RCV_NotesCPBOM_NumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RCV_NotesPCN_Number", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RCV_NotesPCN_Number(string CP_PCN_RequestNo, string SpecNo, string CreateDate) {
            object[] results = this.Invoke("RCV_NotesPCN_Number", new object[] {
                        CP_PCN_RequestNo,
                        SpecNo,
                        CreateDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RCV_NotesPCN_NumberAsync(string CP_PCN_RequestNo, string SpecNo, string CreateDate) {
            this.RCV_NotesPCN_NumberAsync(CP_PCN_RequestNo, SpecNo, CreateDate, null);
        }
        
        /// <remarks/>
        public void RCV_NotesPCN_NumberAsync(string CP_PCN_RequestNo, string SpecNo, string CreateDate, object userState) {
            if ((this.RCV_NotesPCN_NumberOperationCompleted == null)) {
                this.RCV_NotesPCN_NumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRCV_NotesPCN_NumberOperationCompleted);
            }
            this.InvokeAsync("RCV_NotesPCN_Number", new object[] {
                        CP_PCN_RequestNo,
                        SpecNo,
                        CreateDate}, this.RCV_NotesPCN_NumberOperationCompleted, userState);
        }
        
        private void OnRCV_NotesPCN_NumberOperationCompleted(object arg) {
            if ((this.RCV_NotesPCN_NumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RCV_NotesPCN_NumberCompleted(this, new RCV_NotesPCN_NumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ToGet_TestProgram_EffectiveDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ToGet_TestProgram_EffectiveDate(string TargetDevice, string Old_TestProgram) {
            object[] results = this.Invoke("ToGet_TestProgram_EffectiveDate", new object[] {
                        TargetDevice,
                        Old_TestProgram});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ToGet_TestProgram_EffectiveDateAsync(string TargetDevice, string Old_TestProgram) {
            this.ToGet_TestProgram_EffectiveDateAsync(TargetDevice, Old_TestProgram, null);
        }
        
        /// <remarks/>
        public void ToGet_TestProgram_EffectiveDateAsync(string TargetDevice, string Old_TestProgram, object userState) {
            if ((this.ToGet_TestProgram_EffectiveDateOperationCompleted == null)) {
                this.ToGet_TestProgram_EffectiveDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnToGet_TestProgram_EffectiveDateOperationCompleted);
            }
            this.InvokeAsync("ToGet_TestProgram_EffectiveDate", new object[] {
                        TargetDevice,
                        Old_TestProgram}, this.ToGet_TestProgram_EffectiveDateOperationCompleted, userState);
        }
        
        private void OnToGet_TestProgram_EffectiveDateOperationCompleted(object arg) {
            if ((this.ToGet_TestProgram_EffectiveDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ToGet_TestProgram_EffectiveDateCompleted(this, new ToGet_TestProgram_EffectiveDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPSMData_MaskIDList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPSMData_MaskIDList(string sTrackingID) {
            object[] results = this.Invoke("GetPSMData_MaskIDList", new object[] {
                        sTrackingID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPSMData_MaskIDListAsync(string sTrackingID) {
            this.GetPSMData_MaskIDListAsync(sTrackingID, null);
        }
        
        /// <remarks/>
        public void GetPSMData_MaskIDListAsync(string sTrackingID, object userState) {
            if ((this.GetPSMData_MaskIDListOperationCompleted == null)) {
                this.GetPSMData_MaskIDListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPSMData_MaskIDListOperationCompleted);
            }
            this.InvokeAsync("GetPSMData_MaskIDList", new object[] {
                        sTrackingID}, this.GetPSMData_MaskIDListOperationCompleted, userState);
        }
        
        private void OnGetPSMData_MaskIDListOperationCompleted(object arg) {
            if ((this.GetPSMData_MaskIDListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPSMData_MaskIDListCompleted(this, new GetPSMData_MaskIDListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBladeRecipe", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBladeRecipe(string RC, string SID) {
            object[] results = this.Invoke("GetBladeRecipe", new object[] {
                        RC,
                        SID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBladeRecipeAsync(string RC, string SID) {
            this.GetBladeRecipeAsync(RC, SID, null);
        }
        
        /// <remarks/>
        public void GetBladeRecipeAsync(string RC, string SID, object userState) {
            if ((this.GetBladeRecipeOperationCompleted == null)) {
                this.GetBladeRecipeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBladeRecipeOperationCompleted);
            }
            this.InvokeAsync("GetBladeRecipe", new object[] {
                        RC,
                        SID}, this.GetBladeRecipeOperationCompleted, userState);
        }
        
        private void OnGetBladeRecipeOperationCompleted(object arg) {
            if ((this.GetBladeRecipeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBladeRecipeCompleted(this, new GetBladeRecipeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eCIMToMESAlarm", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string eCIMToMESAlarm(string RC, string OPERATION, string MC, string REEL, string POSITION, string ALARM, string Action) {
            object[] results = this.Invoke("eCIMToMESAlarm", new object[] {
                        RC,
                        OPERATION,
                        MC,
                        REEL,
                        POSITION,
                        ALARM,
                        Action});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void eCIMToMESAlarmAsync(string RC, string OPERATION, string MC, string REEL, string POSITION, string ALARM, string Action) {
            this.eCIMToMESAlarmAsync(RC, OPERATION, MC, REEL, POSITION, ALARM, Action, null);
        }
        
        /// <remarks/>
        public void eCIMToMESAlarmAsync(string RC, string OPERATION, string MC, string REEL, string POSITION, string ALARM, string Action, object userState) {
            if ((this.eCIMToMESAlarmOperationCompleted == null)) {
                this.eCIMToMESAlarmOperationCompleted = new System.Threading.SendOrPostCallback(this.OneCIMToMESAlarmOperationCompleted);
            }
            this.InvokeAsync("eCIMToMESAlarm", new object[] {
                        RC,
                        OPERATION,
                        MC,
                        REEL,
                        POSITION,
                        ALARM,
                        Action}, this.eCIMToMESAlarmOperationCompleted, userState);
        }
        
        private void OneCIMToMESAlarmOperationCompleted(object arg) {
            if ((this.eCIMToMESAlarmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.eCIMToMESAlarmCompleted(this, new eCIMToMESAlarmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckResourceLogFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckResourceLogFile(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID) {
            object[] results = this.Invoke("CheckResourceLogFile", new object[] {
                        LotNo,
                        Resource,
                        Recipe,
                        FromSystem,
                        OPBadgeID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckResourceLogFileAsync(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID) {
            this.CheckResourceLogFileAsync(LotNo, Resource, Recipe, FromSystem, OPBadgeID, null);
        }
        
        /// <remarks/>
        public void CheckResourceLogFileAsync(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID, object userState) {
            if ((this.CheckResourceLogFileOperationCompleted == null)) {
                this.CheckResourceLogFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckResourceLogFileOperationCompleted);
            }
            this.InvokeAsync("CheckResourceLogFile", new object[] {
                        LotNo,
                        Resource,
                        Recipe,
                        FromSystem,
                        OPBadgeID}, this.CheckResourceLogFileOperationCompleted, userState);
        }
        
        private void OnCheckResourceLogFileOperationCompleted(object arg) {
            if ((this.CheckResourceLogFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckResourceLogFileCompleted(this, new CheckResourceLogFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckResourceLogFileForTest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckResourceLogFileForTest(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID, string StartTime, string EndTime) {
            object[] results = this.Invoke("CheckResourceLogFileForTest", new object[] {
                        LotNo,
                        Resource,
                        Recipe,
                        FromSystem,
                        OPBadgeID,
                        StartTime,
                        EndTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckResourceLogFileForTestAsync(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID, string StartTime, string EndTime) {
            this.CheckResourceLogFileForTestAsync(LotNo, Resource, Recipe, FromSystem, OPBadgeID, StartTime, EndTime, null);
        }
        
        /// <remarks/>
        public void CheckResourceLogFileForTestAsync(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID, string StartTime, string EndTime, object userState) {
            if ((this.CheckResourceLogFileForTestOperationCompleted == null)) {
                this.CheckResourceLogFileForTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckResourceLogFileForTestOperationCompleted);
            }
            this.InvokeAsync("CheckResourceLogFileForTest", new object[] {
                        LotNo,
                        Resource,
                        Recipe,
                        FromSystem,
                        OPBadgeID,
                        StartTime,
                        EndTime}, this.CheckResourceLogFileForTestOperationCompleted, userState);
        }
        
        private void OnCheckResourceLogFileForTestOperationCompleted(object arg) {
            if ((this.CheckResourceLogFileForTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckResourceLogFileForTestCompleted(this, new CheckResourceLogFileForTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetECLikeSetting_HoldReason", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetECLikeSetting_HoldReason(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID) {
            object[] results = this.Invoke("GetECLikeSetting_HoldReason", new object[] {
                        LotNo,
                        Resource,
                        Recipe,
                        FromSystem,
                        OPBadgeID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetECLikeSetting_HoldReasonAsync(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID) {
            this.GetECLikeSetting_HoldReasonAsync(LotNo, Resource, Recipe, FromSystem, OPBadgeID, null);
        }
        
        /// <remarks/>
        public void GetECLikeSetting_HoldReasonAsync(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID, object userState) {
            if ((this.GetECLikeSetting_HoldReasonOperationCompleted == null)) {
                this.GetECLikeSetting_HoldReasonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetECLikeSetting_HoldReasonOperationCompleted);
            }
            this.InvokeAsync("GetECLikeSetting_HoldReason", new object[] {
                        LotNo,
                        Resource,
                        Recipe,
                        FromSystem,
                        OPBadgeID}, this.GetECLikeSetting_HoldReasonOperationCompleted, userState);
        }
        
        private void OnGetECLikeSetting_HoldReasonOperationCompleted(object arg) {
            if ((this.GetECLikeSetting_HoldReasonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetECLikeSetting_HoldReasonCompleted(this, new GetECLikeSetting_HoldReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetECLikeSetting_OwnerDepartment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetECLikeSetting_OwnerDepartment(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID) {
            object[] results = this.Invoke("GetECLikeSetting_OwnerDepartment", new object[] {
                        LotNo,
                        Resource,
                        Recipe,
                        FromSystem,
                        OPBadgeID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetECLikeSetting_OwnerDepartmentAsync(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID) {
            this.GetECLikeSetting_OwnerDepartmentAsync(LotNo, Resource, Recipe, FromSystem, OPBadgeID, null);
        }
        
        /// <remarks/>
        public void GetECLikeSetting_OwnerDepartmentAsync(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID, object userState) {
            if ((this.GetECLikeSetting_OwnerDepartmentOperationCompleted == null)) {
                this.GetECLikeSetting_OwnerDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetECLikeSetting_OwnerDepartmentOperationCompleted);
            }
            this.InvokeAsync("GetECLikeSetting_OwnerDepartment", new object[] {
                        LotNo,
                        Resource,
                        Recipe,
                        FromSystem,
                        OPBadgeID}, this.GetECLikeSetting_OwnerDepartmentOperationCompleted, userState);
        }
        
        private void OnGetECLikeSetting_OwnerDepartmentOperationCompleted(object arg) {
            if ((this.GetECLikeSetting_OwnerDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetECLikeSetting_OwnerDepartmentCompleted(this, new GetECLikeSetting_OwnerDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ECLikeAllowSkip", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ECLikeAllowSkip(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID) {
            object[] results = this.Invoke("ECLikeAllowSkip", new object[] {
                        LotNo,
                        Resource,
                        Recipe,
                        FromSystem,
                        OPBadgeID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ECLikeAllowSkipAsync(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID) {
            this.ECLikeAllowSkipAsync(LotNo, Resource, Recipe, FromSystem, OPBadgeID, null);
        }
        
        /// <remarks/>
        public void ECLikeAllowSkipAsync(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID, object userState) {
            if ((this.ECLikeAllowSkipOperationCompleted == null)) {
                this.ECLikeAllowSkipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnECLikeAllowSkipOperationCompleted);
            }
            this.InvokeAsync("ECLikeAllowSkip", new object[] {
                        LotNo,
                        Resource,
                        Recipe,
                        FromSystem,
                        OPBadgeID}, this.ECLikeAllowSkipOperationCompleted, userState);
        }
        
        private void OnECLikeAllowSkipOperationCompleted(object arg) {
            if ((this.ECLikeAllowSkipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ECLikeAllowSkipCompleted(this, new ECLikeAllowSkipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ECLikeCheckHaveSetting", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ECLikeCheckHaveSetting(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID) {
            object[] results = this.Invoke("ECLikeCheckHaveSetting", new object[] {
                        LotNo,
                        Resource,
                        Recipe,
                        FromSystem,
                        OPBadgeID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ECLikeCheckHaveSettingAsync(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID) {
            this.ECLikeCheckHaveSettingAsync(LotNo, Resource, Recipe, FromSystem, OPBadgeID, null);
        }
        
        /// <remarks/>
        public void ECLikeCheckHaveSettingAsync(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID, object userState) {
            if ((this.ECLikeCheckHaveSettingOperationCompleted == null)) {
                this.ECLikeCheckHaveSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnECLikeCheckHaveSettingOperationCompleted);
            }
            this.InvokeAsync("ECLikeCheckHaveSetting", new object[] {
                        LotNo,
                        Resource,
                        Recipe,
                        FromSystem,
                        OPBadgeID}, this.ECLikeCheckHaveSettingOperationCompleted, userState);
        }
        
        private void OnECLikeCheckHaveSettingOperationCompleted(object arg) {
            if ((this.ECLikeCheckHaveSettingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ECLikeCheckHaveSettingCompleted(this, new ECLikeCheckHaveSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetECLikeSetting_IsHoldLot", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetECLikeSetting_IsHoldLot(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID) {
            object[] results = this.Invoke("GetECLikeSetting_IsHoldLot", new object[] {
                        LotNo,
                        Resource,
                        Recipe,
                        FromSystem,
                        OPBadgeID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetECLikeSetting_IsHoldLotAsync(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID) {
            this.GetECLikeSetting_IsHoldLotAsync(LotNo, Resource, Recipe, FromSystem, OPBadgeID, null);
        }
        
        /// <remarks/>
        public void GetECLikeSetting_IsHoldLotAsync(string LotNo, string Resource, string Recipe, string FromSystem, string OPBadgeID, object userState) {
            if ((this.GetECLikeSetting_IsHoldLotOperationCompleted == null)) {
                this.GetECLikeSetting_IsHoldLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetECLikeSetting_IsHoldLotOperationCompleted);
            }
            this.InvokeAsync("GetECLikeSetting_IsHoldLot", new object[] {
                        LotNo,
                        Resource,
                        Recipe,
                        FromSystem,
                        OPBadgeID}, this.GetECLikeSetting_IsHoldLotOperationCompleted, userState);
        }
        
        private void OnGetECLikeSetting_IsHoldLotOperationCompleted(object arg) {
            if ((this.GetECLikeSetting_IsHoldLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetECLikeSetting_IsHoldLotCompleted(this, new GetECLikeSetting_IsHoldLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDPTapingRecipe", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDPTapingRecipe(string sLot) {
            object[] results = this.Invoke("GetDPTapingRecipe", new object[] {
                        sLot});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDPTapingRecipeAsync(string sLot) {
            this.GetDPTapingRecipeAsync(sLot, null);
        }
        
        /// <remarks/>
        public void GetDPTapingRecipeAsync(string sLot, object userState) {
            if ((this.GetDPTapingRecipeOperationCompleted == null)) {
                this.GetDPTapingRecipeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDPTapingRecipeOperationCompleted);
            }
            this.InvokeAsync("GetDPTapingRecipe", new object[] {
                        sLot}, this.GetDPTapingRecipeOperationCompleted, userState);
        }
        
        private void OnGetDPTapingRecipeOperationCompleted(object arg) {
            if ((this.GetDPTapingRecipeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDPTapingRecipeCompleted(this, new GetDPTapingRecipeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRecipeName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRecipeName(string sLot, string sOper) {
            object[] results = this.Invoke("GetRecipeName", new object[] {
                        sLot,
                        sOper});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRecipeNameAsync(string sLot, string sOper) {
            this.GetRecipeNameAsync(sLot, sOper, null);
        }
        
        /// <remarks/>
        public void GetRecipeNameAsync(string sLot, string sOper, object userState) {
            if ((this.GetRecipeNameOperationCompleted == null)) {
                this.GetRecipeNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRecipeNameOperationCompleted);
            }
            this.InvokeAsync("GetRecipeName", new object[] {
                        sLot,
                        sOper}, this.GetRecipeNameOperationCompleted, userState);
        }
        
        private void OnGetRecipeNameOperationCompleted(object arg) {
            if ((this.GetRecipeNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRecipeNameCompleted(this, new GetRecipeNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RecordTestProgramForWS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RecordTestProgramForWS(string sRunCardNo) {
            this.Invoke("RecordTestProgramForWS", new object[] {
                        sRunCardNo});
        }
        
        /// <remarks/>
        public void RecordTestProgramForWSAsync(string sRunCardNo) {
            this.RecordTestProgramForWSAsync(sRunCardNo, null);
        }
        
        /// <remarks/>
        public void RecordTestProgramForWSAsync(string sRunCardNo, object userState) {
            if ((this.RecordTestProgramForWSOperationCompleted == null)) {
                this.RecordTestProgramForWSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecordTestProgramForWSOperationCompleted);
            }
            this.InvokeAsync("RecordTestProgramForWS", new object[] {
                        sRunCardNo}, this.RecordTestProgramForWSOperationCompleted, userState);
        }
        
        private void OnRecordTestProgramForWSOperationCompleted(object arg) {
            if ((this.RecordTestProgramForWSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecordTestProgramForWSCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOperInstr", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetOperInstr(string sLot) {
            object[] results = this.Invoke("GetOperInstr", new object[] {
                        sLot});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetOperInstrAsync(string sLot) {
            this.GetOperInstrAsync(sLot, null);
        }
        
        /// <remarks/>
        public void GetOperInstrAsync(string sLot, object userState) {
            if ((this.GetOperInstrOperationCompleted == null)) {
                this.GetOperInstrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOperInstrOperationCompleted);
            }
            this.InvokeAsync("GetOperInstr", new object[] {
                        sLot}, this.GetOperInstrOperationCompleted, userState);
        }
        
        private void OnGetOperInstrOperationCompleted(object arg) {
            if ((this.GetOperInstrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOperInstrCompleted(this, new GetOperInstrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOperSID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetOperSID(string sLot) {
            object[] results = this.Invoke("GetOperSID", new object[] {
                        sLot});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetOperSIDAsync(string sLot) {
            this.GetOperSIDAsync(sLot, null);
        }
        
        /// <remarks/>
        public void GetOperSIDAsync(string sLot, object userState) {
            if ((this.GetOperSIDOperationCompleted == null)) {
                this.GetOperSIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOperSIDOperationCompleted);
            }
            this.InvokeAsync("GetOperSID", new object[] {
                        sLot}, this.GetOperSIDOperationCompleted, userState);
        }
        
        private void OnGetOperSIDOperationCompleted(object arg) {
            if ((this.GetOperSIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOperSIDCompleted(this, new GetOperSIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOperSID_WithValidate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetOperSID_WithValidate(string Lot, string SID, bool NeedMaterialList, bool ThrowErorWhenFailed, string SourceCaller) {
            object[] results = this.Invoke("GetOperSID_WithValidate", new object[] {
                        Lot,
                        SID,
                        NeedMaterialList,
                        ThrowErorWhenFailed,
                        SourceCaller});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetOperSID_WithValidateAsync(string Lot, string SID, bool NeedMaterialList, bool ThrowErorWhenFailed, string SourceCaller) {
            this.GetOperSID_WithValidateAsync(Lot, SID, NeedMaterialList, ThrowErorWhenFailed, SourceCaller, null);
        }
        
        /// <remarks/>
        public void GetOperSID_WithValidateAsync(string Lot, string SID, bool NeedMaterialList, bool ThrowErorWhenFailed, string SourceCaller, object userState) {
            if ((this.GetOperSID_WithValidateOperationCompleted == null)) {
                this.GetOperSID_WithValidateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOperSID_WithValidateOperationCompleted);
            }
            this.InvokeAsync("GetOperSID_WithValidate", new object[] {
                        Lot,
                        SID,
                        NeedMaterialList,
                        ThrowErorWhenFailed,
                        SourceCaller}, this.GetOperSID_WithValidateOperationCompleted, userState);
        }
        
        private void OnGetOperSID_WithValidateOperationCompleted(object arg) {
            if ((this.GetOperSID_WithValidateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOperSID_WithValidateCompleted(this, new GetOperSID_WithValidateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDPGRINDRecipe", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDPGRINDRecipe(string sLot) {
            object[] results = this.Invoke("GetDPGRINDRecipe", new object[] {
                        sLot});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDPGRINDRecipeAsync(string sLot) {
            this.GetDPGRINDRecipeAsync(sLot, null);
        }
        
        /// <remarks/>
        public void GetDPGRINDRecipeAsync(string sLot, object userState) {
            if ((this.GetDPGRINDRecipeOperationCompleted == null)) {
                this.GetDPGRINDRecipeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDPGRINDRecipeOperationCompleted);
            }
            this.InvokeAsync("GetDPGRINDRecipe", new object[] {
                        sLot}, this.GetDPGRINDRecipeOperationCompleted, userState);
        }
        
        private void OnGetDPGRINDRecipeOperationCompleted(object arg) {
            if ((this.GetDPGRINDRecipeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDPGRINDRecipeCompleted(this, new GetDPGRINDRecipeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertRawData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertRawData(string argContainer, string argAPIXml, string argRawData) {
            object[] results = this.Invoke("InsertRawData", new object[] {
                        argContainer,
                        argAPIXml,
                        argRawData});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertRawDataAsync(string argContainer, string argAPIXml, string argRawData) {
            this.InsertRawDataAsync(argContainer, argAPIXml, argRawData, null);
        }
        
        /// <remarks/>
        public void InsertRawDataAsync(string argContainer, string argAPIXml, string argRawData, object userState) {
            if ((this.InsertRawDataOperationCompleted == null)) {
                this.InsertRawDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertRawDataOperationCompleted);
            }
            this.InvokeAsync("InsertRawData", new object[] {
                        argContainer,
                        argAPIXml,
                        argRawData}, this.InsertRawDataOperationCompleted, userState);
        }
        
        private void OnInsertRawDataOperationCompleted(object arg) {
            if ((this.InsertRawDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertRawDataCompleted(this, new InsertRawDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDPPnPRecipe", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDPPnPRecipe(string sLot) {
            object[] results = this.Invoke("GetDPPnPRecipe", new object[] {
                        sLot});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDPPnPRecipeAsync(string sLot) {
            this.GetDPPnPRecipeAsync(sLot, null);
        }
        
        /// <remarks/>
        public void GetDPPnPRecipeAsync(string sLot, object userState) {
            if ((this.GetDPPnPRecipeOperationCompleted == null)) {
                this.GetDPPnPRecipeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDPPnPRecipeOperationCompleted);
            }
            this.InvokeAsync("GetDPPnPRecipe", new object[] {
                        sLot}, this.GetDPPnPRecipeOperationCompleted, userState);
        }
        
        private void OnGetDPPnPRecipeOperationCompleted(object arg) {
            if ((this.GetDPPnPRecipeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDPPnPRecipeCompleted(this, new GetDPPnPRecipeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDPPnPRecipeByParameter", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDPPnPRecipeByParameter(string sCustomer, string sFabSite, string sBumpSource, string sDeviceName, string sDeviceType) {
            object[] results = this.Invoke("GetDPPnPRecipeByParameter", new object[] {
                        sCustomer,
                        sFabSite,
                        sBumpSource,
                        sDeviceName,
                        sDeviceType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDPPnPRecipeByParameterAsync(string sCustomer, string sFabSite, string sBumpSource, string sDeviceName, string sDeviceType) {
            this.GetDPPnPRecipeByParameterAsync(sCustomer, sFabSite, sBumpSource, sDeviceName, sDeviceType, null);
        }
        
        /// <remarks/>
        public void GetDPPnPRecipeByParameterAsync(string sCustomer, string sFabSite, string sBumpSource, string sDeviceName, string sDeviceType, object userState) {
            if ((this.GetDPPnPRecipeByParameterOperationCompleted == null)) {
                this.GetDPPnPRecipeByParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDPPnPRecipeByParameterOperationCompleted);
            }
            this.InvokeAsync("GetDPPnPRecipeByParameter", new object[] {
                        sCustomer,
                        sFabSite,
                        sBumpSource,
                        sDeviceName,
                        sDeviceType}, this.GetDPPnPRecipeByParameterOperationCompleted, userState);
        }
        
        private void OnGetDPPnPRecipeByParameterOperationCompleted(object arg) {
            if ((this.GetDPPnPRecipeByParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDPPnPRecipeByParameterCompleted(this, new GetDPPnPRecipeByParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBSRecipe", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBSRecipe(string sLot) {
            object[] results = this.Invoke("GetBSRecipe", new object[] {
                        sLot});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBSRecipeAsync(string sLot) {
            this.GetBSRecipeAsync(sLot, null);
        }
        
        /// <remarks/>
        public void GetBSRecipeAsync(string sLot, object userState) {
            if ((this.GetBSRecipeOperationCompleted == null)) {
                this.GetBSRecipeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBSRecipeOperationCompleted);
            }
            this.InvokeAsync("GetBSRecipe", new object[] {
                        sLot}, this.GetBSRecipeOperationCompleted, userState);
        }
        
        private void OnGetBSRecipeOperationCompleted(object arg) {
            if ((this.GetBSRecipeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBSRecipeCompleted(this, new GetBSRecipeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBSRecipeRuncard", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBSRecipeRuncard(string sLot, string sOperation) {
            object[] results = this.Invoke("GetBSRecipeRuncard", new object[] {
                        sLot,
                        sOperation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBSRecipeRuncardAsync(string sLot, string sOperation) {
            this.GetBSRecipeRuncardAsync(sLot, sOperation, null);
        }
        
        /// <remarks/>
        public void GetBSRecipeRuncardAsync(string sLot, string sOperation, object userState) {
            if ((this.GetBSRecipeRuncardOperationCompleted == null)) {
                this.GetBSRecipeRuncardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBSRecipeRuncardOperationCompleted);
            }
            this.InvokeAsync("GetBSRecipeRuncard", new object[] {
                        sLot,
                        sOperation}, this.GetBSRecipeRuncardOperationCompleted, userState);
        }
        
        private void OnGetBSRecipeRuncardOperationCompleted(object arg) {
            if ((this.GetBSRecipeRuncardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBSRecipeRuncardCompleted(this, new GetBSRecipeRuncardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQCLPNCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetQCLPNCode() {
            object[] results = this.Invoke("GetQCLPNCode", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetQCLPNCodeAsync() {
            this.GetQCLPNCodeAsync(null);
        }
        
        /// <remarks/>
        public void GetQCLPNCodeAsync(object userState) {
            if ((this.GetQCLPNCodeOperationCompleted == null)) {
                this.GetQCLPNCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQCLPNCodeOperationCompleted);
            }
            this.InvokeAsync("GetQCLPNCode", new object[0], this.GetQCLPNCodeOperationCompleted, userState);
        }
        
        private void OnGetQCLPNCodeOperationCompleted(object arg) {
            if ((this.GetQCLPNCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQCLPNCodeCompleted(this, new GetQCLPNCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQCLPNCodeBySite", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetQCLPNCodeBySite(string SiteCode) {
            object[] results = this.Invoke("GetQCLPNCodeBySite", new object[] {
                        SiteCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetQCLPNCodeBySiteAsync(string SiteCode) {
            this.GetQCLPNCodeBySiteAsync(SiteCode, null);
        }
        
        /// <remarks/>
        public void GetQCLPNCodeBySiteAsync(string SiteCode, object userState) {
            if ((this.GetQCLPNCodeBySiteOperationCompleted == null)) {
                this.GetQCLPNCodeBySiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQCLPNCodeBySiteOperationCompleted);
            }
            this.InvokeAsync("GetQCLPNCodeBySite", new object[] {
                        SiteCode}, this.GetQCLPNCodeBySiteOperationCompleted, userState);
        }
        
        private void OnGetQCLPNCodeBySiteOperationCompleted(object arg) {
            if ((this.GetQCLPNCodeBySiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQCLPNCodeBySiteCompleted(this, new GetQCLPNCodeBySiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRICHTEKLPNCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRICHTEKLPNCode(string sType) {
            object[] results = this.Invoke("GetRICHTEKLPNCode", new object[] {
                        sType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRICHTEKLPNCodeAsync(string sType) {
            this.GetRICHTEKLPNCodeAsync(sType, null);
        }
        
        /// <remarks/>
        public void GetRICHTEKLPNCodeAsync(string sType, object userState) {
            if ((this.GetRICHTEKLPNCodeOperationCompleted == null)) {
                this.GetRICHTEKLPNCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRICHTEKLPNCodeOperationCompleted);
            }
            this.InvokeAsync("GetRICHTEKLPNCode", new object[] {
                        sType}, this.GetRICHTEKLPNCodeOperationCompleted, userState);
        }
        
        private void OnGetRICHTEKLPNCodeOperationCompleted(object arg) {
            if ((this.GetRICHTEKLPNCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRICHTEKLPNCodeCompleted(this, new GetRICHTEKLPNCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMTKLPNCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMTKLPNCode(string sType) {
            object[] results = this.Invoke("GetMTKLPNCode", new object[] {
                        sType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMTKLPNCodeAsync(string sType) {
            this.GetMTKLPNCodeAsync(sType, null);
        }
        
        /// <remarks/>
        public void GetMTKLPNCodeAsync(string sType, object userState) {
            if ((this.GetMTKLPNCodeOperationCompleted == null)) {
                this.GetMTKLPNCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMTKLPNCodeOperationCompleted);
            }
            this.InvokeAsync("GetMTKLPNCode", new object[] {
                        sType}, this.GetMTKLPNCodeOperationCompleted, userState);
        }
        
        private void OnGetMTKLPNCodeOperationCompleted(object arg) {
            if ((this.GetMTKLPNCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMTKLPNCodeCompleted(this, new GetMTKLPNCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAUDIENCELPNCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAUDIENCELPNCode(string sTargetDevice) {
            object[] results = this.Invoke("GetAUDIENCELPNCode", new object[] {
                        sTargetDevice});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAUDIENCELPNCodeAsync(string sTargetDevice) {
            this.GetAUDIENCELPNCodeAsync(sTargetDevice, null);
        }
        
        /// <remarks/>
        public void GetAUDIENCELPNCodeAsync(string sTargetDevice, object userState) {
            if ((this.GetAUDIENCELPNCodeOperationCompleted == null)) {
                this.GetAUDIENCELPNCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAUDIENCELPNCodeOperationCompleted);
            }
            this.InvokeAsync("GetAUDIENCELPNCode", new object[] {
                        sTargetDevice}, this.GetAUDIENCELPNCodeOperationCompleted, userState);
        }
        
        private void OnGetAUDIENCELPNCodeOperationCompleted(object arg) {
            if ((this.GetAUDIENCELPNCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAUDIENCELPNCodeCompleted(this, new GetAUDIENCELPNCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSONYLPNCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSONYLPNCode(string sLot) {
            object[] results = this.Invoke("GetSONYLPNCode", new object[] {
                        sLot});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSONYLPNCodeAsync(string sLot) {
            this.GetSONYLPNCodeAsync(sLot, null);
        }
        
        /// <remarks/>
        public void GetSONYLPNCodeAsync(string sLot, object userState) {
            if ((this.GetSONYLPNCodeOperationCompleted == null)) {
                this.GetSONYLPNCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSONYLPNCodeOperationCompleted);
            }
            this.InvokeAsync("GetSONYLPNCode", new object[] {
                        sLot}, this.GetSONYLPNCodeOperationCompleted, userState);
        }
        
        private void OnGetSONYLPNCodeOperationCompleted(object arg) {
            if ((this.GetSONYLPNCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSONYLPNCodeCompleted(this, new GetSONYLPNCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLotAttributeFields", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetLotAttributeFields() {
            object[] results = this.Invoke("GetLotAttributeFields", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetLotAttributeFieldsAsync() {
            this.GetLotAttributeFieldsAsync(null);
        }
        
        /// <remarks/>
        public void GetLotAttributeFieldsAsync(object userState) {
            if ((this.GetLotAttributeFieldsOperationCompleted == null)) {
                this.GetLotAttributeFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLotAttributeFieldsOperationCompleted);
            }
            this.InvokeAsync("GetLotAttributeFields", new object[0], this.GetLotAttributeFieldsOperationCompleted, userState);
        }
        
        private void OnGetLotAttributeFieldsOperationCompleted(object arg) {
            if ((this.GetLotAttributeFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLotAttributeFieldsCompleted(this, new GetLotAttributeFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/apiChangeAttribute", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string apiChangeAttribute(string sContainer, System.Data.DataSet oDSChg, string sComment) {
            object[] results = this.Invoke("apiChangeAttribute", new object[] {
                        sContainer,
                        oDSChg,
                        sComment});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void apiChangeAttributeAsync(string sContainer, System.Data.DataSet oDSChg, string sComment) {
            this.apiChangeAttributeAsync(sContainer, oDSChg, sComment, null);
        }
        
        /// <remarks/>
        public void apiChangeAttributeAsync(string sContainer, System.Data.DataSet oDSChg, string sComment, object userState) {
            if ((this.apiChangeAttributeOperationCompleted == null)) {
                this.apiChangeAttributeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapiChangeAttributeOperationCompleted);
            }
            this.InvokeAsync("apiChangeAttribute", new object[] {
                        sContainer,
                        oDSChg,
                        sComment}, this.apiChangeAttributeOperationCompleted, userState);
        }
        
        private void OnapiChangeAttributeOperationCompleted(object arg) {
            if ((this.apiChangeAttributeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.apiChangeAttributeCompleted(this, new apiChangeAttributeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GeneraterCustLotID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GeneraterCustLotID(string sTriggerPoint, string sCustomerShortName, string sCustomerName, string sProductType, System.Data.DataSet oAddtionalData) {
            object[] results = this.Invoke("GeneraterCustLotID", new object[] {
                        sTriggerPoint,
                        sCustomerShortName,
                        sCustomerName,
                        sProductType,
                        oAddtionalData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GeneraterCustLotIDAsync(string sTriggerPoint, string sCustomerShortName, string sCustomerName, string sProductType, System.Data.DataSet oAddtionalData) {
            this.GeneraterCustLotIDAsync(sTriggerPoint, sCustomerShortName, sCustomerName, sProductType, oAddtionalData, null);
        }
        
        /// <remarks/>
        public void GeneraterCustLotIDAsync(string sTriggerPoint, string sCustomerShortName, string sCustomerName, string sProductType, System.Data.DataSet oAddtionalData, object userState) {
            if ((this.GeneraterCustLotIDOperationCompleted == null)) {
                this.GeneraterCustLotIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneraterCustLotIDOperationCompleted);
            }
            this.InvokeAsync("GeneraterCustLotID", new object[] {
                        sTriggerPoint,
                        sCustomerShortName,
                        sCustomerName,
                        sProductType,
                        oAddtionalData}, this.GeneraterCustLotIDOperationCompleted, userState);
        }
        
        private void OnGeneraterCustLotIDOperationCompleted(object arg) {
            if ((this.GeneraterCustLotIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneraterCustLotIDCompleted(this, new GeneraterCustLotIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GeneraterDateCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GeneraterDateCode(string sTriggerPoint, string sCustomerShortName, string sDateCodeFormat, string sBaseDateType, string sSpecificDate, string sCustomerName, string sProductType) {
            object[] results = this.Invoke("GeneraterDateCode", new object[] {
                        sTriggerPoint,
                        sCustomerShortName,
                        sDateCodeFormat,
                        sBaseDateType,
                        sSpecificDate,
                        sCustomerName,
                        sProductType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GeneraterDateCodeAsync(string sTriggerPoint, string sCustomerShortName, string sDateCodeFormat, string sBaseDateType, string sSpecificDate, string sCustomerName, string sProductType) {
            this.GeneraterDateCodeAsync(sTriggerPoint, sCustomerShortName, sDateCodeFormat, sBaseDateType, sSpecificDate, sCustomerName, sProductType, null);
        }
        
        /// <remarks/>
        public void GeneraterDateCodeAsync(string sTriggerPoint, string sCustomerShortName, string sDateCodeFormat, string sBaseDateType, string sSpecificDate, string sCustomerName, string sProductType, object userState) {
            if ((this.GeneraterDateCodeOperationCompleted == null)) {
                this.GeneraterDateCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneraterDateCodeOperationCompleted);
            }
            this.InvokeAsync("GeneraterDateCode", new object[] {
                        sTriggerPoint,
                        sCustomerShortName,
                        sDateCodeFormat,
                        sBaseDateType,
                        sSpecificDate,
                        sCustomerName,
                        sProductType}, this.GeneraterDateCodeOperationCompleted, userState);
        }
        
        private void OnGeneraterDateCodeOperationCompleted(object arg) {
            if ((this.GeneraterDateCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneraterDateCodeCompleted(this, new GeneraterDateCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GeneraterTraceCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GeneraterTraceCode(string sTriggerPoint, string sCustomerShortName, string sCustomerName, string sProductType, System.Data.DataSet oAddtionalData) {
            object[] results = this.Invoke("GeneraterTraceCode", new object[] {
                        sTriggerPoint,
                        sCustomerShortName,
                        sCustomerName,
                        sProductType,
                        oAddtionalData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GeneraterTraceCodeAsync(string sTriggerPoint, string sCustomerShortName, string sCustomerName, string sProductType, System.Data.DataSet oAddtionalData) {
            this.GeneraterTraceCodeAsync(sTriggerPoint, sCustomerShortName, sCustomerName, sProductType, oAddtionalData, null);
        }
        
        /// <remarks/>
        public void GeneraterTraceCodeAsync(string sTriggerPoint, string sCustomerShortName, string sCustomerName, string sProductType, System.Data.DataSet oAddtionalData, object userState) {
            if ((this.GeneraterTraceCodeOperationCompleted == null)) {
                this.GeneraterTraceCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneraterTraceCodeOperationCompleted);
            }
            this.InvokeAsync("GeneraterTraceCode", new object[] {
                        sTriggerPoint,
                        sCustomerShortName,
                        sCustomerName,
                        sProductType,
                        oAddtionalData}, this.GeneraterTraceCodeOperationCompleted, userState);
        }
        
        private void OnGeneraterTraceCodeOperationCompleted(object arg) {
            if ((this.GeneraterTraceCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneraterTraceCodeCompleted(this, new GeneraterTraceCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GeneratorWaferIDWithCheckSum", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GeneratorWaferIDWithCheckSum(string sWaferID) {
            object[] results = this.Invoke("GeneratorWaferIDWithCheckSum", new object[] {
                        sWaferID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GeneratorWaferIDWithCheckSumAsync(string sWaferID) {
            this.GeneratorWaferIDWithCheckSumAsync(sWaferID, null);
        }
        
        /// <remarks/>
        public void GeneratorWaferIDWithCheckSumAsync(string sWaferID, object userState) {
            if ((this.GeneratorWaferIDWithCheckSumOperationCompleted == null)) {
                this.GeneratorWaferIDWithCheckSumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneratorWaferIDWithCheckSumOperationCompleted);
            }
            this.InvokeAsync("GeneratorWaferIDWithCheckSum", new object[] {
                        sWaferID}, this.GeneratorWaferIDWithCheckSumOperationCompleted, userState);
        }
        
        private void OnGeneratorWaferIDWithCheckSumOperationCompleted(object arg) {
            if ((this.GeneratorWaferIDWithCheckSumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneratorWaferIDWithCheckSumCompleted(this, new GeneratorWaferIDWithCheckSumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GeneraterJsonFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GeneraterJsonFile(string slot, string sMoveType, string sOperName) {
            object[] results = this.Invoke("GeneraterJsonFile", new object[] {
                        slot,
                        sMoveType,
                        sOperName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GeneraterJsonFileAsync(string slot, string sMoveType, string sOperName) {
            this.GeneraterJsonFileAsync(slot, sMoveType, sOperName, null);
        }
        
        /// <remarks/>
        public void GeneraterJsonFileAsync(string slot, string sMoveType, string sOperName, object userState) {
            if ((this.GeneraterJsonFileOperationCompleted == null)) {
                this.GeneraterJsonFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneraterJsonFileOperationCompleted);
            }
            this.InvokeAsync("GeneraterJsonFile", new object[] {
                        slot,
                        sMoveType,
                        sOperName}, this.GeneraterJsonFileOperationCompleted, userState);
        }
        
        private void OnGeneraterJsonFileOperationCompleted(object arg) {
            if ((this.GeneraterJsonFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneraterJsonFileCompleted(this, new GeneraterJsonFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QARMS2_RecipeApply", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool QARMS2_RecipeApply(string sOldFileName, string sNewFileName) {
            object[] results = this.Invoke("QARMS2_RecipeApply", new object[] {
                        sOldFileName,
                        sNewFileName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void QARMS2_RecipeApplyAsync(string sOldFileName, string sNewFileName) {
            this.QARMS2_RecipeApplyAsync(sOldFileName, sNewFileName, null);
        }
        
        /// <remarks/>
        public void QARMS2_RecipeApplyAsync(string sOldFileName, string sNewFileName, object userState) {
            if ((this.QARMS2_RecipeApplyOperationCompleted == null)) {
                this.QARMS2_RecipeApplyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQARMS2_RecipeApplyOperationCompleted);
            }
            this.InvokeAsync("QARMS2_RecipeApply", new object[] {
                        sOldFileName,
                        sNewFileName}, this.QARMS2_RecipeApplyOperationCompleted, userState);
        }
        
        private void OnQARMS2_RecipeApplyOperationCompleted(object arg) {
            if ((this.QARMS2_RecipeApplyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QARMS2_RecipeApplyCompleted(this, new QARMS2_RecipeApplyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBrcmDataForBom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBrcmDataForBom(string sDeviceName, string sXmlDoc) {
            object[] results = this.Invoke("GetBrcmDataForBom", new object[] {
                        sDeviceName,
                        sXmlDoc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBrcmDataForBomAsync(string sDeviceName, string sXmlDoc) {
            this.GetBrcmDataForBomAsync(sDeviceName, sXmlDoc, null);
        }
        
        /// <remarks/>
        public void GetBrcmDataForBomAsync(string sDeviceName, string sXmlDoc, object userState) {
            if ((this.GetBrcmDataForBomOperationCompleted == null)) {
                this.GetBrcmDataForBomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBrcmDataForBomOperationCompleted);
            }
            this.InvokeAsync("GetBrcmDataForBom", new object[] {
                        sDeviceName,
                        sXmlDoc}, this.GetBrcmDataForBomOperationCompleted, userState);
        }
        
        private void OnGetBrcmDataForBomOperationCompleted(object arg) {
            if ((this.GetBrcmDataForBomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBrcmDataForBomCompleted(this, new GetBrcmDataForBomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkBrcmGatingRule", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChkBrcmGatingRule(string sProduct, string sWaferLotNo, string sTargetDevice, string sRuncardNo) {
            object[] results = this.Invoke("ChkBrcmGatingRule", new object[] {
                        sProduct,
                        sWaferLotNo,
                        sTargetDevice,
                        sRuncardNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChkBrcmGatingRuleAsync(string sProduct, string sWaferLotNo, string sTargetDevice, string sRuncardNo) {
            this.ChkBrcmGatingRuleAsync(sProduct, sWaferLotNo, sTargetDevice, sRuncardNo, null);
        }
        
        /// <remarks/>
        public void ChkBrcmGatingRuleAsync(string sProduct, string sWaferLotNo, string sTargetDevice, string sRuncardNo, object userState) {
            if ((this.ChkBrcmGatingRuleOperationCompleted == null)) {
                this.ChkBrcmGatingRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChkBrcmGatingRuleOperationCompleted);
            }
            this.InvokeAsync("ChkBrcmGatingRule", new object[] {
                        sProduct,
                        sWaferLotNo,
                        sTargetDevice,
                        sRuncardNo}, this.ChkBrcmGatingRuleOperationCompleted, userState);
        }
        
        private void OnChkBrcmGatingRuleOperationCompleted(object arg) {
            if ((this.ChkBrcmGatingRuleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChkBrcmGatingRuleCompleted(this, new ChkBrcmGatingRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkBrcmProdEng", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChkBrcmProdEng(string sWaferLotNo, string sTargetDevice) {
            object[] results = this.Invoke("ChkBrcmProdEng", new object[] {
                        sWaferLotNo,
                        sTargetDevice});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChkBrcmProdEngAsync(string sWaferLotNo, string sTargetDevice) {
            this.ChkBrcmProdEngAsync(sWaferLotNo, sTargetDevice, null);
        }
        
        /// <remarks/>
        public void ChkBrcmProdEngAsync(string sWaferLotNo, string sTargetDevice, object userState) {
            if ((this.ChkBrcmProdEngOperationCompleted == null)) {
                this.ChkBrcmProdEngOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChkBrcmProdEngOperationCompleted);
            }
            this.InvokeAsync("ChkBrcmProdEng", new object[] {
                        sWaferLotNo,
                        sTargetDevice}, this.ChkBrcmProdEngOperationCompleted, userState);
        }
        
        private void OnChkBrcmProdEngOperationCompleted(object arg) {
            if ((this.ChkBrcmProdEngCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChkBrcmProdEngCompleted(this, new ChkBrcmProdEngCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkBrcmTestProgramWhenASISCreateSI", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChkBrcmTestProgramWhenASISCreateSI(string sRuncardNo) {
            object[] results = this.Invoke("ChkBrcmTestProgramWhenASISCreateSI", new object[] {
                        sRuncardNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChkBrcmTestProgramWhenASISCreateSIAsync(string sRuncardNo) {
            this.ChkBrcmTestProgramWhenASISCreateSIAsync(sRuncardNo, null);
        }
        
        /// <remarks/>
        public void ChkBrcmTestProgramWhenASISCreateSIAsync(string sRuncardNo, object userState) {
            if ((this.ChkBrcmTestProgramWhenASISCreateSIOperationCompleted == null)) {
                this.ChkBrcmTestProgramWhenASISCreateSIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChkBrcmTestProgramWhenASISCreateSIOperationCompleted);
            }
            this.InvokeAsync("ChkBrcmTestProgramWhenASISCreateSI", new object[] {
                        sRuncardNo}, this.ChkBrcmTestProgramWhenASISCreateSIOperationCompleted, userState);
        }
        
        private void OnChkBrcmTestProgramWhenASISCreateSIOperationCompleted(object arg) {
            if ((this.ChkBrcmTestProgramWhenASISCreateSICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChkBrcmTestProgramWhenASISCreateSICompleted(this, new ChkBrcmTestProgramWhenASISCreateSICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkBrcmASISEndorseRule", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChkBrcmASISEndorseRule(string sRuncardNo) {
            object[] results = this.Invoke("ChkBrcmASISEndorseRule", new object[] {
                        sRuncardNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChkBrcmASISEndorseRuleAsync(string sRuncardNo) {
            this.ChkBrcmASISEndorseRuleAsync(sRuncardNo, null);
        }
        
        /// <remarks/>
        public void ChkBrcmASISEndorseRuleAsync(string sRuncardNo, object userState) {
            if ((this.ChkBrcmASISEndorseRuleOperationCompleted == null)) {
                this.ChkBrcmASISEndorseRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChkBrcmASISEndorseRuleOperationCompleted);
            }
            this.InvokeAsync("ChkBrcmASISEndorseRule", new object[] {
                        sRuncardNo}, this.ChkBrcmASISEndorseRuleOperationCompleted, userState);
        }
        
        private void OnChkBrcmASISEndorseRuleOperationCompleted(object arg) {
            if ((this.ChkBrcmASISEndorseRuleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChkBrcmASISEndorseRuleCompleted(this, new ChkBrcmASISEndorseRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBrcmSkipBinListForBom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBrcmSkipBinListForBom(string sXmlDoc) {
            object[] results = this.Invoke("GetBrcmSkipBinListForBom", new object[] {
                        sXmlDoc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBrcmSkipBinListForBomAsync(string sXmlDoc) {
            this.GetBrcmSkipBinListForBomAsync(sXmlDoc, null);
        }
        
        /// <remarks/>
        public void GetBrcmSkipBinListForBomAsync(string sXmlDoc, object userState) {
            if ((this.GetBrcmSkipBinListForBomOperationCompleted == null)) {
                this.GetBrcmSkipBinListForBomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBrcmSkipBinListForBomOperationCompleted);
            }
            this.InvokeAsync("GetBrcmSkipBinListForBom", new object[] {
                        sXmlDoc}, this.GetBrcmSkipBinListForBomOperationCompleted, userState);
        }
        
        private void OnGetBrcmSkipBinListForBomOperationCompleted(object arg) {
            if ((this.GetBrcmSkipBinListForBomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBrcmSkipBinListForBomCompleted(this, new GetBrcmSkipBinListForBomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckSourceDevice_GF_Bump", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckSourceDevice_GF_Bump(string ContainerName) {
            object[] results = this.Invoke("CheckSourceDevice_GF_Bump", new object[] {
                        ContainerName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckSourceDevice_GF_BumpAsync(string ContainerName) {
            this.CheckSourceDevice_GF_BumpAsync(ContainerName, null);
        }
        
        /// <remarks/>
        public void CheckSourceDevice_GF_BumpAsync(string ContainerName, object userState) {
            if ((this.CheckSourceDevice_GF_BumpOperationCompleted == null)) {
                this.CheckSourceDevice_GF_BumpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSourceDevice_GF_BumpOperationCompleted);
            }
            this.InvokeAsync("CheckSourceDevice_GF_Bump", new object[] {
                        ContainerName}, this.CheckSourceDevice_GF_BumpOperationCompleted, userState);
        }
        
        private void OnCheckSourceDevice_GF_BumpOperationCompleted(object arg) {
            if ((this.CheckSourceDevice_GF_BumpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSourceDevice_GF_BumpCompleted(this, new CheckSourceDevice_GF_BumpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFoupCleanStatusFromPCServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFoupCleanStatusFromPCServer(string pFOUP, string pFromFactory) {
            object[] results = this.Invoke("GetFoupCleanStatusFromPCServer", new object[] {
                        pFOUP,
                        pFromFactory});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFoupCleanStatusFromPCServerAsync(string pFOUP, string pFromFactory) {
            this.GetFoupCleanStatusFromPCServerAsync(pFOUP, pFromFactory, null);
        }
        
        /// <remarks/>
        public void GetFoupCleanStatusFromPCServerAsync(string pFOUP, string pFromFactory, object userState) {
            if ((this.GetFoupCleanStatusFromPCServerOperationCompleted == null)) {
                this.GetFoupCleanStatusFromPCServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFoupCleanStatusFromPCServerOperationCompleted);
            }
            this.InvokeAsync("GetFoupCleanStatusFromPCServer", new object[] {
                        pFOUP,
                        pFromFactory}, this.GetFoupCleanStatusFromPCServerOperationCompleted, userState);
        }
        
        private void OnGetFoupCleanStatusFromPCServerOperationCompleted(object arg) {
            if ((this.GetFoupCleanStatusFromPCServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFoupCleanStatusFromPCServerCompleted(this, new GetFoupCleanStatusFromPCServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PCSERVERDBQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PCSERVERDBQuery(string sSQL, string sFromFactory) {
            object[] results = this.Invoke("PCSERVERDBQuery", new object[] {
                        sSQL,
                        sFromFactory});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PCSERVERDBQueryAsync(string sSQL, string sFromFactory) {
            this.PCSERVERDBQueryAsync(sSQL, sFromFactory, null);
        }
        
        /// <remarks/>
        public void PCSERVERDBQueryAsync(string sSQL, string sFromFactory, object userState) {
            if ((this.PCSERVERDBQueryOperationCompleted == null)) {
                this.PCSERVERDBQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPCSERVERDBQueryOperationCompleted);
            }
            this.InvokeAsync("PCSERVERDBQuery", new object[] {
                        sSQL,
                        sFromFactory}, this.PCSERVERDBQueryOperationCompleted, userState);
        }
        
        private void OnPCSERVERDBQueryOperationCompleted(object arg) {
            if ((this.PCSERVERDBQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PCSERVERDBQueryCompleted(this, new PCSERVERDBQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/OperatorReviewMFGNotification", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool OperatorReviewMFGNotification(string sAccount, string sFromFactory) {
            object[] results = this.Invoke("OperatorReviewMFGNotification", new object[] {
                        sAccount,
                        sFromFactory});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void OperatorReviewMFGNotificationAsync(string sAccount, string sFromFactory) {
            this.OperatorReviewMFGNotificationAsync(sAccount, sFromFactory, null);
        }
        
        /// <remarks/>
        public void OperatorReviewMFGNotificationAsync(string sAccount, string sFromFactory, object userState) {
            if ((this.OperatorReviewMFGNotificationOperationCompleted == null)) {
                this.OperatorReviewMFGNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOperatorReviewMFGNotificationOperationCompleted);
            }
            this.InvokeAsync("OperatorReviewMFGNotification", new object[] {
                        sAccount,
                        sFromFactory}, this.OperatorReviewMFGNotificationOperationCompleted, userState);
        }
        
        private void OnOperatorReviewMFGNotificationOperationCompleted(object arg) {
            if ((this.OperatorReviewMFGNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OperatorReviewMFGNotificationCompleted(this, new OperatorReviewMFGNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAMSLotInfoByBlueToothTag", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAMSLotInfoByBlueToothTag(string sXML, ref string sMessage) {
            object[] results = this.Invoke("GetAMSLotInfoByBlueToothTag", new object[] {
                        sXML,
                        sMessage});
            sMessage = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAMSLotInfoByBlueToothTagAsync(string sXML, string sMessage) {
            this.GetAMSLotInfoByBlueToothTagAsync(sXML, sMessage, null);
        }
        
        /// <remarks/>
        public void GetAMSLotInfoByBlueToothTagAsync(string sXML, string sMessage, object userState) {
            if ((this.GetAMSLotInfoByBlueToothTagOperationCompleted == null)) {
                this.GetAMSLotInfoByBlueToothTagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAMSLotInfoByBlueToothTagOperationCompleted);
            }
            this.InvokeAsync("GetAMSLotInfoByBlueToothTag", new object[] {
                        sXML,
                        sMessage}, this.GetAMSLotInfoByBlueToothTagOperationCompleted, userState);
        }
        
        private void OnGetAMSLotInfoByBlueToothTagOperationCompleted(object arg) {
            if ((this.GetAMSLotInfoByBlueToothTagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAMSLotInfoByBlueToothTagCompleted(this, new GetAMSLotInfoByBlueToothTagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBlutToothTagBaseInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateBlutToothTagBaseInfo(string sXML, ref string sMessage) {
            object[] results = this.Invoke("UpdateBlutToothTagBaseInfo", new object[] {
                        sXML,
                        sMessage});
            sMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateBlutToothTagBaseInfoAsync(string sXML, string sMessage) {
            this.UpdateBlutToothTagBaseInfoAsync(sXML, sMessage, null);
        }
        
        /// <remarks/>
        public void UpdateBlutToothTagBaseInfoAsync(string sXML, string sMessage, object userState) {
            if ((this.UpdateBlutToothTagBaseInfoOperationCompleted == null)) {
                this.UpdateBlutToothTagBaseInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBlutToothTagBaseInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateBlutToothTagBaseInfo", new object[] {
                        sXML,
                        sMessage}, this.UpdateBlutToothTagBaseInfoOperationCompleted, userState);
        }
        
        private void OnUpdateBlutToothTagBaseInfoOperationCompleted(object arg) {
            if ((this.UpdateBlutToothTagBaseInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBlutToothTagBaseInfoCompleted(this, new UpdateBlutToothTagBaseInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBlutToothTagBaseInfo4ServerDown", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateBlutToothTagBaseInfo4ServerDown(string sXML, ref string sMessage) {
            object[] results = this.Invoke("UpdateBlutToothTagBaseInfo4ServerDown", new object[] {
                        sXML,
                        sMessage});
            sMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateBlutToothTagBaseInfo4ServerDownAsync(string sXML, string sMessage) {
            this.UpdateBlutToothTagBaseInfo4ServerDownAsync(sXML, sMessage, null);
        }
        
        /// <remarks/>
        public void UpdateBlutToothTagBaseInfo4ServerDownAsync(string sXML, string sMessage, object userState) {
            if ((this.UpdateBlutToothTagBaseInfo4ServerDownOperationCompleted == null)) {
                this.UpdateBlutToothTagBaseInfo4ServerDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBlutToothTagBaseInfo4ServerDownOperationCompleted);
            }
            this.InvokeAsync("UpdateBlutToothTagBaseInfo4ServerDown", new object[] {
                        sXML,
                        sMessage}, this.UpdateBlutToothTagBaseInfo4ServerDownOperationCompleted, userState);
        }
        
        private void OnUpdateBlutToothTagBaseInfo4ServerDownOperationCompleted(object arg) {
            if ((this.UpdateBlutToothTagBaseInfo4ServerDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBlutToothTagBaseInfo4ServerDownCompleted(this, new UpdateBlutToothTagBaseInfo4ServerDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DisassociateCarrierRelationByLot", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DisassociateCarrierRelationByLot(string sContainerName, string sUsername) {
            this.Invoke("DisassociateCarrierRelationByLot", new object[] {
                        sContainerName,
                        sUsername});
        }
        
        /// <remarks/>
        public void DisassociateCarrierRelationByLotAsync(string sContainerName, string sUsername) {
            this.DisassociateCarrierRelationByLotAsync(sContainerName, sUsername, null);
        }
        
        /// <remarks/>
        public void DisassociateCarrierRelationByLotAsync(string sContainerName, string sUsername, object userState) {
            if ((this.DisassociateCarrierRelationByLotOperationCompleted == null)) {
                this.DisassociateCarrierRelationByLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisassociateCarrierRelationByLotOperationCompleted);
            }
            this.InvokeAsync("DisassociateCarrierRelationByLot", new object[] {
                        sContainerName,
                        sUsername}, this.DisassociateCarrierRelationByLotOperationCompleted, userState);
        }
        
        private void OnDisassociateCarrierRelationByLotOperationCompleted(object arg) {
            if ((this.DisassociateCarrierRelationByLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisassociateCarrierRelationByLotCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DisassociateCarrierRelationByTxnType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DisassociateCarrierRelationByTxnType(string sContainerName, string sOperation, string sTxnType, string sUsername) {
            this.Invoke("DisassociateCarrierRelationByTxnType", new object[] {
                        sContainerName,
                        sOperation,
                        sTxnType,
                        sUsername});
        }
        
        /// <remarks/>
        public void DisassociateCarrierRelationByTxnTypeAsync(string sContainerName, string sOperation, string sTxnType, string sUsername) {
            this.DisassociateCarrierRelationByTxnTypeAsync(sContainerName, sOperation, sTxnType, sUsername, null);
        }
        
        /// <remarks/>
        public void DisassociateCarrierRelationByTxnTypeAsync(string sContainerName, string sOperation, string sTxnType, string sUsername, object userState) {
            if ((this.DisassociateCarrierRelationByTxnTypeOperationCompleted == null)) {
                this.DisassociateCarrierRelationByTxnTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisassociateCarrierRelationByTxnTypeOperationCompleted);
            }
            this.InvokeAsync("DisassociateCarrierRelationByTxnType", new object[] {
                        sContainerName,
                        sOperation,
                        sTxnType,
                        sUsername}, this.DisassociateCarrierRelationByTxnTypeOperationCompleted, userState);
        }
        
        private void OnDisassociateCarrierRelationByTxnTypeOperationCompleted(object arg) {
            if ((this.DisassociateCarrierRelationByTxnTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisassociateCarrierRelationByTxnTypeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetADIDPSMarkingSpec", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetADIDPSMarkingSpec(string sCustLotNumber) {
            object[] results = this.Invoke("GetADIDPSMarkingSpec", new object[] {
                        sCustLotNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetADIDPSMarkingSpecAsync(string sCustLotNumber) {
            this.GetADIDPSMarkingSpecAsync(sCustLotNumber, null);
        }
        
        /// <remarks/>
        public void GetADIDPSMarkingSpecAsync(string sCustLotNumber, object userState) {
            if ((this.GetADIDPSMarkingSpecOperationCompleted == null)) {
                this.GetADIDPSMarkingSpecOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetADIDPSMarkingSpecOperationCompleted);
            }
            this.InvokeAsync("GetADIDPSMarkingSpec", new object[] {
                        sCustLotNumber}, this.GetADIDPSMarkingSpecOperationCompleted, userState);
        }
        
        private void OnGetADIDPSMarkingSpecOperationCompleted(object arg) {
            if ((this.GetADIDPSMarkingSpecCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetADIDPSMarkingSpecCompleted(this, new GetADIDPSMarkingSpecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecAMSAPI", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecAMSAPI(string APIData, string FromSystem) {
            object[] results = this.Invoke("ExecAMSAPI", new object[] {
                        APIData,
                        FromSystem});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecAMSAPIAsync(string APIData, string FromSystem) {
            this.ExecAMSAPIAsync(APIData, FromSystem, null);
        }
        
        /// <remarks/>
        public void ExecAMSAPIAsync(string APIData, string FromSystem, object userState) {
            if ((this.ExecAMSAPIOperationCompleted == null)) {
                this.ExecAMSAPIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecAMSAPIOperationCompleted);
            }
            this.InvokeAsync("ExecAMSAPI", new object[] {
                        APIData,
                        FromSystem}, this.ExecAMSAPIOperationCompleted, userState);
        }
        
        private void OnExecAMSAPIOperationCompleted(object arg) {
            if ((this.ExecAMSAPICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecAMSAPICompleted(this, new ExecAMSAPICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAMSAPI_DataStructure", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAMSAPI_DataStructure(int TransactionType, string StructureFormat) {
            object[] results = this.Invoke("GetAMSAPI_DataStructure", new object[] {
                        TransactionType,
                        StructureFormat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAMSAPI_DataStructureAsync(int TransactionType, string StructureFormat) {
            this.GetAMSAPI_DataStructureAsync(TransactionType, StructureFormat, null);
        }
        
        /// <remarks/>
        public void GetAMSAPI_DataStructureAsync(int TransactionType, string StructureFormat, object userState) {
            if ((this.GetAMSAPI_DataStructureOperationCompleted == null)) {
                this.GetAMSAPI_DataStructureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAMSAPI_DataStructureOperationCompleted);
            }
            this.InvokeAsync("GetAMSAPI_DataStructure", new object[] {
                        TransactionType,
                        StructureFormat}, this.GetAMSAPI_DataStructureOperationCompleted, userState);
        }
        
        private void OnGetAMSAPI_DataStructureOperationCompleted(object arg) {
            if ((this.GetAMSAPI_DataStructureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAMSAPI_DataStructureCompleted(this, new GetAMSAPI_DataStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateANF", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateANF(string sSysName, string sFuncName, string sLot, string sANFMC, string sANFStepName, string sUserID, string sCauseMsg, string sANFType, string sANFLevel, string sMCDownOverHour, string sMRBTo, string sMRBComment) {
            object[] results = this.Invoke("CreateANF", new object[] {
                        sSysName,
                        sFuncName,
                        sLot,
                        sANFMC,
                        sANFStepName,
                        sUserID,
                        sCauseMsg,
                        sANFType,
                        sANFLevel,
                        sMCDownOverHour,
                        sMRBTo,
                        sMRBComment});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateANFAsync(string sSysName, string sFuncName, string sLot, string sANFMC, string sANFStepName, string sUserID, string sCauseMsg, string sANFType, string sANFLevel, string sMCDownOverHour, string sMRBTo, string sMRBComment) {
            this.CreateANFAsync(sSysName, sFuncName, sLot, sANFMC, sANFStepName, sUserID, sCauseMsg, sANFType, sANFLevel, sMCDownOverHour, sMRBTo, sMRBComment, null);
        }
        
        /// <remarks/>
        public void CreateANFAsync(string sSysName, string sFuncName, string sLot, string sANFMC, string sANFStepName, string sUserID, string sCauseMsg, string sANFType, string sANFLevel, string sMCDownOverHour, string sMRBTo, string sMRBComment, object userState) {
            if ((this.CreateANFOperationCompleted == null)) {
                this.CreateANFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateANFOperationCompleted);
            }
            this.InvokeAsync("CreateANF", new object[] {
                        sSysName,
                        sFuncName,
                        sLot,
                        sANFMC,
                        sANFStepName,
                        sUserID,
                        sCauseMsg,
                        sANFType,
                        sANFLevel,
                        sMCDownOverHour,
                        sMRBTo,
                        sMRBComment}, this.CreateANFOperationCompleted, userState);
        }
        
        private void OnCreateANFOperationCompleted(object arg) {
            if ((this.CreateANFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateANFCompleted(this, new CreateANFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/apiAmkGroupHoldMaint", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void apiAmkGroupHoldMaint(string sOper, string sHoldReason, string sHoldComments, int iTriggerPoint, string sAttField, string sTargetValue) {
            this.Invoke("apiAmkGroupHoldMaint", new object[] {
                        sOper,
                        sHoldReason,
                        sHoldComments,
                        iTriggerPoint,
                        sAttField,
                        sTargetValue});
        }
        
        /// <remarks/>
        public void apiAmkGroupHoldMaintAsync(string sOper, string sHoldReason, string sHoldComments, int iTriggerPoint, string sAttField, string sTargetValue) {
            this.apiAmkGroupHoldMaintAsync(sOper, sHoldReason, sHoldComments, iTriggerPoint, sAttField, sTargetValue, null);
        }
        
        /// <remarks/>
        public void apiAmkGroupHoldMaintAsync(string sOper, string sHoldReason, string sHoldComments, int iTriggerPoint, string sAttField, string sTargetValue, object userState) {
            if ((this.apiAmkGroupHoldMaintOperationCompleted == null)) {
                this.apiAmkGroupHoldMaintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapiAmkGroupHoldMaintOperationCompleted);
            }
            this.InvokeAsync("apiAmkGroupHoldMaint", new object[] {
                        sOper,
                        sHoldReason,
                        sHoldComments,
                        iTriggerPoint,
                        sAttField,
                        sTargetValue}, this.apiAmkGroupHoldMaintOperationCompleted, userState);
        }
        
        private void OnapiAmkGroupHoldMaintOperationCompleted(object arg) {
            if ((this.apiAmkGroupHoldMaintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.apiAmkGroupHoldMaintCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/apiAmkGroupHoldMaintWithUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void apiAmkGroupHoldMaintWithUser(string sOper, string sHoldReason, string sHoldComments, int iTriggerPoint, string sAttField, string sTargetValue, string sUserName, string sPassword) {
            this.Invoke("apiAmkGroupHoldMaintWithUser", new object[] {
                        sOper,
                        sHoldReason,
                        sHoldComments,
                        iTriggerPoint,
                        sAttField,
                        sTargetValue,
                        sUserName,
                        sPassword});
        }
        
        /// <remarks/>
        public void apiAmkGroupHoldMaintWithUserAsync(string sOper, string sHoldReason, string sHoldComments, int iTriggerPoint, string sAttField, string sTargetValue, string sUserName, string sPassword) {
            this.apiAmkGroupHoldMaintWithUserAsync(sOper, sHoldReason, sHoldComments, iTriggerPoint, sAttField, sTargetValue, sUserName, sPassword, null);
        }
        
        /// <remarks/>
        public void apiAmkGroupHoldMaintWithUserAsync(string sOper, string sHoldReason, string sHoldComments, int iTriggerPoint, string sAttField, string sTargetValue, string sUserName, string sPassword, object userState) {
            if ((this.apiAmkGroupHoldMaintWithUserOperationCompleted == null)) {
                this.apiAmkGroupHoldMaintWithUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapiAmkGroupHoldMaintWithUserOperationCompleted);
            }
            this.InvokeAsync("apiAmkGroupHoldMaintWithUser", new object[] {
                        sOper,
                        sHoldReason,
                        sHoldComments,
                        iTriggerPoint,
                        sAttField,
                        sTargetValue,
                        sUserName,
                        sPassword}, this.apiAmkGroupHoldMaintWithUserOperationCompleted, userState);
        }
        
        private void OnapiAmkGroupHoldMaintWithUserOperationCompleted(object arg) {
            if ((this.apiAmkGroupHoldMaintWithUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.apiAmkGroupHoldMaintWithUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/apiUpdateResourceStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void apiUpdateResourceStatus(string sResource, int iAvailability, string sResourceStatusCode, string sResourceStatusReason, string sLot, string sEmployee, string sComments) {
            this.Invoke("apiUpdateResourceStatus", new object[] {
                        sResource,
                        iAvailability,
                        sResourceStatusCode,
                        sResourceStatusReason,
                        sLot,
                        sEmployee,
                        sComments});
        }
        
        /// <remarks/>
        public void apiUpdateResourceStatusAsync(string sResource, int iAvailability, string sResourceStatusCode, string sResourceStatusReason, string sLot, string sEmployee, string sComments) {
            this.apiUpdateResourceStatusAsync(sResource, iAvailability, sResourceStatusCode, sResourceStatusReason, sLot, sEmployee, sComments, null);
        }
        
        /// <remarks/>
        public void apiUpdateResourceStatusAsync(string sResource, int iAvailability, string sResourceStatusCode, string sResourceStatusReason, string sLot, string sEmployee, string sComments, object userState) {
            if ((this.apiUpdateResourceStatusOperationCompleted == null)) {
                this.apiUpdateResourceStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapiUpdateResourceStatusOperationCompleted);
            }
            this.InvokeAsync("apiUpdateResourceStatus", new object[] {
                        sResource,
                        iAvailability,
                        sResourceStatusCode,
                        sResourceStatusReason,
                        sLot,
                        sEmployee,
                        sComments}, this.apiUpdateResourceStatusOperationCompleted, userState);
        }
        
        private void OnapiUpdateResourceStatusOperationCompleted(object arg) {
            if ((this.apiUpdateResourceStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.apiUpdateResourceStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/apiQAComplete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool apiQAComplete(string sAMSLotId, int iSamplingWaferSize, int iSamplingDieSize, string sOper, string sComments, string sUserName, string sMsg) {
            object[] results = this.Invoke("apiQAComplete", new object[] {
                        sAMSLotId,
                        iSamplingWaferSize,
                        iSamplingDieSize,
                        sOper,
                        sComments,
                        sUserName,
                        sMsg});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void apiQACompleteAsync(string sAMSLotId, int iSamplingWaferSize, int iSamplingDieSize, string sOper, string sComments, string sUserName, string sMsg) {
            this.apiQACompleteAsync(sAMSLotId, iSamplingWaferSize, iSamplingDieSize, sOper, sComments, sUserName, sMsg, null);
        }
        
        /// <remarks/>
        public void apiQACompleteAsync(string sAMSLotId, int iSamplingWaferSize, int iSamplingDieSize, string sOper, string sComments, string sUserName, string sMsg, object userState) {
            if ((this.apiQACompleteOperationCompleted == null)) {
                this.apiQACompleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapiQACompleteOperationCompleted);
            }
            this.InvokeAsync("apiQAComplete", new object[] {
                        sAMSLotId,
                        iSamplingWaferSize,
                        iSamplingDieSize,
                        sOper,
                        sComments,
                        sUserName,
                        sMsg}, this.apiQACompleteOperationCompleted, userState);
        }
        
        private void OnapiQACompleteOperationCompleted(object arg) {
            if ((this.apiQACompleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.apiQACompleteCompleted(this, new apiQACompleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/apiChangeLotAttribute", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool apiChangeLotAttribute(string sAMSLotId, string sFieldType, string sFieldName, string sValue, string sComments, string sUserName) {
            object[] results = this.Invoke("apiChangeLotAttribute", new object[] {
                        sAMSLotId,
                        sFieldType,
                        sFieldName,
                        sValue,
                        sComments,
                        sUserName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void apiChangeLotAttributeAsync(string sAMSLotId, string sFieldType, string sFieldName, string sValue, string sComments, string sUserName) {
            this.apiChangeLotAttributeAsync(sAMSLotId, sFieldType, sFieldName, sValue, sComments, sUserName, null);
        }
        
        /// <remarks/>
        public void apiChangeLotAttributeAsync(string sAMSLotId, string sFieldType, string sFieldName, string sValue, string sComments, string sUserName, object userState) {
            if ((this.apiChangeLotAttributeOperationCompleted == null)) {
                this.apiChangeLotAttributeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapiChangeLotAttributeOperationCompleted);
            }
            this.InvokeAsync("apiChangeLotAttribute", new object[] {
                        sAMSLotId,
                        sFieldType,
                        sFieldName,
                        sValue,
                        sComments,
                        sUserName}, this.apiChangeLotAttributeOperationCompleted, userState);
        }
        
        private void OnapiChangeLotAttributeOperationCompleted(object arg) {
            if ((this.apiChangeLotAttributeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.apiChangeLotAttributeCompleted(this, new apiChangeLotAttributeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/apiChangeLotAttribute2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool apiChangeLotAttribute2(string sAMSLotId, string sFieldType, string sObjectType, string sFieldName, string sValue, string sComments, string sUserName) {
            object[] results = this.Invoke("apiChangeLotAttribute2", new object[] {
                        sAMSLotId,
                        sFieldType,
                        sObjectType,
                        sFieldName,
                        sValue,
                        sComments,
                        sUserName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void apiChangeLotAttribute2Async(string sAMSLotId, string sFieldType, string sObjectType, string sFieldName, string sValue, string sComments, string sUserName) {
            this.apiChangeLotAttribute2Async(sAMSLotId, sFieldType, sObjectType, sFieldName, sValue, sComments, sUserName, null);
        }
        
        /// <remarks/>
        public void apiChangeLotAttribute2Async(string sAMSLotId, string sFieldType, string sObjectType, string sFieldName, string sValue, string sComments, string sUserName, object userState) {
            if ((this.apiChangeLotAttribute2OperationCompleted == null)) {
                this.apiChangeLotAttribute2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnapiChangeLotAttribute2OperationCompleted);
            }
            this.InvokeAsync("apiChangeLotAttribute2", new object[] {
                        sAMSLotId,
                        sFieldType,
                        sObjectType,
                        sFieldName,
                        sValue,
                        sComments,
                        sUserName}, this.apiChangeLotAttribute2OperationCompleted, userState);
        }
        
        private void OnapiChangeLotAttribute2OperationCompleted(object arg) {
            if ((this.apiChangeLotAttribute2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.apiChangeLotAttribute2Completed(this, new apiChangeLotAttribute2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CTM_UpdateCPToolBLOB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CTM_UpdateCPToolBLOB(string sWhere, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] sData, string sTable, string sField) {
            this.Invoke("CTM_UpdateCPToolBLOB", new object[] {
                        sWhere,
                        sData,
                        sTable,
                        sField});
        }
        
        /// <remarks/>
        public void CTM_UpdateCPToolBLOBAsync(string sWhere, byte[] sData, string sTable, string sField) {
            this.CTM_UpdateCPToolBLOBAsync(sWhere, sData, sTable, sField, null);
        }
        
        /// <remarks/>
        public void CTM_UpdateCPToolBLOBAsync(string sWhere, byte[] sData, string sTable, string sField, object userState) {
            if ((this.CTM_UpdateCPToolBLOBOperationCompleted == null)) {
                this.CTM_UpdateCPToolBLOBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCTM_UpdateCPToolBLOBOperationCompleted);
            }
            this.InvokeAsync("CTM_UpdateCPToolBLOB", new object[] {
                        sWhere,
                        sData,
                        sTable,
                        sField}, this.CTM_UpdateCPToolBLOBOperationCompleted, userState);
        }
        
        private void OnCTM_UpdateCPToolBLOBOperationCompleted(object arg) {
            if ((this.CTM_UpdateCPToolBLOBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CTM_UpdateCPToolBLOBCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CTM_GetCPToolBLOB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CTM_GetCPToolBLOB(string sWhere, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] ref byte[] sData, string sTable, string sField) {
            object[] results = this.Invoke("CTM_GetCPToolBLOB", new object[] {
                        sWhere,
                        sData,
                        sTable,
                        sField});
            sData = ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void CTM_GetCPToolBLOBAsync(string sWhere, byte[] sData, string sTable, string sField) {
            this.CTM_GetCPToolBLOBAsync(sWhere, sData, sTable, sField, null);
        }
        
        /// <remarks/>
        public void CTM_GetCPToolBLOBAsync(string sWhere, byte[] sData, string sTable, string sField, object userState) {
            if ((this.CTM_GetCPToolBLOBOperationCompleted == null)) {
                this.CTM_GetCPToolBLOBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCTM_GetCPToolBLOBOperationCompleted);
            }
            this.InvokeAsync("CTM_GetCPToolBLOB", new object[] {
                        sWhere,
                        sData,
                        sTable,
                        sField}, this.CTM_GetCPToolBLOBOperationCompleted, userState);
        }
        
        private void OnCTM_GetCPToolBLOBOperationCompleted(object arg) {
            if ((this.CTM_GetCPToolBLOBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CTM_GetCPToolBLOBCompleted(this, new CTM_GetCPToolBLOBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CTM_SendMail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CTM_SendMail(string sSubject, string sTo, string sBody, bool bIsBodyHtml) {
            this.Invoke("CTM_SendMail", new object[] {
                        sSubject,
                        sTo,
                        sBody,
                        bIsBodyHtml});
        }
        
        /// <remarks/>
        public void CTM_SendMailAsync(string sSubject, string sTo, string sBody, bool bIsBodyHtml) {
            this.CTM_SendMailAsync(sSubject, sTo, sBody, bIsBodyHtml, null);
        }
        
        /// <remarks/>
        public void CTM_SendMailAsync(string sSubject, string sTo, string sBody, bool bIsBodyHtml, object userState) {
            if ((this.CTM_SendMailOperationCompleted == null)) {
                this.CTM_SendMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCTM_SendMailOperationCompleted);
            }
            this.InvokeAsync("CTM_SendMail", new object[] {
                        sSubject,
                        sTo,
                        sBody,
                        bIsBodyHtml}, this.CTM_SendMailOperationCompleted, userState);
        }
        
        private void OnCTM_SendMailOperationCompleted(object arg) {
            if ((this.CTM_SendMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CTM_SendMailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AES_GetWaferBinData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AES_GetWaferBinData(string sLot) {
            object[] results = this.Invoke("AES_GetWaferBinData", new object[] {
                        sLot});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AES_GetWaferBinDataAsync(string sLot) {
            this.AES_GetWaferBinDataAsync(sLot, null);
        }
        
        /// <remarks/>
        public void AES_GetWaferBinDataAsync(string sLot, object userState) {
            if ((this.AES_GetWaferBinDataOperationCompleted == null)) {
                this.AES_GetWaferBinDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAES_GetWaferBinDataOperationCompleted);
            }
            this.InvokeAsync("AES_GetWaferBinData", new object[] {
                        sLot}, this.AES_GetWaferBinDataOperationCompleted, userState);
        }
        
        private void OnAES_GetWaferBinDataOperationCompleted(object arg) {
            if ((this.AES_GetWaferBinDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AES_GetWaferBinDataCompleted(this, new AES_GetWaferBinDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AES_UpdateFTPServerFolder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AES_UpdateFTPServerFolder(string sWaferLot, string sTesters) {
            this.Invoke("AES_UpdateFTPServerFolder", new object[] {
                        sWaferLot,
                        sTesters});
        }
        
        /// <remarks/>
        public void AES_UpdateFTPServerFolderAsync(string sWaferLot, string sTesters) {
            this.AES_UpdateFTPServerFolderAsync(sWaferLot, sTesters, null);
        }
        
        /// <remarks/>
        public void AES_UpdateFTPServerFolderAsync(string sWaferLot, string sTesters, object userState) {
            if ((this.AES_UpdateFTPServerFolderOperationCompleted == null)) {
                this.AES_UpdateFTPServerFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAES_UpdateFTPServerFolderOperationCompleted);
            }
            this.InvokeAsync("AES_UpdateFTPServerFolder", new object[] {
                        sWaferLot,
                        sTesters}, this.AES_UpdateFTPServerFolderOperationCompleted, userState);
        }
        
        private void OnAES_UpdateFTPServerFolderOperationCompleted(object arg) {
            if ((this.AES_UpdateFTPServerFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AES_UpdateFTPServerFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AES_CheckSamplingLot", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AES_CheckSamplingLot(string sLot, string sSamplingLotType) {
            object[] results = this.Invoke("AES_CheckSamplingLot", new object[] {
                        sLot,
                        sSamplingLotType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AES_CheckSamplingLotAsync(string sLot, string sSamplingLotType) {
            this.AES_CheckSamplingLotAsync(sLot, sSamplingLotType, null);
        }
        
        /// <remarks/>
        public void AES_CheckSamplingLotAsync(string sLot, string sSamplingLotType, object userState) {
            if ((this.AES_CheckSamplingLotOperationCompleted == null)) {
                this.AES_CheckSamplingLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAES_CheckSamplingLotOperationCompleted);
            }
            this.InvokeAsync("AES_CheckSamplingLot", new object[] {
                        sLot,
                        sSamplingLotType}, this.AES_CheckSamplingLotOperationCompleted, userState);
        }
        
        private void OnAES_CheckSamplingLotOperationCompleted(object arg) {
            if ((this.AES_CheckSamplingLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AES_CheckSamplingLotCompleted(this, new AES_CheckSamplingLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMultiLotAndWaferCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMultiLotAndWaferCount(string sLot) {
            object[] results = this.Invoke("GetMultiLotAndWaferCount", new object[] {
                        sLot});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMultiLotAndWaferCountAsync(string sLot) {
            this.GetMultiLotAndWaferCountAsync(sLot, null);
        }
        
        /// <remarks/>
        public void GetMultiLotAndWaferCountAsync(string sLot, object userState) {
            if ((this.GetMultiLotAndWaferCountOperationCompleted == null)) {
                this.GetMultiLotAndWaferCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMultiLotAndWaferCountOperationCompleted);
            }
            this.InvokeAsync("GetMultiLotAndWaferCount", new object[] {
                        sLot}, this.GetMultiLotAndWaferCountOperationCompleted, userState);
        }
        
        private void OnGetMultiLotAndWaferCountOperationCompleted(object arg) {
            if ((this.GetMultiLotAndWaferCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMultiLotAndWaferCountCompleted(this, new GetMultiLotAndWaferCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InlineStockDBQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet InlineStockDBQuery(string sSQL) {
            object[] results = this.Invoke("InlineStockDBQuery", new object[] {
                        sSQL});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void InlineStockDBQueryAsync(string sSQL) {
            this.InlineStockDBQueryAsync(sSQL, null);
        }
        
        /// <remarks/>
        public void InlineStockDBQueryAsync(string sSQL, object userState) {
            if ((this.InlineStockDBQueryOperationCompleted == null)) {
                this.InlineStockDBQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInlineStockDBQueryOperationCompleted);
            }
            this.InvokeAsync("InlineStockDBQuery", new object[] {
                        sSQL}, this.InlineStockDBQueryOperationCompleted, userState);
        }
        
        private void OnInlineStockDBQueryOperationCompleted(object arg) {
            if ((this.InlineStockDBQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InlineStockDBQueryCompleted(this, new InlineStockDBQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AESDBQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AESDBQuery(string sSQL) {
            object[] results = this.Invoke("AESDBQuery", new object[] {
                        sSQL});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AESDBQueryAsync(string sSQL) {
            this.AESDBQueryAsync(sSQL, null);
        }
        
        /// <remarks/>
        public void AESDBQueryAsync(string sSQL, object userState) {
            if ((this.AESDBQueryOperationCompleted == null)) {
                this.AESDBQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAESDBQueryOperationCompleted);
            }
            this.InvokeAsync("AESDBQuery", new object[] {
                        sSQL}, this.AESDBQueryOperationCompleted, userState);
        }
        
        private void OnAESDBQueryOperationCompleted(object arg) {
            if ((this.AESDBQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AESDBQueryCompleted(this, new AESDBQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LEGACYDBQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LEGACYDBQuery(string sSQL) {
            object[] results = this.Invoke("LEGACYDBQuery", new object[] {
                        sSQL});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LEGACYDBQueryAsync(string sSQL) {
            this.LEGACYDBQueryAsync(sSQL, null);
        }
        
        /// <remarks/>
        public void LEGACYDBQueryAsync(string sSQL, object userState) {
            if ((this.LEGACYDBQueryOperationCompleted == null)) {
                this.LEGACYDBQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLEGACYDBQueryOperationCompleted);
            }
            this.InvokeAsync("LEGACYDBQuery", new object[] {
                        sSQL}, this.LEGACYDBQueryOperationCompleted, userState);
        }
        
        private void OnLEGACYDBQueryOperationCompleted(object arg) {
            if ((this.LEGACYDBQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LEGACYDBQueryCompleted(this, new LEGACYDBQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InlineStockMTSQLExec", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InlineStockMTSQLExec(string[] sSQL) {
            this.Invoke("InlineStockMTSQLExec", new object[] {
                        sSQL});
        }
        
        /// <remarks/>
        public void InlineStockMTSQLExecAsync(string[] sSQL) {
            this.InlineStockMTSQLExecAsync(sSQL, null);
        }
        
        /// <remarks/>
        public void InlineStockMTSQLExecAsync(string[] sSQL, object userState) {
            if ((this.InlineStockMTSQLExecOperationCompleted == null)) {
                this.InlineStockMTSQLExecOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInlineStockMTSQLExecOperationCompleted);
            }
            this.InvokeAsync("InlineStockMTSQLExec", new object[] {
                        sSQL}, this.InlineStockMTSQLExecOperationCompleted, userState);
        }
        
        private void OnInlineStockMTSQLExecOperationCompleted(object arg) {
            if ((this.InlineStockMTSQLExecCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InlineStockMTSQLExecCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AMSDBQueryForVB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AMSDBQueryForVB(string sSQL) {
            object[] results = this.Invoke("AMSDBQueryForVB", new object[] {
                        sSQL});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AMSDBQueryForVBAsync(string sSQL) {
            this.AMSDBQueryForVBAsync(sSQL, null);
        }
        
        /// <remarks/>
        public void AMSDBQueryForVBAsync(string sSQL, object userState) {
            if ((this.AMSDBQueryForVBOperationCompleted == null)) {
                this.AMSDBQueryForVBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAMSDBQueryForVBOperationCompleted);
            }
            this.InvokeAsync("AMSDBQueryForVB", new object[] {
                        sSQL}, this.AMSDBQueryForVBOperationCompleted, userState);
        }
        
        private void OnAMSDBQueryForVBOperationCompleted(object arg) {
            if ((this.AMSDBQueryForVBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AMSDBQueryForVBCompleted(this, new AMSDBQueryForVBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AMSDBQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AMSDBQuery(string sSQL, ref bool bSuccess, ref string sMsg) {
            object[] results = this.Invoke("AMSDBQuery", new object[] {
                        sSQL,
                        bSuccess,
                        sMsg});
            bSuccess = ((bool)(results[1]));
            sMsg = ((string)(results[2]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AMSDBQueryAsync(string sSQL, bool bSuccess, string sMsg) {
            this.AMSDBQueryAsync(sSQL, bSuccess, sMsg, null);
        }
        
        /// <remarks/>
        public void AMSDBQueryAsync(string sSQL, bool bSuccess, string sMsg, object userState) {
            if ((this.AMSDBQueryOperationCompleted == null)) {
                this.AMSDBQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAMSDBQueryOperationCompleted);
            }
            this.InvokeAsync("AMSDBQuery", new object[] {
                        sSQL,
                        bSuccess,
                        sMsg}, this.AMSDBQueryOperationCompleted, userState);
        }
        
        private void OnAMSDBQueryOperationCompleted(object arg) {
            if ((this.AMSDBQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AMSDBQueryCompleted(this, new AMSDBQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AMSDBQuery1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AMSDBQuery1(string sSQL) {
            object[] results = this.Invoke("AMSDBQuery1", new object[] {
                        sSQL});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AMSDBQuery1Async(string sSQL) {
            this.AMSDBQuery1Async(sSQL, null);
        }
        
        /// <remarks/>
        public void AMSDBQuery1Async(string sSQL, object userState) {
            if ((this.AMSDBQuery1OperationCompleted == null)) {
                this.AMSDBQuery1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAMSDBQuery1OperationCompleted);
            }
            this.InvokeAsync("AMSDBQuery1", new object[] {
                        sSQL}, this.AMSDBQuery1OperationCompleted, userState);
        }
        
        private void OnAMSDBQuery1OperationCompleted(object arg) {
            if ((this.AMSDBQuery1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AMSDBQuery1Completed(this, new AMSDBQuery1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AMSDBQuery2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AMSDBQuery2(string sSQL, string sFromSYS) {
            object[] results = this.Invoke("AMSDBQuery2", new object[] {
                        sSQL,
                        sFromSYS});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AMSDBQuery2Async(string sSQL, string sFromSYS) {
            this.AMSDBQuery2Async(sSQL, sFromSYS, null);
        }
        
        /// <remarks/>
        public void AMSDBQuery2Async(string sSQL, string sFromSYS, object userState) {
            if ((this.AMSDBQuery2OperationCompleted == null)) {
                this.AMSDBQuery2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAMSDBQuery2OperationCompleted);
            }
            this.InvokeAsync("AMSDBQuery2", new object[] {
                        sSQL,
                        sFromSYS}, this.AMSDBQuery2OperationCompleted, userState);
        }
        
        private void OnAMSDBQuery2OperationCompleted(object arg) {
            if ((this.AMSDBQuery2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AMSDBQuery2Completed(this, new AMSDBQuery2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AMSDBQuery3", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AMSDBQuery3(string sSQL, string sFromSYS, bool bNoRowNothing) {
            object[] results = this.Invoke("AMSDBQuery3", new object[] {
                        sSQL,
                        sFromSYS,
                        bNoRowNothing});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AMSDBQuery3Async(string sSQL, string sFromSYS, bool bNoRowNothing) {
            this.AMSDBQuery3Async(sSQL, sFromSYS, bNoRowNothing, null);
        }
        
        /// <remarks/>
        public void AMSDBQuery3Async(string sSQL, string sFromSYS, bool bNoRowNothing, object userState) {
            if ((this.AMSDBQuery3OperationCompleted == null)) {
                this.AMSDBQuery3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAMSDBQuery3OperationCompleted);
            }
            this.InvokeAsync("AMSDBQuery3", new object[] {
                        sSQL,
                        sFromSYS,
                        bNoRowNothing}, this.AMSDBQuery3OperationCompleted, userState);
        }
        
        private void OnAMSDBQuery3OperationCompleted(object arg) {
            if ((this.AMSDBQuery3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AMSDBQuery3Completed(this, new AMSDBQuery3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AMSDBQuery4", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AMSDBQuery4(string sSQL, string sFromSYS, bool bSkipTimeCheck) {
            object[] results = this.Invoke("AMSDBQuery4", new object[] {
                        sSQL,
                        sFromSYS,
                        bSkipTimeCheck});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AMSDBQuery4Async(string sSQL, string sFromSYS, bool bSkipTimeCheck) {
            this.AMSDBQuery4Async(sSQL, sFromSYS, bSkipTimeCheck, null);
        }
        
        /// <remarks/>
        public void AMSDBQuery4Async(string sSQL, string sFromSYS, bool bSkipTimeCheck, object userState) {
            if ((this.AMSDBQuery4OperationCompleted == null)) {
                this.AMSDBQuery4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAMSDBQuery4OperationCompleted);
            }
            this.InvokeAsync("AMSDBQuery4", new object[] {
                        sSQL,
                        sFromSYS,
                        bSkipTimeCheck}, this.AMSDBQuery4OperationCompleted, userState);
        }
        
        private void OnAMSDBQuery4OperationCompleted(object arg) {
            if ((this.AMSDBQuery4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AMSDBQuery4Completed(this, new AMSDBQuery4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AMSMTSQLExec", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AMSMTSQLExec(string[] sSQL) {
            this.Invoke("AMSMTSQLExec", new object[] {
                        sSQL});
        }
        
        /// <remarks/>
        public void AMSMTSQLExecAsync(string[] sSQL) {
            this.AMSMTSQLExecAsync(sSQL, null);
        }
        
        /// <remarks/>
        public void AMSMTSQLExecAsync(string[] sSQL, object userState) {
            if ((this.AMSMTSQLExecOperationCompleted == null)) {
                this.AMSMTSQLExecOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAMSMTSQLExecOperationCompleted);
            }
            this.InvokeAsync("AMSMTSQLExec", new object[] {
                        sSQL}, this.AMSMTSQLExecOperationCompleted, userState);
        }
        
        private void OnAMSMTSQLExecOperationCompleted(object arg) {
            if ((this.AMSMTSQLExecCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AMSMTSQLExecCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AMSMTSQLExecRPT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AMSMTSQLExecRPT(string[] sSQL) {
            this.Invoke("AMSMTSQLExecRPT", new object[] {
                        sSQL});
        }
        
        /// <remarks/>
        public void AMSMTSQLExecRPTAsync(string[] sSQL) {
            this.AMSMTSQLExecRPTAsync(sSQL, null);
        }
        
        /// <remarks/>
        public void AMSMTSQLExecRPTAsync(string[] sSQL, object userState) {
            if ((this.AMSMTSQLExecRPTOperationCompleted == null)) {
                this.AMSMTSQLExecRPTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAMSMTSQLExecRPTOperationCompleted);
            }
            this.InvokeAsync("AMSMTSQLExecRPT", new object[] {
                        sSQL}, this.AMSMTSQLExecRPTOperationCompleted, userState);
        }
        
        private void OnAMSMTSQLExecRPTOperationCompleted(object arg) {
            if ((this.AMSMTSQLExecRPTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AMSMTSQLExecRPTCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AMSDBQueryRPT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AMSDBQueryRPT(string sSQL) {
            object[] results = this.Invoke("AMSDBQueryRPT", new object[] {
                        sSQL});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AMSDBQueryRPTAsync(string sSQL) {
            this.AMSDBQueryRPTAsync(sSQL, null);
        }
        
        /// <remarks/>
        public void AMSDBQueryRPTAsync(string sSQL, object userState) {
            if ((this.AMSDBQueryRPTOperationCompleted == null)) {
                this.AMSDBQueryRPTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAMSDBQueryRPTOperationCompleted);
            }
            this.InvokeAsync("AMSDBQueryRPT", new object[] {
                        sSQL}, this.AMSDBQueryRPTOperationCompleted, userState);
        }
        
        private void OnAMSDBQueryRPTOperationCompleted(object arg) {
            if ((this.AMSDBQueryRPTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AMSDBQueryRPTCompleted(this, new AMSDBQueryRPTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AMSDBQueryRPT1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AMSDBQueryRPT1(string sSQL, string sFromSYS) {
            object[] results = this.Invoke("AMSDBQueryRPT1", new object[] {
                        sSQL,
                        sFromSYS});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AMSDBQueryRPT1Async(string sSQL, string sFromSYS) {
            this.AMSDBQueryRPT1Async(sSQL, sFromSYS, null);
        }
        
        /// <remarks/>
        public void AMSDBQueryRPT1Async(string sSQL, string sFromSYS, object userState) {
            if ((this.AMSDBQueryRPT1OperationCompleted == null)) {
                this.AMSDBQueryRPT1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAMSDBQueryRPT1OperationCompleted);
            }
            this.InvokeAsync("AMSDBQueryRPT1", new object[] {
                        sSQL,
                        sFromSYS}, this.AMSDBQueryRPT1OperationCompleted, userState);
        }
        
        private void OnAMSDBQueryRPT1OperationCompleted(object arg) {
            if ((this.AMSDBQueryRPT1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AMSDBQueryRPT1Completed(this, new AMSDBQueryRPT1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AMSDBQueryREN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AMSDBQueryREN(string sSQL, string sFromSYS) {
            object[] results = this.Invoke("AMSDBQueryREN", new object[] {
                        sSQL,
                        sFromSYS});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AMSDBQueryRENAsync(string sSQL, string sFromSYS) {
            this.AMSDBQueryRENAsync(sSQL, sFromSYS, null);
        }
        
        /// <remarks/>
        public void AMSDBQueryRENAsync(string sSQL, string sFromSYS, object userState) {
            if ((this.AMSDBQueryRENOperationCompleted == null)) {
                this.AMSDBQueryRENOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAMSDBQueryRENOperationCompleted);
            }
            this.InvokeAsync("AMSDBQueryREN", new object[] {
                        sSQL,
                        sFromSYS}, this.AMSDBQueryRENOperationCompleted, userState);
        }
        
        private void OnAMSDBQueryRENOperationCompleted(object arg) {
            if ((this.AMSDBQueryRENCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AMSDBQueryRENCompleted(this, new AMSDBQueryRENCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AMS_UpdateBLOB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AMS_UpdateBLOB(string sWhere, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] sData, string sTable, string sField) {
            this.Invoke("AMS_UpdateBLOB", new object[] {
                        sWhere,
                        sData,
                        sTable,
                        sField});
        }
        
        /// <remarks/>
        public void AMS_UpdateBLOBAsync(string sWhere, byte[] sData, string sTable, string sField) {
            this.AMS_UpdateBLOBAsync(sWhere, sData, sTable, sField, null);
        }
        
        /// <remarks/>
        public void AMS_UpdateBLOBAsync(string sWhere, byte[] sData, string sTable, string sField, object userState) {
            if ((this.AMS_UpdateBLOBOperationCompleted == null)) {
                this.AMS_UpdateBLOBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAMS_UpdateBLOBOperationCompleted);
            }
            this.InvokeAsync("AMS_UpdateBLOB", new object[] {
                        sWhere,
                        sData,
                        sTable,
                        sField}, this.AMS_UpdateBLOBOperationCompleted, userState);
        }
        
        private void OnAMS_UpdateBLOBOperationCompleted(object arg) {
            if ((this.AMS_UpdateBLOBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AMS_UpdateBLOBCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AMS_GetBLOB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AMS_GetBLOB(string sWhere, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] ref byte[] sData, string sTable, string sField) {
            object[] results = this.Invoke("AMS_GetBLOB", new object[] {
                        sWhere,
                        sData,
                        sTable,
                        sField});
            sData = ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void AMS_GetBLOBAsync(string sWhere, byte[] sData, string sTable, string sField) {
            this.AMS_GetBLOBAsync(sWhere, sData, sTable, sField, null);
        }
        
        /// <remarks/>
        public void AMS_GetBLOBAsync(string sWhere, byte[] sData, string sTable, string sField, object userState) {
            if ((this.AMS_GetBLOBOperationCompleted == null)) {
                this.AMS_GetBLOBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAMS_GetBLOBOperationCompleted);
            }
            this.InvokeAsync("AMS_GetBLOB", new object[] {
                        sWhere,
                        sData,
                        sTable,
                        sField}, this.AMS_GetBLOBOperationCompleted, userState);
        }
        
        private void OnAMS_GetBLOBOperationCompleted(object arg) {
            if ((this.AMS_GetBLOBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AMS_GetBLOBCompleted(this, new AMS_GetBLOBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AMSDBQueryWithExcel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AMSDBQueryWithExcel(string sSQL, string sFromSYS, string sMailAccount, string sMailSubject) {
            object[] results = this.Invoke("AMSDBQueryWithExcel", new object[] {
                        sSQL,
                        sFromSYS,
                        sMailAccount,
                        sMailSubject});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AMSDBQueryWithExcelAsync(string sSQL, string sFromSYS, string sMailAccount, string sMailSubject) {
            this.AMSDBQueryWithExcelAsync(sSQL, sFromSYS, sMailAccount, sMailSubject, null);
        }
        
        /// <remarks/>
        public void AMSDBQueryWithExcelAsync(string sSQL, string sFromSYS, string sMailAccount, string sMailSubject, object userState) {
            if ((this.AMSDBQueryWithExcelOperationCompleted == null)) {
                this.AMSDBQueryWithExcelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAMSDBQueryWithExcelOperationCompleted);
            }
            this.InvokeAsync("AMSDBQueryWithExcel", new object[] {
                        sSQL,
                        sFromSYS,
                        sMailAccount,
                        sMailSubject}, this.AMSDBQueryWithExcelOperationCompleted, userState);
        }
        
        private void OnAMSDBQueryWithExcelOperationCompleted(object arg) {
            if ((this.AMSDBQueryWithExcelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AMSDBQueryWithExcelCompleted(this, new AMSDBQueryWithExcelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AMS_PI_IsPMBeforeRtnToMFG", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AMS_PI_IsPMBeforeRtnToMFG(string MC) {
            object[] results = this.Invoke("AMS_PI_IsPMBeforeRtnToMFG", new object[] {
                        MC});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AMS_PI_IsPMBeforeRtnToMFGAsync(string MC) {
            this.AMS_PI_IsPMBeforeRtnToMFGAsync(MC, null);
        }
        
        /// <remarks/>
        public void AMS_PI_IsPMBeforeRtnToMFGAsync(string MC, object userState) {
            if ((this.AMS_PI_IsPMBeforeRtnToMFGOperationCompleted == null)) {
                this.AMS_PI_IsPMBeforeRtnToMFGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAMS_PI_IsPMBeforeRtnToMFGOperationCompleted);
            }
            this.InvokeAsync("AMS_PI_IsPMBeforeRtnToMFG", new object[] {
                        MC}, this.AMS_PI_IsPMBeforeRtnToMFGOperationCompleted, userState);
        }
        
        private void OnAMS_PI_IsPMBeforeRtnToMFGOperationCompleted(object arg) {
            if ((this.AMS_PI_IsPMBeforeRtnToMFGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AMS_PI_IsPMBeforeRtnToMFGCompleted(this, new AMS_PI_IsPMBeforeRtnToMFGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AMS_ShutdownMC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AMS_ShutdownMC(string RC, string MC, string Employee, string Comment) {
            object[] results = this.Invoke("AMS_ShutdownMC", new object[] {
                        RC,
                        MC,
                        Employee,
                        Comment});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AMS_ShutdownMCAsync(string RC, string MC, string Employee, string Comment) {
            this.AMS_ShutdownMCAsync(RC, MC, Employee, Comment, null);
        }
        
        /// <remarks/>
        public void AMS_ShutdownMCAsync(string RC, string MC, string Employee, string Comment, object userState) {
            if ((this.AMS_ShutdownMCOperationCompleted == null)) {
                this.AMS_ShutdownMCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAMS_ShutdownMCOperationCompleted);
            }
            this.InvokeAsync("AMS_ShutdownMC", new object[] {
                        RC,
                        MC,
                        Employee,
                        Comment}, this.AMS_ShutdownMCOperationCompleted, userState);
        }
        
        private void OnAMS_ShutdownMCOperationCompleted(object arg) {
            if ((this.AMS_ShutdownMCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AMS_ShutdownMCCompleted(this, new AMS_ShutdownMCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/eCIMInfoToAMSPI", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string eCIMInfoToAMSPI(string MC, string RC) {
            object[] results = this.Invoke("eCIMInfoToAMSPI", new object[] {
                        MC,
                        RC});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void eCIMInfoToAMSPIAsync(string MC, string RC) {
            this.eCIMInfoToAMSPIAsync(MC, RC, null);
        }
        
        /// <remarks/>
        public void eCIMInfoToAMSPIAsync(string MC, string RC, object userState) {
            if ((this.eCIMInfoToAMSPIOperationCompleted == null)) {
                this.eCIMInfoToAMSPIOperationCompleted = new System.Threading.SendOrPostCallback(this.OneCIMInfoToAMSPIOperationCompleted);
            }
            this.InvokeAsync("eCIMInfoToAMSPI", new object[] {
                        MC,
                        RC}, this.eCIMInfoToAMSPIOperationCompleted, userState);
        }
        
        private void OneCIMInfoToAMSPIOperationCompleted(object arg) {
            if ((this.eCIMInfoToAMSPICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.eCIMInfoToAMSPICompleted(this, new eCIMInfoToAMSPICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QAOperationLotMove", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QAOperationLotMove(string sLot, bool bMoveAllSubLots, int iSamplingWaferSize, int iSamplingSize, string sComments, string sUserName) {
            object[] results = this.Invoke("QAOperationLotMove", new object[] {
                        sLot,
                        bMoveAllSubLots,
                        iSamplingWaferSize,
                        iSamplingSize,
                        sComments,
                        sUserName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QAOperationLotMoveAsync(string sLot, bool bMoveAllSubLots, int iSamplingWaferSize, int iSamplingSize, string sComments, string sUserName) {
            this.QAOperationLotMoveAsync(sLot, bMoveAllSubLots, iSamplingWaferSize, iSamplingSize, sComments, sUserName, null);
        }
        
        /// <remarks/>
        public void QAOperationLotMoveAsync(string sLot, bool bMoveAllSubLots, int iSamplingWaferSize, int iSamplingSize, string sComments, string sUserName, object userState) {
            if ((this.QAOperationLotMoveOperationCompleted == null)) {
                this.QAOperationLotMoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQAOperationLotMoveOperationCompleted);
            }
            this.InvokeAsync("QAOperationLotMove", new object[] {
                        sLot,
                        bMoveAllSubLots,
                        iSamplingWaferSize,
                        iSamplingSize,
                        sComments,
                        sUserName}, this.QAOperationLotMoveOperationCompleted, userState);
        }
        
        private void OnQAOperationLotMoveOperationCompleted(object arg) {
            if ((this.QAOperationLotMoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QAOperationLotMoveCompleted(this, new QAOperationLotMoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Check_FAIReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Check_FAIReport(string sLot) {
            this.Invoke("Check_FAIReport", new object[] {
                        sLot});
        }
        
        /// <remarks/>
        public void Check_FAIReportAsync(string sLot) {
            this.Check_FAIReportAsync(sLot, null);
        }
        
        /// <remarks/>
        public void Check_FAIReportAsync(string sLot, object userState) {
            if ((this.Check_FAIReportOperationCompleted == null)) {
                this.Check_FAIReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheck_FAIReportOperationCompleted);
            }
            this.InvokeAsync("Check_FAIReport", new object[] {
                        sLot}, this.Check_FAIReportOperationCompleted, userState);
        }
        
        private void OnCheck_FAIReportOperationCompleted(object arg) {
            if ((this.Check_FAIReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Check_FAIReportCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckMaskInStockByTrackingNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckMaskInStockByTrackingNo(string sTrackingNo, ref string sMasks) {
            object[] results = this.Invoke("CheckMaskInStockByTrackingNo", new object[] {
                        sTrackingNo,
                        sMasks});
            sMasks = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckMaskInStockByTrackingNoAsync(string sTrackingNo, string sMasks) {
            this.CheckMaskInStockByTrackingNoAsync(sTrackingNo, sMasks, null);
        }
        
        /// <remarks/>
        public void CheckMaskInStockByTrackingNoAsync(string sTrackingNo, string sMasks, object userState) {
            if ((this.CheckMaskInStockByTrackingNoOperationCompleted == null)) {
                this.CheckMaskInStockByTrackingNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckMaskInStockByTrackingNoOperationCompleted);
            }
            this.InvokeAsync("CheckMaskInStockByTrackingNo", new object[] {
                        sTrackingNo,
                        sMasks}, this.CheckMaskInStockByTrackingNoOperationCompleted, userState);
        }
        
        private void OnCheckMaskInStockByTrackingNoOperationCompleted(object arg) {
            if ((this.CheckMaskInStockByTrackingNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckMaskInStockByTrackingNoCompleted(this, new CheckMaskInStockByTrackingNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckMaskPhaseOutByTrackingNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckMaskPhaseOutByTrackingNo(string sTrackingNo, ref string sResult) {
            object[] results = this.Invoke("CheckMaskPhaseOutByTrackingNo", new object[] {
                        sTrackingNo,
                        sResult});
            sResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckMaskPhaseOutByTrackingNoAsync(string sTrackingNo, string sResult) {
            this.CheckMaskPhaseOutByTrackingNoAsync(sTrackingNo, sResult, null);
        }
        
        /// <remarks/>
        public void CheckMaskPhaseOutByTrackingNoAsync(string sTrackingNo, string sResult, object userState) {
            if ((this.CheckMaskPhaseOutByTrackingNoOperationCompleted == null)) {
                this.CheckMaskPhaseOutByTrackingNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckMaskPhaseOutByTrackingNoOperationCompleted);
            }
            this.InvokeAsync("CheckMaskPhaseOutByTrackingNo", new object[] {
                        sTrackingNo,
                        sResult}, this.CheckMaskPhaseOutByTrackingNoOperationCompleted, userState);
        }
        
        private void OnCheckMaskPhaseOutByTrackingNoOperationCompleted(object arg) {
            if ((this.CheckMaskPhaseOutByTrackingNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckMaskPhaseOutByTrackingNoCompleted(this, new CheckMaskPhaseOutByTrackingNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBomDataForAMS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBomDataForAMS(string sBiNumber, string sRev) {
            object[] results = this.Invoke("GetBomDataForAMS", new object[] {
                        sBiNumber,
                        sRev});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBomDataForAMSAsync(string sBiNumber, string sRev) {
            this.GetBomDataForAMSAsync(sBiNumber, sRev, null);
        }
        
        /// <remarks/>
        public void GetBomDataForAMSAsync(string sBiNumber, string sRev, object userState) {
            if ((this.GetBomDataForAMSOperationCompleted == null)) {
                this.GetBomDataForAMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBomDataForAMSOperationCompleted);
            }
            this.InvokeAsync("GetBomDataForAMS", new object[] {
                        sBiNumber,
                        sRev}, this.GetBomDataForAMSOperationCompleted, userState);
        }
        
        private void OnGetBomDataForAMSOperationCompleted(object arg) {
            if ((this.GetBomDataForAMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBomDataForAMSCompleted(this, new GetBomDataForAMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGFCustInputDataForAMS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetGFCustInputDataForAMS(string sCustomer, string sTARGETDEVICE, string sSOURCEDEVICE, string sTestPorg, string sJobName) {
            object[] results = this.Invoke("GetGFCustInputDataForAMS", new object[] {
                        sCustomer,
                        sTARGETDEVICE,
                        sSOURCEDEVICE,
                        sTestPorg,
                        sJobName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetGFCustInputDataForAMSAsync(string sCustomer, string sTARGETDEVICE, string sSOURCEDEVICE, string sTestPorg, string sJobName) {
            this.GetGFCustInputDataForAMSAsync(sCustomer, sTARGETDEVICE, sSOURCEDEVICE, sTestPorg, sJobName, null);
        }
        
        /// <remarks/>
        public void GetGFCustInputDataForAMSAsync(string sCustomer, string sTARGETDEVICE, string sSOURCEDEVICE, string sTestPorg, string sJobName, object userState) {
            if ((this.GetGFCustInputDataForAMSOperationCompleted == null)) {
                this.GetGFCustInputDataForAMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGFCustInputDataForAMSOperationCompleted);
            }
            this.InvokeAsync("GetGFCustInputDataForAMS", new object[] {
                        sCustomer,
                        sTARGETDEVICE,
                        sSOURCEDEVICE,
                        sTestPorg,
                        sJobName}, this.GetGFCustInputDataForAMSOperationCompleted, userState);
        }
        
        private void OnGetGFCustInputDataForAMSOperationCompleted(object arg) {
            if ((this.GetGFCustInputDataForAMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGFCustInputDataForAMSCompleted(this, new GetGFCustInputDataForAMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LotTxnValidation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode LotTxnValidation(string MainLot, string TxnName, string Count, string UnitPerTnR, string SubLotList, string Delimiter) {
            object[] results = this.Invoke("LotTxnValidation", new object[] {
                        MainLot,
                        TxnName,
                        Count,
                        UnitPerTnR,
                        SubLotList,
                        Delimiter});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void LotTxnValidationAsync(string MainLot, string TxnName, string Count, string UnitPerTnR, string SubLotList, string Delimiter) {
            this.LotTxnValidationAsync(MainLot, TxnName, Count, UnitPerTnR, SubLotList, Delimiter, null);
        }
        
        /// <remarks/>
        public void LotTxnValidationAsync(string MainLot, string TxnName, string Count, string UnitPerTnR, string SubLotList, string Delimiter, object userState) {
            if ((this.LotTxnValidationOperationCompleted == null)) {
                this.LotTxnValidationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLotTxnValidationOperationCompleted);
            }
            this.InvokeAsync("LotTxnValidation", new object[] {
                        MainLot,
                        TxnName,
                        Count,
                        UnitPerTnR,
                        SubLotList,
                        Delimiter}, this.LotTxnValidationOperationCompleted, userState);
        }
        
        private void OnLotTxnValidationOperationCompleted(object arg) {
            if ((this.LotTxnValidationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LotTxnValidationCompleted(this, new LotTxnValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LotTxnValidation2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode LotTxnValidation2(string TxnName, string MainLot, string Count, string SubLotList, string Delimiter, System.Xml.XmlNode xDetails) {
            object[] results = this.Invoke("LotTxnValidation2", new object[] {
                        TxnName,
                        MainLot,
                        Count,
                        SubLotList,
                        Delimiter,
                        xDetails});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void LotTxnValidation2Async(string TxnName, string MainLot, string Count, string SubLotList, string Delimiter, System.Xml.XmlNode xDetails) {
            this.LotTxnValidation2Async(TxnName, MainLot, Count, SubLotList, Delimiter, xDetails, null);
        }
        
        /// <remarks/>
        public void LotTxnValidation2Async(string TxnName, string MainLot, string Count, string SubLotList, string Delimiter, System.Xml.XmlNode xDetails, object userState) {
            if ((this.LotTxnValidation2OperationCompleted == null)) {
                this.LotTxnValidation2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnLotTxnValidation2OperationCompleted);
            }
            this.InvokeAsync("LotTxnValidation2", new object[] {
                        TxnName,
                        MainLot,
                        Count,
                        SubLotList,
                        Delimiter,
                        xDetails}, this.LotTxnValidation2OperationCompleted, userState);
        }
        
        private void OnLotTxnValidation2OperationCompleted(object arg) {
            if ((this.LotTxnValidation2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LotTxnValidation2Completed(this, new LotTxnValidation2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMultipleBinLotData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetMultipleBinLotData(string sContainerName) {
            object[] results = this.Invoke("GetMultipleBinLotData", new object[] {
                        sContainerName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetMultipleBinLotDataAsync(string sContainerName) {
            this.GetMultipleBinLotDataAsync(sContainerName, null);
        }
        
        /// <remarks/>
        public void GetMultipleBinLotDataAsync(string sContainerName, object userState) {
            if ((this.GetMultipleBinLotDataOperationCompleted == null)) {
                this.GetMultipleBinLotDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMultipleBinLotDataOperationCompleted);
            }
            this.InvokeAsync("GetMultipleBinLotData", new object[] {
                        sContainerName}, this.GetMultipleBinLotDataOperationCompleted, userState);
        }
        
        private void OnGetMultipleBinLotDataOperationCompleted(object arg) {
            if ((this.GetMultipleBinLotDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMultipleBinLotDataCompleted(this, new GetMultipleBinLotDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TnRCombineRuleCheck", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TnRCombineRuleCheck(string sRCs, ref string sMsg) {
            object[] results = this.Invoke("TnRCombineRuleCheck", new object[] {
                        sRCs,
                        sMsg});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TnRCombineRuleCheckAsync(string sRCs, string sMsg) {
            this.TnRCombineRuleCheckAsync(sRCs, sMsg, null);
        }
        
        /// <remarks/>
        public void TnRCombineRuleCheckAsync(string sRCs, string sMsg, object userState) {
            if ((this.TnRCombineRuleCheckOperationCompleted == null)) {
                this.TnRCombineRuleCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTnRCombineRuleCheckOperationCompleted);
            }
            this.InvokeAsync("TnRCombineRuleCheck", new object[] {
                        sRCs,
                        sMsg}, this.TnRCombineRuleCheckOperationCompleted, userState);
        }
        
        private void OnTnRCombineRuleCheckOperationCompleted(object arg) {
            if ((this.TnRCombineRuleCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TnRCombineRuleCheckCompleted(this, new TnRCombineRuleCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TnRCombineRuleCheckMsg", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TnRCombineRuleCheckMsg(string sRCs) {
            object[] results = this.Invoke("TnRCombineRuleCheckMsg", new object[] {
                        sRCs});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TnRCombineRuleCheckMsgAsync(string sRCs) {
            this.TnRCombineRuleCheckMsgAsync(sRCs, null);
        }
        
        /// <remarks/>
        public void TnRCombineRuleCheckMsgAsync(string sRCs, object userState) {
            if ((this.TnRCombineRuleCheckMsgOperationCompleted == null)) {
                this.TnRCombineRuleCheckMsgOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTnRCombineRuleCheckMsgOperationCompleted);
            }
            this.InvokeAsync("TnRCombineRuleCheckMsg", new object[] {
                        sRCs}, this.TnRCombineRuleCheckMsgOperationCompleted, userState);
        }
        
        private void OnTnRCombineRuleCheckMsgOperationCompleted(object arg) {
            if ((this.TnRCombineRuleCheckMsgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TnRCombineRuleCheckMsgCompleted(this, new TnRCombineRuleCheckMsgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TnRCombineRuleGetByName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode TnRCombineRuleGetByName(string sName) {
            object[] results = this.Invoke("TnRCombineRuleGetByName", new object[] {
                        sName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void TnRCombineRuleGetByNameAsync(string sName) {
            this.TnRCombineRuleGetByNameAsync(sName, null);
        }
        
        /// <remarks/>
        public void TnRCombineRuleGetByNameAsync(string sName, object userState) {
            if ((this.TnRCombineRuleGetByNameOperationCompleted == null)) {
                this.TnRCombineRuleGetByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTnRCombineRuleGetByNameOperationCompleted);
            }
            this.InvokeAsync("TnRCombineRuleGetByName", new object[] {
                        sName}, this.TnRCombineRuleGetByNameOperationCompleted, userState);
        }
        
        private void OnTnRCombineRuleGetByNameOperationCompleted(object arg) {
            if ((this.TnRCombineRuleGetByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TnRCombineRuleGetByNameCompleted(this, new TnRCombineRuleGetByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TnRCombineRuleGetByLot", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode TnRCombineRuleGetByLot(string sLot) {
            object[] results = this.Invoke("TnRCombineRuleGetByLot", new object[] {
                        sLot});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void TnRCombineRuleGetByLotAsync(string sLot) {
            this.TnRCombineRuleGetByLotAsync(sLot, null);
        }
        
        /// <remarks/>
        public void TnRCombineRuleGetByLotAsync(string sLot, object userState) {
            if ((this.TnRCombineRuleGetByLotOperationCompleted == null)) {
                this.TnRCombineRuleGetByLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTnRCombineRuleGetByLotOperationCompleted);
            }
            this.InvokeAsync("TnRCombineRuleGetByLot", new object[] {
                        sLot}, this.TnRCombineRuleGetByLotOperationCompleted, userState);
        }
        
        private void OnTnRCombineRuleGetByLotOperationCompleted(object arg) {
            if ((this.TnRCombineRuleGetByLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TnRCombineRuleGetByLotCompleted(this, new TnRCombineRuleGetByLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StringParser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StringParser(string Origin, string Delimiter, int Index) {
            object[] results = this.Invoke("StringParser", new object[] {
                        Origin,
                        Delimiter,
                        Index});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StringParserAsync(string Origin, string Delimiter, int Index) {
            this.StringParserAsync(Origin, Delimiter, Index, null);
        }
        
        /// <remarks/>
        public void StringParserAsync(string Origin, string Delimiter, int Index, object userState) {
            if ((this.StringParserOperationCompleted == null)) {
                this.StringParserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStringParserOperationCompleted);
            }
            this.InvokeAsync("StringParser", new object[] {
                        Origin,
                        Delimiter,
                        Index}, this.StringParserOperationCompleted, userState);
        }
        
        private void OnStringParserOperationCompleted(object arg) {
            if ((this.StringParserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StringParserCompleted(this, new StringParserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LowYieldCheck", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LowYieldCheck(string pLot, string pOperation, string pUser) {
            object[] results = this.Invoke("LowYieldCheck", new object[] {
                        pLot,
                        pOperation,
                        pUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LowYieldCheckAsync(string pLot, string pOperation, string pUser) {
            this.LowYieldCheckAsync(pLot, pOperation, pUser, null);
        }
        
        /// <remarks/>
        public void LowYieldCheckAsync(string pLot, string pOperation, string pUser, object userState) {
            if ((this.LowYieldCheckOperationCompleted == null)) {
                this.LowYieldCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLowYieldCheckOperationCompleted);
            }
            this.InvokeAsync("LowYieldCheck", new object[] {
                        pLot,
                        pOperation,
                        pUser}, this.LowYieldCheckOperationCompleted, userState);
        }
        
        private void OnLowYieldCheckOperationCompleted(object arg) {
            if ((this.LowYieldCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LowYieldCheckCompleted(this, new LowYieldCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LowYieldCheckXML", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode LowYieldCheckXML(string pLot, string pOperation, string pUser) {
            object[] results = this.Invoke("LowYieldCheckXML", new object[] {
                        pLot,
                        pOperation,
                        pUser});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void LowYieldCheckXMLAsync(string pLot, string pOperation, string pUser) {
            this.LowYieldCheckXMLAsync(pLot, pOperation, pUser, null);
        }
        
        /// <remarks/>
        public void LowYieldCheckXMLAsync(string pLot, string pOperation, string pUser, object userState) {
            if ((this.LowYieldCheckXMLOperationCompleted == null)) {
                this.LowYieldCheckXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLowYieldCheckXMLOperationCompleted);
            }
            this.InvokeAsync("LowYieldCheckXML", new object[] {
                        pLot,
                        pOperation,
                        pUser}, this.LowYieldCheckXMLOperationCompleted, userState);
        }
        
        private void OnLowYieldCheckXMLOperationCompleted(object arg) {
            if ((this.LowYieldCheckXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LowYieldCheckXMLCompleted(this, new LowYieldCheckXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReelAutoNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetReelAutoNumber(string sLineType, int iCount, string sOper) {
            object[] results = this.Invoke("GetReelAutoNumber", new object[] {
                        sLineType,
                        iCount,
                        sOper});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetReelAutoNumberAsync(string sLineType, int iCount, string sOper) {
            this.GetReelAutoNumberAsync(sLineType, iCount, sOper, null);
        }
        
        /// <remarks/>
        public void GetReelAutoNumberAsync(string sLineType, int iCount, string sOper, object userState) {
            if ((this.GetReelAutoNumberOperationCompleted == null)) {
                this.GetReelAutoNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReelAutoNumberOperationCompleted);
            }
            this.InvokeAsync("GetReelAutoNumber", new object[] {
                        sLineType,
                        iCount,
                        sOper}, this.GetReelAutoNumberOperationCompleted, userState);
        }
        
        private void OnGetReelAutoNumberOperationCompleted(object arg) {
            if ((this.GetReelAutoNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReelAutoNumberCompleted(this, new GetReelAutoNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckLotIsAllowedToOpenNow", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckLotIsAllowedToOpenNow(string outAMSLotNo) {
            object[] results = this.Invoke("CheckLotIsAllowedToOpenNow", new object[] {
                        outAMSLotNo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckLotIsAllowedToOpenNowAsync(string outAMSLotNo) {
            this.CheckLotIsAllowedToOpenNowAsync(outAMSLotNo, null);
        }
        
        /// <remarks/>
        public void CheckLotIsAllowedToOpenNowAsync(string outAMSLotNo, object userState) {
            if ((this.CheckLotIsAllowedToOpenNowOperationCompleted == null)) {
                this.CheckLotIsAllowedToOpenNowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckLotIsAllowedToOpenNowOperationCompleted);
            }
            this.InvokeAsync("CheckLotIsAllowedToOpenNow", new object[] {
                        outAMSLotNo}, this.CheckLotIsAllowedToOpenNowOperationCompleted, userState);
        }
        
        private void OnCheckLotIsAllowedToOpenNowOperationCompleted(object arg) {
            if ((this.CheckLotIsAllowedToOpenNowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckLotIsAllowedToOpenNowCompleted(this, new CheckLotIsAllowedToOpenNowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DieSorterEndorse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DieSorterEndorse(string BatchID, string LotList, string UserName, ref string PrintProgram, ref string PrintFile, ref string OutputFile, ref string[] OutputData) {
            object[] results = this.Invoke("DieSorterEndorse", new object[] {
                        BatchID,
                        LotList,
                        UserName,
                        PrintProgram,
                        PrintFile,
                        OutputFile,
                        OutputData});
            PrintProgram = ((string)(results[1]));
            PrintFile = ((string)(results[2]));
            OutputFile = ((string)(results[3]));
            OutputData = ((string[])(results[4]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DieSorterEndorseAsync(string BatchID, string LotList, string UserName, string PrintProgram, string PrintFile, string OutputFile, string[] OutputData) {
            this.DieSorterEndorseAsync(BatchID, LotList, UserName, PrintProgram, PrintFile, OutputFile, OutputData, null);
        }
        
        /// <remarks/>
        public void DieSorterEndorseAsync(string BatchID, string LotList, string UserName, string PrintProgram, string PrintFile, string OutputFile, string[] OutputData, object userState) {
            if ((this.DieSorterEndorseOperationCompleted == null)) {
                this.DieSorterEndorseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDieSorterEndorseOperationCompleted);
            }
            this.InvokeAsync("DieSorterEndorse", new object[] {
                        BatchID,
                        LotList,
                        UserName,
                        PrintProgram,
                        PrintFile,
                        OutputFile,
                        OutputData}, this.DieSorterEndorseOperationCompleted, userState);
        }
        
        private void OnDieSorterEndorseOperationCompleted(object arg) {
            if ((this.DieSorterEndorseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DieSorterEndorseCompleted(this, new DieSorterEndorseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenAttributeNewValue", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenAttributeNewValue(string AttributeName, string LotList, string Count, string TxnName, string Delimiter) {
            object[] results = this.Invoke("GenAttributeNewValue", new object[] {
                        AttributeName,
                        LotList,
                        Count,
                        TxnName,
                        Delimiter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenAttributeNewValueAsync(string AttributeName, string LotList, string Count, string TxnName, string Delimiter) {
            this.GenAttributeNewValueAsync(AttributeName, LotList, Count, TxnName, Delimiter, null);
        }
        
        /// <remarks/>
        public void GenAttributeNewValueAsync(string AttributeName, string LotList, string Count, string TxnName, string Delimiter, object userState) {
            if ((this.GenAttributeNewValueOperationCompleted == null)) {
                this.GenAttributeNewValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenAttributeNewValueOperationCompleted);
            }
            this.InvokeAsync("GenAttributeNewValue", new object[] {
                        AttributeName,
                        LotList,
                        Count,
                        TxnName,
                        Delimiter}, this.GenAttributeNewValueOperationCompleted, userState);
        }
        
        private void OnGenAttributeNewValueOperationCompleted(object arg) {
            if ((this.GenAttributeNewValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenAttributeNewValueCompleted(this, new GenAttributeNewValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenAttributeNewValue3", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenAttributeNewValue3(string AttributeName, string LotList, string Count, string TxnName, string Delimiter) {
            object[] results = this.Invoke("GenAttributeNewValue3", new object[] {
                        AttributeName,
                        LotList,
                        Count,
                        TxnName,
                        Delimiter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenAttributeNewValue3Async(string AttributeName, string LotList, string Count, string TxnName, string Delimiter) {
            this.GenAttributeNewValue3Async(AttributeName, LotList, Count, TxnName, Delimiter, null);
        }
        
        /// <remarks/>
        public void GenAttributeNewValue3Async(string AttributeName, string LotList, string Count, string TxnName, string Delimiter, object userState) {
            if ((this.GenAttributeNewValue3OperationCompleted == null)) {
                this.GenAttributeNewValue3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenAttributeNewValue3OperationCompleted);
            }
            this.InvokeAsync("GenAttributeNewValue3", new object[] {
                        AttributeName,
                        LotList,
                        Count,
                        TxnName,
                        Delimiter}, this.GenAttributeNewValue3OperationCompleted, userState);
        }
        
        private void OnGenAttributeNewValue3OperationCompleted(object arg) {
            if ((this.GenAttributeNewValue3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenAttributeNewValue3Completed(this, new GenAttributeNewValue3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenAttributeNewValue2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenAttributeNewValue2(string AttributeName, string LotList, string Count, string TxnName, string Delimiter, System.Xml.XmlNode TxnDetails) {
            object[] results = this.Invoke("GenAttributeNewValue2", new object[] {
                        AttributeName,
                        LotList,
                        Count,
                        TxnName,
                        Delimiter,
                        TxnDetails});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenAttributeNewValue2Async(string AttributeName, string LotList, string Count, string TxnName, string Delimiter, System.Xml.XmlNode TxnDetails) {
            this.GenAttributeNewValue2Async(AttributeName, LotList, Count, TxnName, Delimiter, TxnDetails, null);
        }
        
        /// <remarks/>
        public void GenAttributeNewValue2Async(string AttributeName, string LotList, string Count, string TxnName, string Delimiter, System.Xml.XmlNode TxnDetails, object userState) {
            if ((this.GenAttributeNewValue2OperationCompleted == null)) {
                this.GenAttributeNewValue2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenAttributeNewValue2OperationCompleted);
            }
            this.InvokeAsync("GenAttributeNewValue2", new object[] {
                        AttributeName,
                        LotList,
                        Count,
                        TxnName,
                        Delimiter,
                        TxnDetails}, this.GenAttributeNewValue2OperationCompleted, userState);
        }
        
        private void OnGenAttributeNewValue2OperationCompleted(object arg) {
            if ((this.GenAttributeNewValue2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenAttributeNewValue2Completed(this, new GenAttributeNewValue2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenAttributeNewValue_SAPInterface", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenAttributeNewValue_SAPInterface(string AttributeName, string inputSapDate, string inputSapTime, string inputSapStamp, string inputSapPONum) {
            object[] results = this.Invoke("GenAttributeNewValue_SAPInterface", new object[] {
                        AttributeName,
                        inputSapDate,
                        inputSapTime,
                        inputSapStamp,
                        inputSapPONum});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenAttributeNewValue_SAPInterfaceAsync(string AttributeName, string inputSapDate, string inputSapTime, string inputSapStamp, string inputSapPONum) {
            this.GenAttributeNewValue_SAPInterfaceAsync(AttributeName, inputSapDate, inputSapTime, inputSapStamp, inputSapPONum, null);
        }
        
        /// <remarks/>
        public void GenAttributeNewValue_SAPInterfaceAsync(string AttributeName, string inputSapDate, string inputSapTime, string inputSapStamp, string inputSapPONum, object userState) {
            if ((this.GenAttributeNewValue_SAPInterfaceOperationCompleted == null)) {
                this.GenAttributeNewValue_SAPInterfaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenAttributeNewValue_SAPInterfaceOperationCompleted);
            }
            this.InvokeAsync("GenAttributeNewValue_SAPInterface", new object[] {
                        AttributeName,
                        inputSapDate,
                        inputSapTime,
                        inputSapStamp,
                        inputSapPONum}, this.GenAttributeNewValue_SAPInterfaceOperationCompleted, userState);
        }
        
        private void OnGenAttributeNewValue_SAPInterfaceOperationCompleted(object arg) {
            if ((this.GenAttributeNewValue_SAPInterfaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenAttributeNewValue_SAPInterfaceCompleted(this, new GenAttributeNewValue_SAPInterfaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPSMData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPSMData(string Tracking_ID) {
            object[] results = this.Invoke("GetPSMData", new object[] {
                        Tracking_ID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPSMDataAsync(string Tracking_ID) {
            this.GetPSMDataAsync(Tracking_ID, null);
        }
        
        /// <remarks/>
        public void GetPSMDataAsync(string Tracking_ID, object userState) {
            if ((this.GetPSMDataOperationCompleted == null)) {
                this.GetPSMDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPSMDataOperationCompleted);
            }
            this.InvokeAsync("GetPSMData", new object[] {
                        Tracking_ID}, this.GetPSMDataOperationCompleted, userState);
        }
        
        private void OnGetPSMDataOperationCompleted(object arg) {
            if ((this.GetPSMDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPSMDataCompleted(this, new GetPSMDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPSMData_ProductCustomerReqInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPSMData_ProductCustomerReqInfo(string sTrackingID) {
            object[] results = this.Invoke("GetPSMData_ProductCustomerReqInfo", new object[] {
                        sTrackingID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPSMData_ProductCustomerReqInfoAsync(string sTrackingID) {
            this.GetPSMData_ProductCustomerReqInfoAsync(sTrackingID, null);
        }
        
        /// <remarks/>
        public void GetPSMData_ProductCustomerReqInfoAsync(string sTrackingID, object userState) {
            if ((this.GetPSMData_ProductCustomerReqInfoOperationCompleted == null)) {
                this.GetPSMData_ProductCustomerReqInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPSMData_ProductCustomerReqInfoOperationCompleted);
            }
            this.InvokeAsync("GetPSMData_ProductCustomerReqInfo", new object[] {
                        sTrackingID}, this.GetPSMData_ProductCustomerReqInfoOperationCompleted, userState);
        }
        
        private void OnGetPSMData_ProductCustomerReqInfoOperationCompleted(object arg) {
            if ((this.GetPSMData_ProductCustomerReqInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPSMData_ProductCustomerReqInfoCompleted(this, new GetPSMData_ProductCustomerReqInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VMM_SendToEasyFlow", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VMM_SendToEasyFlow(string sUserID, string sLine, string sCustCode, string sCustName, string sOperName, string sDeviceFamily, string sTargetDevice, string sBeforeData, string sAfterData) {
            object[] results = this.Invoke("VMM_SendToEasyFlow", new object[] {
                        sUserID,
                        sLine,
                        sCustCode,
                        sCustName,
                        sOperName,
                        sDeviceFamily,
                        sTargetDevice,
                        sBeforeData,
                        sAfterData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VMM_SendToEasyFlowAsync(string sUserID, string sLine, string sCustCode, string sCustName, string sOperName, string sDeviceFamily, string sTargetDevice, string sBeforeData, string sAfterData) {
            this.VMM_SendToEasyFlowAsync(sUserID, sLine, sCustCode, sCustName, sOperName, sDeviceFamily, sTargetDevice, sBeforeData, sAfterData, null);
        }
        
        /// <remarks/>
        public void VMM_SendToEasyFlowAsync(string sUserID, string sLine, string sCustCode, string sCustName, string sOperName, string sDeviceFamily, string sTargetDevice, string sBeforeData, string sAfterData, object userState) {
            if ((this.VMM_SendToEasyFlowOperationCompleted == null)) {
                this.VMM_SendToEasyFlowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVMM_SendToEasyFlowOperationCompleted);
            }
            this.InvokeAsync("VMM_SendToEasyFlow", new object[] {
                        sUserID,
                        sLine,
                        sCustCode,
                        sCustName,
                        sOperName,
                        sDeviceFamily,
                        sTargetDevice,
                        sBeforeData,
                        sAfterData}, this.VMM_SendToEasyFlowOperationCompleted, userState);
        }
        
        private void OnVMM_SendToEasyFlowOperationCompleted(object arg) {
            if ((this.VMM_SendToEasyFlowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VMM_SendToEasyFlowCompleted(this, new VMM_SendToEasyFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAMSServiceStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAMSServiceStatus() {
            object[] results = this.Invoke("GetAMSServiceStatus", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAMSServiceStatusAsync() {
            this.GetAMSServiceStatusAsync(null);
        }
        
        /// <remarks/>
        public void GetAMSServiceStatusAsync(object userState) {
            if ((this.GetAMSServiceStatusOperationCompleted == null)) {
                this.GetAMSServiceStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAMSServiceStatusOperationCompleted);
            }
            this.InvokeAsync("GetAMSServiceStatus", new object[0], this.GetAMSServiceStatusOperationCompleted, userState);
        }
        
        private void OnGetAMSServiceStatusOperationCompleted(object arg) {
            if ((this.GetAMSServiceStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAMSServiceStatusCompleted(this, new GetAMSServiceStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateFTDeviationReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateFTDeviationReport(string sRunCard, string sUserName, string sDisposition, string sTxnComments) {
            this.Invoke("CreateFTDeviationReport", new object[] {
                        sRunCard,
                        sUserName,
                        sDisposition,
                        sTxnComments});
        }
        
        /// <remarks/>
        public void CreateFTDeviationReportAsync(string sRunCard, string sUserName, string sDisposition, string sTxnComments) {
            this.CreateFTDeviationReportAsync(sRunCard, sUserName, sDisposition, sTxnComments, null);
        }
        
        /// <remarks/>
        public void CreateFTDeviationReportAsync(string sRunCard, string sUserName, string sDisposition, string sTxnComments, object userState) {
            if ((this.CreateFTDeviationReportOperationCompleted == null)) {
                this.CreateFTDeviationReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFTDeviationReportOperationCompleted);
            }
            this.InvokeAsync("CreateFTDeviationReport", new object[] {
                        sRunCard,
                        sUserName,
                        sDisposition,
                        sTxnComments}, this.CreateFTDeviationReportOperationCompleted, userState);
        }
        
        private void OnCreateFTDeviationReportOperationCompleted(object arg) {
            if ((this.CreateFTDeviationReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateFTDeviationReportCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateFTDeviationReportByStep", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateFTDeviationReportByStep(string sRunCard, string sUserName, string sDisposition, string sTxnComments, string sCurrentStep, string sBinData) {
            this.Invoke("CreateFTDeviationReportByStep", new object[] {
                        sRunCard,
                        sUserName,
                        sDisposition,
                        sTxnComments,
                        sCurrentStep,
                        sBinData});
        }
        
        /// <remarks/>
        public void CreateFTDeviationReportByStepAsync(string sRunCard, string sUserName, string sDisposition, string sTxnComments, string sCurrentStep, string sBinData) {
            this.CreateFTDeviationReportByStepAsync(sRunCard, sUserName, sDisposition, sTxnComments, sCurrentStep, sBinData, null);
        }
        
        /// <remarks/>
        public void CreateFTDeviationReportByStepAsync(string sRunCard, string sUserName, string sDisposition, string sTxnComments, string sCurrentStep, string sBinData, object userState) {
            if ((this.CreateFTDeviationReportByStepOperationCompleted == null)) {
                this.CreateFTDeviationReportByStepOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFTDeviationReportByStepOperationCompleted);
            }
            this.InvokeAsync("CreateFTDeviationReportByStep", new object[] {
                        sRunCard,
                        sUserName,
                        sDisposition,
                        sTxnComments,
                        sCurrentStep,
                        sBinData}, this.CreateFTDeviationReportByStepOperationCompleted, userState);
        }
        
        private void OnCreateFTDeviationReportByStepOperationCompleted(object arg) {
            if ((this.CreateFTDeviationReportByStepCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateFTDeviationReportByStepCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFTRTBin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFTRTBin(string sRunCard) {
            object[] results = this.Invoke("GetFTRTBin", new object[] {
                        sRunCard});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFTRTBinAsync(string sRunCard) {
            this.GetFTRTBinAsync(sRunCard, null);
        }
        
        /// <remarks/>
        public void GetFTRTBinAsync(string sRunCard, object userState) {
            if ((this.GetFTRTBinOperationCompleted == null)) {
                this.GetFTRTBinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFTRTBinOperationCompleted);
            }
            this.InvokeAsync("GetFTRTBin", new object[] {
                        sRunCard}, this.GetFTRTBinOperationCompleted, userState);
        }
        
        private void OnGetFTRTBinOperationCompleted(object arg) {
            if ((this.GetFTRTBinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFTRTBinCompleted(this, new GetFTRTBinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckFTRTCommand", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckFTRTCommand(string sRunCard) {
            object[] results = this.Invoke("CheckFTRTCommand", new object[] {
                        sRunCard});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckFTRTCommandAsync(string sRunCard) {
            this.CheckFTRTCommandAsync(sRunCard, null);
        }
        
        /// <remarks/>
        public void CheckFTRTCommandAsync(string sRunCard, object userState) {
            if ((this.CheckFTRTCommandOperationCompleted == null)) {
                this.CheckFTRTCommandOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckFTRTCommandOperationCompleted);
            }
            this.InvokeAsync("CheckFTRTCommand", new object[] {
                        sRunCard}, this.CheckFTRTCommandOperationCompleted, userState);
        }
        
        private void OnCheckFTRTCommandOperationCompleted(object arg) {
            if ((this.CheckFTRTCommandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckFTRTCommandCompleted(this, new CheckFTRTCommandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOperationByCustLotId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOperationByCustLotId(string sCustLotId) {
            object[] results = this.Invoke("GetOperationByCustLotId", new object[] {
                        sCustLotId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOperationByCustLotIdAsync(string sCustLotId) {
            this.GetOperationByCustLotIdAsync(sCustLotId, null);
        }
        
        /// <remarks/>
        public void GetOperationByCustLotIdAsync(string sCustLotId, object userState) {
            if ((this.GetOperationByCustLotIdOperationCompleted == null)) {
                this.GetOperationByCustLotIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOperationByCustLotIdOperationCompleted);
            }
            this.InvokeAsync("GetOperationByCustLotId", new object[] {
                        sCustLotId}, this.GetOperationByCustLotIdOperationCompleted, userState);
        }
        
        private void OnGetOperationByCustLotIdOperationCompleted(object arg) {
            if ((this.GetOperationByCustLotIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOperationByCustLotIdCompleted(this, new GetOperationByCustLotIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHandlerData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetHandlerData(string sRunCard, string sOperation) {
            object[] results = this.Invoke("GetHandlerData", new object[] {
                        sRunCard,
                        sOperation});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetHandlerDataAsync(string sRunCard, string sOperation) {
            this.GetHandlerDataAsync(sRunCard, sOperation, null);
        }
        
        /// <remarks/>
        public void GetHandlerDataAsync(string sRunCard, string sOperation, object userState) {
            if ((this.GetHandlerDataOperationCompleted == null)) {
                this.GetHandlerDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHandlerDataOperationCompleted);
            }
            this.InvokeAsync("GetHandlerData", new object[] {
                        sRunCard,
                        sOperation}, this.GetHandlerDataOperationCompleted, userState);
        }
        
        private void OnGetHandlerDataOperationCompleted(object arg) {
            if ((this.GetHandlerDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHandlerDataCompleted(this, new GetHandlerDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAMSLotNoByWSLotNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAMSLotNoByWSLotNo(string sWSLotNo, ref string sMsg) {
            object[] results = this.Invoke("GetAMSLotNoByWSLotNo", new object[] {
                        sWSLotNo,
                        sMsg});
            sMsg = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAMSLotNoByWSLotNoAsync(string sWSLotNo, string sMsg) {
            this.GetAMSLotNoByWSLotNoAsync(sWSLotNo, sMsg, null);
        }
        
        /// <remarks/>
        public void GetAMSLotNoByWSLotNoAsync(string sWSLotNo, string sMsg, object userState) {
            if ((this.GetAMSLotNoByWSLotNoOperationCompleted == null)) {
                this.GetAMSLotNoByWSLotNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAMSLotNoByWSLotNoOperationCompleted);
            }
            this.InvokeAsync("GetAMSLotNoByWSLotNo", new object[] {
                        sWSLotNo,
                        sMsg}, this.GetAMSLotNoByWSLotNoOperationCompleted, userState);
        }
        
        private void OnGetAMSLotNoByWSLotNoOperationCompleted(object arg) {
            if ((this.GetAMSLotNoByWSLotNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAMSLotNoByWSLotNoCompleted(this, new GetAMSLotNoByWSLotNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWSLotNoByAMSLotNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetWSLotNoByAMSLotNo(string sAMSLotNo, ref string sMsg) {
            object[] results = this.Invoke("GetWSLotNoByAMSLotNo", new object[] {
                        sAMSLotNo,
                        sMsg});
            sMsg = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWSLotNoByAMSLotNoAsync(string sAMSLotNo, string sMsg) {
            this.GetWSLotNoByAMSLotNoAsync(sAMSLotNo, sMsg, null);
        }
        
        /// <remarks/>
        public void GetWSLotNoByAMSLotNoAsync(string sAMSLotNo, string sMsg, object userState) {
            if ((this.GetWSLotNoByAMSLotNoOperationCompleted == null)) {
                this.GetWSLotNoByAMSLotNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWSLotNoByAMSLotNoOperationCompleted);
            }
            this.InvokeAsync("GetWSLotNoByAMSLotNo", new object[] {
                        sAMSLotNo,
                        sMsg}, this.GetWSLotNoByAMSLotNoOperationCompleted, userState);
        }
        
        private void OnGetWSLotNoByAMSLotNoOperationCompleted(object arg) {
            if ((this.GetWSLotNoByAMSLotNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWSLotNoByAMSLotNoCompleted(this, new GetWSLotNoByAMSLotNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWaferListByCustLotId_Equal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetWaferListByCustLotId_Equal(string sCustLotId, ref bool bSuccess, ref string sMsg) {
            object[] results = this.Invoke("GetWaferListByCustLotId_Equal", new object[] {
                        sCustLotId,
                        bSuccess,
                        sMsg});
            bSuccess = ((bool)(results[1]));
            sMsg = ((string)(results[2]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetWaferListByCustLotId_EqualAsync(string sCustLotId, bool bSuccess, string sMsg) {
            this.GetWaferListByCustLotId_EqualAsync(sCustLotId, bSuccess, sMsg, null);
        }
        
        /// <remarks/>
        public void GetWaferListByCustLotId_EqualAsync(string sCustLotId, bool bSuccess, string sMsg, object userState) {
            if ((this.GetWaferListByCustLotId_EqualOperationCompleted == null)) {
                this.GetWaferListByCustLotId_EqualOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWaferListByCustLotId_EqualOperationCompleted);
            }
            this.InvokeAsync("GetWaferListByCustLotId_Equal", new object[] {
                        sCustLotId,
                        bSuccess,
                        sMsg}, this.GetWaferListByCustLotId_EqualOperationCompleted, userState);
        }
        
        private void OnGetWaferListByCustLotId_EqualOperationCompleted(object arg) {
            if ((this.GetWaferListByCustLotId_EqualCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWaferListByCustLotId_EqualCompleted(this, new GetWaferListByCustLotId_EqualCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWaferListByCustLotId_Like", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetWaferListByCustLotId_Like(string sCustLotId, bool bSuccess, string sMsg) {
            object[] results = this.Invoke("GetWaferListByCustLotId_Like", new object[] {
                        sCustLotId,
                        bSuccess,
                        sMsg});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetWaferListByCustLotId_LikeAsync(string sCustLotId, bool bSuccess, string sMsg) {
            this.GetWaferListByCustLotId_LikeAsync(sCustLotId, bSuccess, sMsg, null);
        }
        
        /// <remarks/>
        public void GetWaferListByCustLotId_LikeAsync(string sCustLotId, bool bSuccess, string sMsg, object userState) {
            if ((this.GetWaferListByCustLotId_LikeOperationCompleted == null)) {
                this.GetWaferListByCustLotId_LikeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWaferListByCustLotId_LikeOperationCompleted);
            }
            this.InvokeAsync("GetWaferListByCustLotId_Like", new object[] {
                        sCustLotId,
                        bSuccess,
                        sMsg}, this.GetWaferListByCustLotId_LikeOperationCompleted, userState);
        }
        
        private void OnGetWaferListByCustLotId_LikeOperationCompleted(object arg) {
            if ((this.GetWaferListByCustLotId_LikeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWaferListByCustLotId_LikeCompleted(this, new GetWaferListByCustLotId_LikeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWaferListByAMSLotId_Equal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetWaferListByAMSLotId_Equal(string sAMSLotId, ref bool bSuccess, ref string sMsg) {
            object[] results = this.Invoke("GetWaferListByAMSLotId_Equal", new object[] {
                        sAMSLotId,
                        bSuccess,
                        sMsg});
            bSuccess = ((bool)(results[1]));
            sMsg = ((string)(results[2]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetWaferListByAMSLotId_EqualAsync(string sAMSLotId, bool bSuccess, string sMsg) {
            this.GetWaferListByAMSLotId_EqualAsync(sAMSLotId, bSuccess, sMsg, null);
        }
        
        /// <remarks/>
        public void GetWaferListByAMSLotId_EqualAsync(string sAMSLotId, bool bSuccess, string sMsg, object userState) {
            if ((this.GetWaferListByAMSLotId_EqualOperationCompleted == null)) {
                this.GetWaferListByAMSLotId_EqualOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWaferListByAMSLotId_EqualOperationCompleted);
            }
            this.InvokeAsync("GetWaferListByAMSLotId_Equal", new object[] {
                        sAMSLotId,
                        bSuccess,
                        sMsg}, this.GetWaferListByAMSLotId_EqualOperationCompleted, userState);
        }
        
        private void OnGetWaferListByAMSLotId_EqualOperationCompleted(object arg) {
            if ((this.GetWaferListByAMSLotId_EqualCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWaferListByAMSLotId_EqualCompleted(this, new GetWaferListByAMSLotId_EqualCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWaferListByAMSLotId_Like", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetWaferListByAMSLotId_Like(string sAMSLotId, ref bool bSuccess, ref string sMsg) {
            object[] results = this.Invoke("GetWaferListByAMSLotId_Like", new object[] {
                        sAMSLotId,
                        bSuccess,
                        sMsg});
            bSuccess = ((bool)(results[1]));
            sMsg = ((string)(results[2]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetWaferListByAMSLotId_LikeAsync(string sAMSLotId, bool bSuccess, string sMsg) {
            this.GetWaferListByAMSLotId_LikeAsync(sAMSLotId, bSuccess, sMsg, null);
        }
        
        /// <remarks/>
        public void GetWaferListByAMSLotId_LikeAsync(string sAMSLotId, bool bSuccess, string sMsg, object userState) {
            if ((this.GetWaferListByAMSLotId_LikeOperationCompleted == null)) {
                this.GetWaferListByAMSLotId_LikeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWaferListByAMSLotId_LikeOperationCompleted);
            }
            this.InvokeAsync("GetWaferListByAMSLotId_Like", new object[] {
                        sAMSLotId,
                        bSuccess,
                        sMsg}, this.GetWaferListByAMSLotId_LikeOperationCompleted, userState);
        }
        
        private void OnGetWaferListByAMSLotId_LikeOperationCompleted(object arg) {
            if ((this.GetWaferListByAMSLotId_LikeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWaferListByAMSLotId_LikeCompleted(this, new GetWaferListByAMSLotId_LikeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllSubLotByAMSLotId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllSubLotByAMSLotId(string sAMSLotId, ref bool bSuccess, ref string sMsg) {
            object[] results = this.Invoke("GetAllSubLotByAMSLotId", new object[] {
                        sAMSLotId,
                        bSuccess,
                        sMsg});
            bSuccess = ((bool)(results[1]));
            sMsg = ((string)(results[2]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllSubLotByAMSLotIdAsync(string sAMSLotId, bool bSuccess, string sMsg) {
            this.GetAllSubLotByAMSLotIdAsync(sAMSLotId, bSuccess, sMsg, null);
        }
        
        /// <remarks/>
        public void GetAllSubLotByAMSLotIdAsync(string sAMSLotId, bool bSuccess, string sMsg, object userState) {
            if ((this.GetAllSubLotByAMSLotIdOperationCompleted == null)) {
                this.GetAllSubLotByAMSLotIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSubLotByAMSLotIdOperationCompleted);
            }
            this.InvokeAsync("GetAllSubLotByAMSLotId", new object[] {
                        sAMSLotId,
                        bSuccess,
                        sMsg}, this.GetAllSubLotByAMSLotIdOperationCompleted, userState);
        }
        
        private void OnGetAllSubLotByAMSLotIdOperationCompleted(object arg) {
            if ((this.GetAllSubLotByAMSLotIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllSubLotByAMSLotIdCompleted(this, new GetAllSubLotByAMSLotIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustLotIDbyWaferId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCustLotIDbyWaferId(string sWaferId, ref bool bSuccess, ref string sMsg) {
            object[] results = this.Invoke("GetCustLotIDbyWaferId", new object[] {
                        sWaferId,
                        bSuccess,
                        sMsg});
            bSuccess = ((bool)(results[1]));
            sMsg = ((string)(results[2]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustLotIDbyWaferIdAsync(string sWaferId, bool bSuccess, string sMsg) {
            this.GetCustLotIDbyWaferIdAsync(sWaferId, bSuccess, sMsg, null);
        }
        
        /// <remarks/>
        public void GetCustLotIDbyWaferIdAsync(string sWaferId, bool bSuccess, string sMsg, object userState) {
            if ((this.GetCustLotIDbyWaferIdOperationCompleted == null)) {
                this.GetCustLotIDbyWaferIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustLotIDbyWaferIdOperationCompleted);
            }
            this.InvokeAsync("GetCustLotIDbyWaferId", new object[] {
                        sWaferId,
                        bSuccess,
                        sMsg}, this.GetCustLotIDbyWaferIdOperationCompleted, userState);
        }
        
        private void OnGetCustLotIDbyWaferIdOperationCompleted(object arg) {
            if ((this.GetCustLotIDbyWaferIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustLotIDbyWaferIdCompleted(this, new GetCustLotIDbyWaferIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMachineNameByAMSLotId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetMachineNameByAMSLotId(string sAMSLotId, string sOperation, ref bool bSuccess, ref string sMsg) {
            object[] results = this.Invoke("GetMachineNameByAMSLotId", new object[] {
                        sAMSLotId,
                        sOperation,
                        bSuccess,
                        sMsg});
            bSuccess = ((bool)(results[1]));
            sMsg = ((string)(results[2]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetMachineNameByAMSLotIdAsync(string sAMSLotId, string sOperation, bool bSuccess, string sMsg) {
            this.GetMachineNameByAMSLotIdAsync(sAMSLotId, sOperation, bSuccess, sMsg, null);
        }
        
        /// <remarks/>
        public void GetMachineNameByAMSLotIdAsync(string sAMSLotId, string sOperation, bool bSuccess, string sMsg, object userState) {
            if ((this.GetMachineNameByAMSLotIdOperationCompleted == null)) {
                this.GetMachineNameByAMSLotIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMachineNameByAMSLotIdOperationCompleted);
            }
            this.InvokeAsync("GetMachineNameByAMSLotId", new object[] {
                        sAMSLotId,
                        sOperation,
                        bSuccess,
                        sMsg}, this.GetMachineNameByAMSLotIdOperationCompleted, userState);
        }
        
        private void OnGetMachineNameByAMSLotIdOperationCompleted(object arg) {
            if ((this.GetMachineNameByAMSLotIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMachineNameByAMSLotIdCompleted(this, new GetMachineNameByAMSLotIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAMSLotInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAMSLotInfo(string sAMSLotId, ref bool bSuccess, ref string sMsg) {
            object[] results = this.Invoke("GetAMSLotInfo", new object[] {
                        sAMSLotId,
                        bSuccess,
                        sMsg});
            bSuccess = ((bool)(results[1]));
            sMsg = ((string)(results[2]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAMSLotInfoAsync(string sAMSLotId, bool bSuccess, string sMsg) {
            this.GetAMSLotInfoAsync(sAMSLotId, bSuccess, sMsg, null);
        }
        
        /// <remarks/>
        public void GetAMSLotInfoAsync(string sAMSLotId, bool bSuccess, string sMsg, object userState) {
            if ((this.GetAMSLotInfoOperationCompleted == null)) {
                this.GetAMSLotInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAMSLotInfoOperationCompleted);
            }
            this.InvokeAsync("GetAMSLotInfo", new object[] {
                        sAMSLotId,
                        bSuccess,
                        sMsg}, this.GetAMSLotInfoOperationCompleted, userState);
        }
        
        private void OnGetAMSLotInfoOperationCompleted(object arg) {
            if ((this.GetAMSLotInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAMSLotInfoCompleted(this, new GetAMSLotInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTIIASN_DSByBatchNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTIIASN_DSByBatchNumber(string sBatchNumber, ref bool bSuccess, ref string sMsg) {
            object[] results = this.Invoke("GetTIIASN_DSByBatchNumber", new object[] {
                        sBatchNumber,
                        bSuccess,
                        sMsg});
            bSuccess = ((bool)(results[1]));
            sMsg = ((string)(results[2]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTIIASN_DSByBatchNumberAsync(string sBatchNumber, bool bSuccess, string sMsg) {
            this.GetTIIASN_DSByBatchNumberAsync(sBatchNumber, bSuccess, sMsg, null);
        }
        
        /// <remarks/>
        public void GetTIIASN_DSByBatchNumberAsync(string sBatchNumber, bool bSuccess, string sMsg, object userState) {
            if ((this.GetTIIASN_DSByBatchNumberOperationCompleted == null)) {
                this.GetTIIASN_DSByBatchNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTIIASN_DSByBatchNumberOperationCompleted);
            }
            this.InvokeAsync("GetTIIASN_DSByBatchNumber", new object[] {
                        sBatchNumber,
                        bSuccess,
                        sMsg}, this.GetTIIASN_DSByBatchNumberOperationCompleted, userState);
        }
        
        private void OnGetTIIASN_DSByBatchNumberOperationCompleted(object arg) {
            if ((this.GetTIIASN_DSByBatchNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTIIASN_DSByBatchNumberCompleted(this, new GetTIIASN_DSByBatchNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LotHold_API_ByAMSLotId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LotHold_API_ByAMSLotId(string sAMSLotId, ref string sMsg, string sHoldComments, string sHoldReason) {
            object[] results = this.Invoke("LotHold_API_ByAMSLotId", new object[] {
                        sAMSLotId,
                        sMsg,
                        sHoldComments,
                        sHoldReason});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LotHold_API_ByAMSLotIdAsync(string sAMSLotId, string sMsg, string sHoldComments, string sHoldReason) {
            this.LotHold_API_ByAMSLotIdAsync(sAMSLotId, sMsg, sHoldComments, sHoldReason, null);
        }
        
        /// <remarks/>
        public void LotHold_API_ByAMSLotIdAsync(string sAMSLotId, string sMsg, string sHoldComments, string sHoldReason, object userState) {
            if ((this.LotHold_API_ByAMSLotIdOperationCompleted == null)) {
                this.LotHold_API_ByAMSLotIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLotHold_API_ByAMSLotIdOperationCompleted);
            }
            this.InvokeAsync("LotHold_API_ByAMSLotId", new object[] {
                        sAMSLotId,
                        sMsg,
                        sHoldComments,
                        sHoldReason}, this.LotHold_API_ByAMSLotIdOperationCompleted, userState);
        }
        
        private void OnLotHold_API_ByAMSLotIdOperationCompleted(object arg) {
            if ((this.LotHold_API_ByAMSLotIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LotHold_API_ByAMSLotIdCompleted(this, new LotHold_API_ByAMSLotIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LotHold_API_ByAMSLotIdwithUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LotHold_API_ByAMSLotIdwithUser(string sAMSLotId, ref string sMsg, string sHoldComments, string sHoldReason, string sFromSYS, string sUserName) {
            object[] results = this.Invoke("LotHold_API_ByAMSLotIdwithUser", new object[] {
                        sAMSLotId,
                        sMsg,
                        sHoldComments,
                        sHoldReason,
                        sFromSYS,
                        sUserName});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LotHold_API_ByAMSLotIdwithUserAsync(string sAMSLotId, string sMsg, string sHoldComments, string sHoldReason, string sFromSYS, string sUserName) {
            this.LotHold_API_ByAMSLotIdwithUserAsync(sAMSLotId, sMsg, sHoldComments, sHoldReason, sFromSYS, sUserName, null);
        }
        
        /// <remarks/>
        public void LotHold_API_ByAMSLotIdwithUserAsync(string sAMSLotId, string sMsg, string sHoldComments, string sHoldReason, string sFromSYS, string sUserName, object userState) {
            if ((this.LotHold_API_ByAMSLotIdwithUserOperationCompleted == null)) {
                this.LotHold_API_ByAMSLotIdwithUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLotHold_API_ByAMSLotIdwithUserOperationCompleted);
            }
            this.InvokeAsync("LotHold_API_ByAMSLotIdwithUser", new object[] {
                        sAMSLotId,
                        sMsg,
                        sHoldComments,
                        sHoldReason,
                        sFromSYS,
                        sUserName}, this.LotHold_API_ByAMSLotIdwithUserOperationCompleted, userState);
        }
        
        private void OnLotHold_API_ByAMSLotIdwithUserOperationCompleted(object arg) {
            if ((this.LotHold_API_ByAMSLotIdwithUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LotHold_API_ByAMSLotIdwithUserCompleted(this, new LotHold_API_ByAMSLotIdwithUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LotRelease_API_ByAMSLotId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LotRelease_API_ByAMSLotId(string sAMSLotId, ref string sMsg, string sComments, string sFromSYS) {
            object[] results = this.Invoke("LotRelease_API_ByAMSLotId", new object[] {
                        sAMSLotId,
                        sMsg,
                        sComments,
                        sFromSYS});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LotRelease_API_ByAMSLotIdAsync(string sAMSLotId, string sMsg, string sComments, string sFromSYS) {
            this.LotRelease_API_ByAMSLotIdAsync(sAMSLotId, sMsg, sComments, sFromSYS, null);
        }
        
        /// <remarks/>
        public void LotRelease_API_ByAMSLotIdAsync(string sAMSLotId, string sMsg, string sComments, string sFromSYS, object userState) {
            if ((this.LotRelease_API_ByAMSLotIdOperationCompleted == null)) {
                this.LotRelease_API_ByAMSLotIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLotRelease_API_ByAMSLotIdOperationCompleted);
            }
            this.InvokeAsync("LotRelease_API_ByAMSLotId", new object[] {
                        sAMSLotId,
                        sMsg,
                        sComments,
                        sFromSYS}, this.LotRelease_API_ByAMSLotIdOperationCompleted, userState);
        }
        
        private void OnLotRelease_API_ByAMSLotIdOperationCompleted(object arg) {
            if ((this.LotRelease_API_ByAMSLotIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LotRelease_API_ByAMSLotIdCompleted(this, new LotRelease_API_ByAMSLotIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LotRelease_API_ByAMSLotIdwithUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LotRelease_API_ByAMSLotIdwithUser(string sAMSLotId, ref string sMsg, string sComments, string sFromSYS, string sUserName) {
            object[] results = this.Invoke("LotRelease_API_ByAMSLotIdwithUser", new object[] {
                        sAMSLotId,
                        sMsg,
                        sComments,
                        sFromSYS,
                        sUserName});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LotRelease_API_ByAMSLotIdwithUserAsync(string sAMSLotId, string sMsg, string sComments, string sFromSYS, string sUserName) {
            this.LotRelease_API_ByAMSLotIdwithUserAsync(sAMSLotId, sMsg, sComments, sFromSYS, sUserName, null);
        }
        
        /// <remarks/>
        public void LotRelease_API_ByAMSLotIdwithUserAsync(string sAMSLotId, string sMsg, string sComments, string sFromSYS, string sUserName, object userState) {
            if ((this.LotRelease_API_ByAMSLotIdwithUserOperationCompleted == null)) {
                this.LotRelease_API_ByAMSLotIdwithUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLotRelease_API_ByAMSLotIdwithUserOperationCompleted);
            }
            this.InvokeAsync("LotRelease_API_ByAMSLotIdwithUser", new object[] {
                        sAMSLotId,
                        sMsg,
                        sComments,
                        sFromSYS,
                        sUserName}, this.LotRelease_API_ByAMSLotIdwithUserOperationCompleted, userState);
        }
        
        private void OnLotRelease_API_ByAMSLotIdwithUserOperationCompleted(object arg) {
            if ((this.LotRelease_API_ByAMSLotIdwithUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LotRelease_API_ByAMSLotIdwithUserCompleted(this, new LotRelease_API_ByAMSLotIdwithUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LotSplit_API_ByAMSLotId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LotSplit_API_ByAMSLotId(string sAMSLotId, ref string sMsg, int[] iSplitQty, string sComments, string sFromSYS) {
            object[] results = this.Invoke("LotSplit_API_ByAMSLotId", new object[] {
                        sAMSLotId,
                        sMsg,
                        iSplitQty,
                        sComments,
                        sFromSYS});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LotSplit_API_ByAMSLotIdAsync(string sAMSLotId, string sMsg, int[] iSplitQty, string sComments, string sFromSYS) {
            this.LotSplit_API_ByAMSLotIdAsync(sAMSLotId, sMsg, iSplitQty, sComments, sFromSYS, null);
        }
        
        /// <remarks/>
        public void LotSplit_API_ByAMSLotIdAsync(string sAMSLotId, string sMsg, int[] iSplitQty, string sComments, string sFromSYS, object userState) {
            if ((this.LotSplit_API_ByAMSLotIdOperationCompleted == null)) {
                this.LotSplit_API_ByAMSLotIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLotSplit_API_ByAMSLotIdOperationCompleted);
            }
            this.InvokeAsync("LotSplit_API_ByAMSLotId", new object[] {
                        sAMSLotId,
                        sMsg,
                        iSplitQty,
                        sComments,
                        sFromSYS}, this.LotSplit_API_ByAMSLotIdOperationCompleted, userState);
        }
        
        private void OnLotSplit_API_ByAMSLotIdOperationCompleted(object arg) {
            if ((this.LotSplit_API_ByAMSLotIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LotSplit_API_ByAMSLotIdCompleted(this, new LotSplit_API_ByAMSLotIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LotRelease_API_ByAMSLotIdWithHoldComment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LotRelease_API_ByAMSLotIdWithHoldComment(string sAMSLotId, ref string sMsg, string sReleaseComments, string sFromSYS, string sUserName, string sHoldReason, string sHoldComments) {
            object[] results = this.Invoke("LotRelease_API_ByAMSLotIdWithHoldComment", new object[] {
                        sAMSLotId,
                        sMsg,
                        sReleaseComments,
                        sFromSYS,
                        sUserName,
                        sHoldReason,
                        sHoldComments});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LotRelease_API_ByAMSLotIdWithHoldCommentAsync(string sAMSLotId, string sMsg, string sReleaseComments, string sFromSYS, string sUserName, string sHoldReason, string sHoldComments) {
            this.LotRelease_API_ByAMSLotIdWithHoldCommentAsync(sAMSLotId, sMsg, sReleaseComments, sFromSYS, sUserName, sHoldReason, sHoldComments, null);
        }
        
        /// <remarks/>
        public void LotRelease_API_ByAMSLotIdWithHoldCommentAsync(string sAMSLotId, string sMsg, string sReleaseComments, string sFromSYS, string sUserName, string sHoldReason, string sHoldComments, object userState) {
            if ((this.LotRelease_API_ByAMSLotIdWithHoldCommentOperationCompleted == null)) {
                this.LotRelease_API_ByAMSLotIdWithHoldCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLotRelease_API_ByAMSLotIdWithHoldCommentOperationCompleted);
            }
            this.InvokeAsync("LotRelease_API_ByAMSLotIdWithHoldComment", new object[] {
                        sAMSLotId,
                        sMsg,
                        sReleaseComments,
                        sFromSYS,
                        sUserName,
                        sHoldReason,
                        sHoldComments}, this.LotRelease_API_ByAMSLotIdWithHoldCommentOperationCompleted, userState);
        }
        
        private void OnLotRelease_API_ByAMSLotIdWithHoldCommentOperationCompleted(object arg) {
            if ((this.LotRelease_API_ByAMSLotIdWithHoldCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LotRelease_API_ByAMSLotIdWithHoldCommentCompleted(this, new LotRelease_API_ByAMSLotIdWithHoldCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateEDATAReplyStatusFor8H", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateEDATAReplyStatusFor8H(string pProcessType, string pCustLotId, string pReplyTime, string pReplyStatus, ref string sMsg) {
            object[] results = this.Invoke("UpdateEDATAReplyStatusFor8H", new object[] {
                        pProcessType,
                        pCustLotId,
                        pReplyTime,
                        pReplyStatus,
                        sMsg});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateEDATAReplyStatusFor8HAsync(string pProcessType, string pCustLotId, string pReplyTime, string pReplyStatus, string sMsg) {
            this.UpdateEDATAReplyStatusFor8HAsync(pProcessType, pCustLotId, pReplyTime, pReplyStatus, sMsg, null);
        }
        
        /// <remarks/>
        public void UpdateEDATAReplyStatusFor8HAsync(string pProcessType, string pCustLotId, string pReplyTime, string pReplyStatus, string sMsg, object userState) {
            if ((this.UpdateEDATAReplyStatusFor8HOperationCompleted == null)) {
                this.UpdateEDATAReplyStatusFor8HOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEDATAReplyStatusFor8HOperationCompleted);
            }
            this.InvokeAsync("UpdateEDATAReplyStatusFor8H", new object[] {
                        pProcessType,
                        pCustLotId,
                        pReplyTime,
                        pReplyStatus,
                        sMsg}, this.UpdateEDATAReplyStatusFor8HOperationCompleted, userState);
        }
        
        private void OnUpdateEDATAReplyStatusFor8HOperationCompleted(object arg) {
            if ((this.UpdateEDATAReplyStatusFor8HCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEDATAReplyStatusFor8HCompleted(this, new UpdateEDATAReplyStatusFor8HCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateEDATAConvertStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateEDATAConvertStatus(string pCustLotId, string pCustPT, string pConvertFlag, ref string sMsg) {
            object[] results = this.Invoke("UpdateEDATAConvertStatus", new object[] {
                        pCustLotId,
                        pCustPT,
                        pConvertFlag,
                        sMsg});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateEDATAConvertStatusAsync(string pCustLotId, string pCustPT, string pConvertFlag, string sMsg) {
            this.UpdateEDATAConvertStatusAsync(pCustLotId, pCustPT, pConvertFlag, sMsg, null);
        }
        
        /// <remarks/>
        public void UpdateEDATAConvertStatusAsync(string pCustLotId, string pCustPT, string pConvertFlag, string sMsg, object userState) {
            if ((this.UpdateEDATAConvertStatusOperationCompleted == null)) {
                this.UpdateEDATAConvertStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEDATAConvertStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateEDATAConvertStatus", new object[] {
                        pCustLotId,
                        pCustPT,
                        pConvertFlag,
                        sMsg}, this.UpdateEDATAConvertStatusOperationCompleted, userState);
        }
        
        private void OnUpdateEDATAConvertStatusOperationCompleted(object arg) {
            if ((this.UpdateEDATAConvertStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEDATAConvertStatusCompleted(this, new UpdateEDATAConvertStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateEDATAConvertInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateEDATAConvertInfo(string pCustLotId, string pCustPT, string pConvertTime, string pConvertQty, string pConvertWaferId, ref string sMsg) {
            object[] results = this.Invoke("UpdateEDATAConvertInfo", new object[] {
                        pCustLotId,
                        pCustPT,
                        pConvertTime,
                        pConvertQty,
                        pConvertWaferId,
                        sMsg});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateEDATAConvertInfoAsync(string pCustLotId, string pCustPT, string pConvertTime, string pConvertQty, string pConvertWaferId, string sMsg) {
            this.UpdateEDATAConvertInfoAsync(pCustLotId, pCustPT, pConvertTime, pConvertQty, pConvertWaferId, sMsg, null);
        }
        
        /// <remarks/>
        public void UpdateEDATAConvertInfoAsync(string pCustLotId, string pCustPT, string pConvertTime, string pConvertQty, string pConvertWaferId, string sMsg, object userState) {
            if ((this.UpdateEDATAConvertInfoOperationCompleted == null)) {
                this.UpdateEDATAConvertInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEDATAConvertInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateEDATAConvertInfo", new object[] {
                        pCustLotId,
                        pCustPT,
                        pConvertTime,
                        pConvertQty,
                        pConvertWaferId,
                        sMsg}, this.UpdateEDATAConvertInfoOperationCompleted, userState);
        }
        
        private void OnUpdateEDATAConvertInfoOperationCompleted(object arg) {
            if ((this.UpdateEDATAConvertInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEDATAConvertInfoCompleted(this, new UpdateEDATAConvertInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateEDATAUploadStatus2Null", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateEDATAUploadStatus2Null(string pAMSLot, string pCustPT) {
            object[] results = this.Invoke("UpdateEDATAUploadStatus2Null", new object[] {
                        pAMSLot,
                        pCustPT});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateEDATAUploadStatus2NullAsync(string pAMSLot, string pCustPT) {
            this.UpdateEDATAUploadStatus2NullAsync(pAMSLot, pCustPT, null);
        }
        
        /// <remarks/>
        public void UpdateEDATAUploadStatus2NullAsync(string pAMSLot, string pCustPT, object userState) {
            if ((this.UpdateEDATAUploadStatus2NullOperationCompleted == null)) {
                this.UpdateEDATAUploadStatus2NullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEDATAUploadStatus2NullOperationCompleted);
            }
            this.InvokeAsync("UpdateEDATAUploadStatus2Null", new object[] {
                        pAMSLot,
                        pCustPT}, this.UpdateEDATAUploadStatus2NullOperationCompleted, userState);
        }
        
        private void OnUpdateEDATAUploadStatus2NullOperationCompleted(object arg) {
            if ((this.UpdateEDATAUploadStatus2NullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEDATAUploadStatus2NullCompleted(this, new UpdateEDATAUploadStatus2NullCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateEDATAReplyStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateEDATAReplyStatus(string pAMSLot, string pCustPT, string pReplyStatus) {
            object[] results = this.Invoke("UpdateEDATAReplyStatus", new object[] {
                        pAMSLot,
                        pCustPT,
                        pReplyStatus});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateEDATAReplyStatusAsync(string pAMSLot, string pCustPT, string pReplyStatus) {
            this.UpdateEDATAReplyStatusAsync(pAMSLot, pCustPT, pReplyStatus, null);
        }
        
        /// <remarks/>
        public void UpdateEDATAReplyStatusAsync(string pAMSLot, string pCustPT, string pReplyStatus, object userState) {
            if ((this.UpdateEDATAReplyStatusOperationCompleted == null)) {
                this.UpdateEDATAReplyStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEDATAReplyStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateEDATAReplyStatus", new object[] {
                        pAMSLot,
                        pCustPT,
                        pReplyStatus}, this.UpdateEDATAReplyStatusOperationCompleted, userState);
        }
        
        private void OnUpdateEDATAReplyStatusOperationCompleted(object arg) {
            if ((this.UpdateEDATAReplyStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEDATAReplyStatusCompleted(this, new UpdateEDATAReplyStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EDataFrozen", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EDataFrozen(string sLotNo) {
            object[] results = this.Invoke("EDataFrozen", new object[] {
                        sLotNo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EDataFrozenAsync(string sLotNo) {
            this.EDataFrozenAsync(sLotNo, null);
        }
        
        /// <remarks/>
        public void EDataFrozenAsync(string sLotNo, object userState) {
            if ((this.EDataFrozenOperationCompleted == null)) {
                this.EDataFrozenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEDataFrozenOperationCompleted);
            }
            this.InvokeAsync("EDataFrozen", new object[] {
                        sLotNo}, this.EDataFrozenOperationCompleted, userState);
        }
        
        private void OnEDataFrozenOperationCompleted(object arg) {
            if ((this.EDataFrozenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EDataFrozenCompleted(this, new EDataFrozenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEDC_Time_OperatorByType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetEDC_Time_OperatorByType(string sAMSLotID, string sType, ref string sTime, ref string sOperator) {
            object[] results = this.Invoke("GetEDC_Time_OperatorByType", new object[] {
                        sAMSLotID,
                        sType,
                        sTime,
                        sOperator});
            sTime = ((string)(results[1]));
            sOperator = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetEDC_Time_OperatorByTypeAsync(string sAMSLotID, string sType, string sTime, string sOperator) {
            this.GetEDC_Time_OperatorByTypeAsync(sAMSLotID, sType, sTime, sOperator, null);
        }
        
        /// <remarks/>
        public void GetEDC_Time_OperatorByTypeAsync(string sAMSLotID, string sType, string sTime, string sOperator, object userState) {
            if ((this.GetEDC_Time_OperatorByTypeOperationCompleted == null)) {
                this.GetEDC_Time_OperatorByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEDC_Time_OperatorByTypeOperationCompleted);
            }
            this.InvokeAsync("GetEDC_Time_OperatorByType", new object[] {
                        sAMSLotID,
                        sType,
                        sTime,
                        sOperator}, this.GetEDC_Time_OperatorByTypeOperationCompleted, userState);
        }
        
        private void OnGetEDC_Time_OperatorByTypeOperationCompleted(object arg) {
            if ((this.GetEDC_Time_OperatorByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEDC_Time_OperatorByTypeCompleted(this, new GetEDC_Time_OperatorByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEDC_DataByType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetEDC_DataByType(string sAMSLotID, string sType, ref string sRealLotID, string sWaferID) {
            object[] results = this.Invoke("GetEDC_DataByType", new object[] {
                        sAMSLotID,
                        sType,
                        sRealLotID,
                        sWaferID});
            sRealLotID = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetEDC_DataByTypeAsync(string sAMSLotID, string sType, string sRealLotID, string sWaferID) {
            this.GetEDC_DataByTypeAsync(sAMSLotID, sType, sRealLotID, sWaferID, null);
        }
        
        /// <remarks/>
        public void GetEDC_DataByTypeAsync(string sAMSLotID, string sType, string sRealLotID, string sWaferID, object userState) {
            if ((this.GetEDC_DataByTypeOperationCompleted == null)) {
                this.GetEDC_DataByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEDC_DataByTypeOperationCompleted);
            }
            this.InvokeAsync("GetEDC_DataByType", new object[] {
                        sAMSLotID,
                        sType,
                        sRealLotID,
                        sWaferID}, this.GetEDC_DataByTypeOperationCompleted, userState);
        }
        
        private void OnGetEDC_DataByTypeOperationCompleted(object arg) {
            if ((this.GetEDC_DataByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEDC_DataByTypeCompleted(this, new GetEDC_DataByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWaferDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateWaferDetails(string sXML, string sAMSLotId, ref string sMsg) {
            object[] results = this.Invoke("UpdateWaferDetails", new object[] {
                        sXML,
                        sAMSLotId,
                        sMsg});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateWaferDetailsAsync(string sXML, string sAMSLotId, string sMsg) {
            this.UpdateWaferDetailsAsync(sXML, sAMSLotId, sMsg, null);
        }
        
        /// <remarks/>
        public void UpdateWaferDetailsAsync(string sXML, string sAMSLotId, string sMsg, object userState) {
            if ((this.UpdateWaferDetailsOperationCompleted == null)) {
                this.UpdateWaferDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWaferDetailsOperationCompleted);
            }
            this.InvokeAsync("UpdateWaferDetails", new object[] {
                        sXML,
                        sAMSLotId,
                        sMsg}, this.UpdateWaferDetailsOperationCompleted, userState);
        }
        
        private void OnUpdateWaferDetailsOperationCompleted(object arg) {
            if ((this.UpdateWaferDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWaferDetailsCompleted(this, new UpdateWaferDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWaferDetailsWithBin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateWaferDetailsWithBin(string sXML, string sAMSLotId, string sMsg) {
            object[] results = this.Invoke("UpdateWaferDetailsWithBin", new object[] {
                        sXML,
                        sAMSLotId,
                        sMsg});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateWaferDetailsWithBinAsync(string sXML, string sAMSLotId, string sMsg) {
            this.UpdateWaferDetailsWithBinAsync(sXML, sAMSLotId, sMsg, null);
        }
        
        /// <remarks/>
        public void UpdateWaferDetailsWithBinAsync(string sXML, string sAMSLotId, string sMsg, object userState) {
            if ((this.UpdateWaferDetailsWithBinOperationCompleted == null)) {
                this.UpdateWaferDetailsWithBinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWaferDetailsWithBinOperationCompleted);
            }
            this.InvokeAsync("UpdateWaferDetailsWithBin", new object[] {
                        sXML,
                        sAMSLotId,
                        sMsg}, this.UpdateWaferDetailsWithBinOperationCompleted, userState);
        }
        
        private void OnUpdateWaferDetailsWithBinOperationCompleted(object arg) {
            if ((this.UpdateWaferDetailsWithBinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWaferDetailsWithBinCompleted(this, new UpdateWaferDetailsWithBinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EData_UPDWaferID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EData_UPDWaferID(string sXML, string sAMSLotId, ref string sMsg) {
            object[] results = this.Invoke("EData_UPDWaferID", new object[] {
                        sXML,
                        sAMSLotId,
                        sMsg});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EData_UPDWaferIDAsync(string sXML, string sAMSLotId, string sMsg) {
            this.EData_UPDWaferIDAsync(sXML, sAMSLotId, sMsg, null);
        }
        
        /// <remarks/>
        public void EData_UPDWaferIDAsync(string sXML, string sAMSLotId, string sMsg, object userState) {
            if ((this.EData_UPDWaferIDOperationCompleted == null)) {
                this.EData_UPDWaferIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEData_UPDWaferIDOperationCompleted);
            }
            this.InvokeAsync("EData_UPDWaferID", new object[] {
                        sXML,
                        sAMSLotId,
                        sMsg}, this.EData_UPDWaferIDOperationCompleted, userState);
        }
        
        private void OnEData_UPDWaferIDOperationCompleted(object arg) {
            if ((this.EData_UPDWaferIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EData_UPDWaferIDCompleted(this, new EData_UPDWaferIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EData_FQC_RPT_Success", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EData_FQC_RPT_Success(string sAMSLotID, ref string sMsg) {
            object[] results = this.Invoke("EData_FQC_RPT_Success", new object[] {
                        sAMSLotID,
                        sMsg});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EData_FQC_RPT_SuccessAsync(string sAMSLotID, string sMsg) {
            this.EData_FQC_RPT_SuccessAsync(sAMSLotID, sMsg, null);
        }
        
        /// <remarks/>
        public void EData_FQC_RPT_SuccessAsync(string sAMSLotID, string sMsg, object userState) {
            if ((this.EData_FQC_RPT_SuccessOperationCompleted == null)) {
                this.EData_FQC_RPT_SuccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEData_FQC_RPT_SuccessOperationCompleted);
            }
            this.InvokeAsync("EData_FQC_RPT_Success", new object[] {
                        sAMSLotID,
                        sMsg}, this.EData_FQC_RPT_SuccessOperationCompleted, userState);
        }
        
        private void OnEData_FQC_RPT_SuccessOperationCompleted(object arg) {
            if ((this.EData_FQC_RPT_SuccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EData_FQC_RPT_SuccessCompleted(this, new EData_FQC_RPT_SuccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckBumpMapFilesAndFolder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckBumpMapFilesAndFolder(string pProcessLot, string pCombineType, string pSubFolder, string pWaferDetails, ref string pRetMsg) {
            object[] results = this.Invoke("CheckBumpMapFilesAndFolder", new object[] {
                        pProcessLot,
                        pCombineType,
                        pSubFolder,
                        pWaferDetails,
                        pRetMsg});
            pRetMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckBumpMapFilesAndFolderAsync(string pProcessLot, string pCombineType, string pSubFolder, string pWaferDetails, string pRetMsg) {
            this.CheckBumpMapFilesAndFolderAsync(pProcessLot, pCombineType, pSubFolder, pWaferDetails, pRetMsg, null);
        }
        
        /// <remarks/>
        public void CheckBumpMapFilesAndFolderAsync(string pProcessLot, string pCombineType, string pSubFolder, string pWaferDetails, string pRetMsg, object userState) {
            if ((this.CheckBumpMapFilesAndFolderOperationCompleted == null)) {
                this.CheckBumpMapFilesAndFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckBumpMapFilesAndFolderOperationCompleted);
            }
            this.InvokeAsync("CheckBumpMapFilesAndFolder", new object[] {
                        pProcessLot,
                        pCombineType,
                        pSubFolder,
                        pWaferDetails,
                        pRetMsg}, this.CheckBumpMapFilesAndFolderOperationCompleted, userState);
        }
        
        private void OnCheckBumpMapFilesAndFolderOperationCompleted(object arg) {
            if ((this.CheckBumpMapFilesAndFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckBumpMapFilesAndFolderCompleted(this, new CheckBumpMapFilesAndFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveBumpMapCombineFiles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveBumpMapCombineFiles(string pProcessLot, string pCombineType, bool pQueryByORGLOT) {
            object[] results = this.Invoke("RetrieveBumpMapCombineFiles", new object[] {
                        pProcessLot,
                        pCombineType,
                        pQueryByORGLOT});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveBumpMapCombineFilesAsync(string pProcessLot, string pCombineType, bool pQueryByORGLOT) {
            this.RetrieveBumpMapCombineFilesAsync(pProcessLot, pCombineType, pQueryByORGLOT, null);
        }
        
        /// <remarks/>
        public void RetrieveBumpMapCombineFilesAsync(string pProcessLot, string pCombineType, bool pQueryByORGLOT, object userState) {
            if ((this.RetrieveBumpMapCombineFilesOperationCompleted == null)) {
                this.RetrieveBumpMapCombineFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveBumpMapCombineFilesOperationCompleted);
            }
            this.InvokeAsync("RetrieveBumpMapCombineFiles", new object[] {
                        pProcessLot,
                        pCombineType,
                        pQueryByORGLOT}, this.RetrieveBumpMapCombineFilesOperationCompleted, userState);
        }
        
        private void OnRetrieveBumpMapCombineFilesOperationCompleted(object arg) {
            if ((this.RetrieveBumpMapCombineFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveBumpMapCombineFilesCompleted(this, new RetrieveBumpMapCombineFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckBumpMapSampling", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckBumpMapSampling(string pProcessLot, string pCombineType) {
            object[] results = this.Invoke("CheckBumpMapSampling", new object[] {
                        pProcessLot,
                        pCombineType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckBumpMapSamplingAsync(string pProcessLot, string pCombineType) {
            this.CheckBumpMapSamplingAsync(pProcessLot, pCombineType, null);
        }
        
        /// <remarks/>
        public void CheckBumpMapSamplingAsync(string pProcessLot, string pCombineType, object userState) {
            if ((this.CheckBumpMapSamplingOperationCompleted == null)) {
                this.CheckBumpMapSamplingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckBumpMapSamplingOperationCompleted);
            }
            this.InvokeAsync("CheckBumpMapSampling", new object[] {
                        pProcessLot,
                        pCombineType}, this.CheckBumpMapSamplingOperationCompleted, userState);
        }
        
        private void OnCheckBumpMapSamplingOperationCompleted(object arg) {
            if ((this.CheckBumpMapSamplingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckBumpMapSamplingCompleted(this, new CheckBumpMapSamplingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetF054_StdLogReportByLot", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetF054_StdLogReportByLot(string asParam) {
            object[] results = this.Invoke("GetF054_StdLogReportByLot", new object[] {
                        asParam});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetF054_StdLogReportByLotAsync(string asParam) {
            this.GetF054_StdLogReportByLotAsync(asParam, null);
        }
        
        /// <remarks/>
        public void GetF054_StdLogReportByLotAsync(string asParam, object userState) {
            if ((this.GetF054_StdLogReportByLotOperationCompleted == null)) {
                this.GetF054_StdLogReportByLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetF054_StdLogReportByLotOperationCompleted);
            }
            this.InvokeAsync("GetF054_StdLogReportByLot", new object[] {
                        asParam}, this.GetF054_StdLogReportByLotOperationCompleted, userState);
        }
        
        private void OnGetF054_StdLogReportByLotOperationCompleted(object arg) {
            if ((this.GetF054_StdLogReportByLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetF054_StdLogReportByLotCompleted(this, new GetF054_StdLogReportByLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AETC_RSC_StatusUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AETC_RSC_StatusUpdate(string sXML) {
            object[] results = this.Invoke("AETC_RSC_StatusUpdate", new object[] {
                        sXML});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AETC_RSC_StatusUpdateAsync(string sXML) {
            this.AETC_RSC_StatusUpdateAsync(sXML, null);
        }
        
        /// <remarks/>
        public void AETC_RSC_StatusUpdateAsync(string sXML, object userState) {
            if ((this.AETC_RSC_StatusUpdateOperationCompleted == null)) {
                this.AETC_RSC_StatusUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAETC_RSC_StatusUpdateOperationCompleted);
            }
            this.InvokeAsync("AETC_RSC_StatusUpdate", new object[] {
                        sXML}, this.AETC_RSC_StatusUpdateOperationCompleted, userState);
        }
        
        private void OnAETC_RSC_StatusUpdateOperationCompleted(object arg) {
            if ((this.AETC_RSC_StatusUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AETC_RSC_StatusUpdateCompleted(this, new AETC_RSC_StatusUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PLAT_RSC_StatusUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PLAT_RSC_StatusUpdate(string sXML) {
            object[] results = this.Invoke("PLAT_RSC_StatusUpdate", new object[] {
                        sXML});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PLAT_RSC_StatusUpdateAsync(string sXML) {
            this.PLAT_RSC_StatusUpdateAsync(sXML, null);
        }
        
        /// <remarks/>
        public void PLAT_RSC_StatusUpdateAsync(string sXML, object userState) {
            if ((this.PLAT_RSC_StatusUpdateOperationCompleted == null)) {
                this.PLAT_RSC_StatusUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPLAT_RSC_StatusUpdateOperationCompleted);
            }
            this.InvokeAsync("PLAT_RSC_StatusUpdate", new object[] {
                        sXML}, this.PLAT_RSC_StatusUpdateOperationCompleted, userState);
        }
        
        private void OnPLAT_RSC_StatusUpdateOperationCompleted(object arg) {
            if ((this.PLAT_RSC_StatusUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PLAT_RSC_StatusUpdateCompleted(this, new PLAT_RSC_StatusUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ATT_FC_FileTmpeMaint", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ATT_FC_FileTmpeMaint(string sType, string sName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bContent) {
            object[] results = this.Invoke("ATT_FC_FileTmpeMaint", new object[] {
                        sType,
                        sName,
                        bContent});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ATT_FC_FileTmpeMaintAsync(string sType, string sName, byte[] bContent) {
            this.ATT_FC_FileTmpeMaintAsync(sType, sName, bContent, null);
        }
        
        /// <remarks/>
        public void ATT_FC_FileTmpeMaintAsync(string sType, string sName, byte[] bContent, object userState) {
            if ((this.ATT_FC_FileTmpeMaintOperationCompleted == null)) {
                this.ATT_FC_FileTmpeMaintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnATT_FC_FileTmpeMaintOperationCompleted);
            }
            this.InvokeAsync("ATT_FC_FileTmpeMaint", new object[] {
                        sType,
                        sName,
                        bContent}, this.ATT_FC_FileTmpeMaintOperationCompleted, userState);
        }
        
        private void OnATT_FC_FileTmpeMaintOperationCompleted(object arg) {
            if ((this.ATT_FC_FileTmpeMaintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ATT_FC_FileTmpeMaintCompleted(this, new ATT_FC_FileTmpeMaintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ATT_FC_GetFileTmpe", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ATT_FC_GetFileTmpe(string sName) {
            object[] results = this.Invoke("ATT_FC_GetFileTmpe", new object[] {
                        sName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void ATT_FC_GetFileTmpeAsync(string sName) {
            this.ATT_FC_GetFileTmpeAsync(sName, null);
        }
        
        /// <remarks/>
        public void ATT_FC_GetFileTmpeAsync(string sName, object userState) {
            if ((this.ATT_FC_GetFileTmpeOperationCompleted == null)) {
                this.ATT_FC_GetFileTmpeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnATT_FC_GetFileTmpeOperationCompleted);
            }
            this.InvokeAsync("ATT_FC_GetFileTmpe", new object[] {
                        sName}, this.ATT_FC_GetFileTmpeOperationCompleted, userState);
        }
        
        private void OnATT_FC_GetFileTmpeOperationCompleted(object arg) {
            if ((this.ATT_FC_GetFileTmpeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ATT_FC_GetFileTmpeCompleted(this, new ATT_FC_GetFileTmpeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ATT_FC_GetRecipe", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ATT_FC_GetRecipe(string sLot) {
            object[] results = this.Invoke("ATT_FC_GetRecipe", new object[] {
                        sLot});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ATT_FC_GetRecipeAsync(string sLot) {
            this.ATT_FC_GetRecipeAsync(sLot, null);
        }
        
        /// <remarks/>
        public void ATT_FC_GetRecipeAsync(string sLot, object userState) {
            if ((this.ATT_FC_GetRecipeOperationCompleted == null)) {
                this.ATT_FC_GetRecipeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnATT_FC_GetRecipeOperationCompleted);
            }
            this.InvokeAsync("ATT_FC_GetRecipe", new object[] {
                        sLot}, this.ATT_FC_GetRecipeOperationCompleted, userState);
        }
        
        private void OnATT_FC_GetRecipeOperationCompleted(object arg) {
            if ((this.ATT_FC_GetRecipeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ATT_FC_GetRecipeCompleted(this, new ATT_FC_GetRecipeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ATT_FCGetSIDBYBD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ATT_FCGetSIDBYBD(string sBD, string sOper) {
            object[] results = this.Invoke("ATT_FCGetSIDBYBD", new object[] {
                        sBD,
                        sOper});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ATT_FCGetSIDBYBDAsync(string sBD, string sOper) {
            this.ATT_FCGetSIDBYBDAsync(sBD, sOper, null);
        }
        
        /// <remarks/>
        public void ATT_FCGetSIDBYBDAsync(string sBD, string sOper, object userState) {
            if ((this.ATT_FCGetSIDBYBDOperationCompleted == null)) {
                this.ATT_FCGetSIDBYBDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnATT_FCGetSIDBYBDOperationCompleted);
            }
            this.InvokeAsync("ATT_FCGetSIDBYBD", new object[] {
                        sBD,
                        sOper}, this.ATT_FCGetSIDBYBDOperationCompleted, userState);
        }
        
        private void OnATT_FCGetSIDBYBDOperationCompleted(object arg) {
            if ((this.ATT_FCGetSIDBYBDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ATT_FCGetSIDBYBDCompleted(this, new ATT_FCGetSIDBYBDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerifyDomainAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool VerifyDomainAccount(string sUserID, string sUserPassword) {
            object[] results = this.Invoke("VerifyDomainAccount", new object[] {
                        sUserID,
                        sUserPassword});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyDomainAccountAsync(string sUserID, string sUserPassword) {
            this.VerifyDomainAccountAsync(sUserID, sUserPassword, null);
        }
        
        /// <remarks/>
        public void VerifyDomainAccountAsync(string sUserID, string sUserPassword, object userState) {
            if ((this.VerifyDomainAccountOperationCompleted == null)) {
                this.VerifyDomainAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyDomainAccountOperationCompleted);
            }
            this.InvokeAsync("VerifyDomainAccount", new object[] {
                        sUserID,
                        sUserPassword}, this.VerifyDomainAccountOperationCompleted, userState);
        }
        
        private void OnVerifyDomainAccountOperationCompleted(object arg) {
            if ((this.VerifyDomainAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyDomainAccountCompleted(this, new VerifyDomainAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerifyDomainAccount2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool VerifyDomainAccount2(string sUserID, string sUserPassword, ref int iExpireIn15Days) {
            object[] results = this.Invoke("VerifyDomainAccount2", new object[] {
                        sUserID,
                        sUserPassword,
                        iExpireIn15Days});
            iExpireIn15Days = ((int)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyDomainAccount2Async(string sUserID, string sUserPassword, int iExpireIn15Days) {
            this.VerifyDomainAccount2Async(sUserID, sUserPassword, iExpireIn15Days, null);
        }
        
        /// <remarks/>
        public void VerifyDomainAccount2Async(string sUserID, string sUserPassword, int iExpireIn15Days, object userState) {
            if ((this.VerifyDomainAccount2OperationCompleted == null)) {
                this.VerifyDomainAccount2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyDomainAccount2OperationCompleted);
            }
            this.InvokeAsync("VerifyDomainAccount2", new object[] {
                        sUserID,
                        sUserPassword,
                        iExpireIn15Days}, this.VerifyDomainAccount2OperationCompleted, userState);
        }
        
        private void OnVerifyDomainAccount2OperationCompleted(object arg) {
            if ((this.VerifyDomainAccount2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyDomainAccount2Completed(this, new VerifyDomainAccount2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainServerIP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDomainServerIP() {
            object[] results = this.Invoke("GetDomainServerIP", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDomainServerIPAsync() {
            this.GetDomainServerIPAsync(null);
        }
        
        /// <remarks/>
        public void GetDomainServerIPAsync(object userState) {
            if ((this.GetDomainServerIPOperationCompleted == null)) {
                this.GetDomainServerIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainServerIPOperationCompleted);
            }
            this.InvokeAsync("GetDomainServerIP", new object[0], this.GetDomainServerIPOperationCompleted, userState);
        }
        
        private void OnGetDomainServerIPOperationCompleted(object arg) {
            if ((this.GetDomainServerIPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainServerIPCompleted(this, new GetDomainServerIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ResetDomainPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ResetDomainPassword(string sUserID, string sUserPassword, string sNewPassword) {
            object[] results = this.Invoke("ResetDomainPassword", new object[] {
                        sUserID,
                        sUserPassword,
                        sNewPassword});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ResetDomainPasswordAsync(string sUserID, string sUserPassword, string sNewPassword) {
            this.ResetDomainPasswordAsync(sUserID, sUserPassword, sNewPassword, null);
        }
        
        /// <remarks/>
        public void ResetDomainPasswordAsync(string sUserID, string sUserPassword, string sNewPassword, object userState) {
            if ((this.ResetDomainPasswordOperationCompleted == null)) {
                this.ResetDomainPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetDomainPasswordOperationCompleted);
            }
            this.InvokeAsync("ResetDomainPassword", new object[] {
                        sUserID,
                        sUserPassword,
                        sNewPassword}, this.ResetDomainPasswordOperationCompleted, userState);
        }
        
        private void OnResetDomainPasswordOperationCompleted(object arg) {
            if ((this.ResetDomainPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetDomainPasswordCompleted(this, new ResetDomainPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEnvInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEnvInfo() {
            object[] results = this.Invoke("GetEnvInfo", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEnvInfoAsync() {
            this.GetEnvInfoAsync(null);
        }
        
        /// <remarks/>
        public void GetEnvInfoAsync(object userState) {
            if ((this.GetEnvInfoOperationCompleted == null)) {
                this.GetEnvInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEnvInfoOperationCompleted);
            }
            this.InvokeAsync("GetEnvInfo", new object[0], this.GetEnvInfoOperationCompleted, userState);
        }
        
        private void OnGetEnvInfoOperationCompleted(object arg) {
            if ((this.GetEnvInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEnvInfoCompleted(this, new GetEnvInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAPIP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAPIP() {
            object[] results = this.Invoke("GetAPIP", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAPIPAsync() {
            this.GetAPIPAsync(null);
        }
        
        /// <remarks/>
        public void GetAPIPAsync(object userState) {
            if ((this.GetAPIPOperationCompleted == null)) {
                this.GetAPIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAPIPOperationCompleted);
            }
            this.InvokeAsync("GetAPIP", new object[0], this.GetAPIPOperationCompleted, userState);
        }
        
        private void OnGetAPIPOperationCompleted(object arg) {
            if ((this.GetAPIPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAPIPCompleted(this, new GetAPIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAPUID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAPUID() {
            object[] results = this.Invoke("GetAPUID", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAPUIDAsync() {
            this.GetAPUIDAsync(null);
        }
        
        /// <remarks/>
        public void GetAPUIDAsync(object userState) {
            if ((this.GetAPUIDOperationCompleted == null)) {
                this.GetAPUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAPUIDOperationCompleted);
            }
            this.InvokeAsync("GetAPUID", new object[0], this.GetAPUIDOperationCompleted, userState);
        }
        
        private void OnGetAPUIDOperationCompleted(object arg) {
            if ((this.GetAPUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAPUIDCompleted(this, new GetAPUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAPPWD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAPPWD() {
            object[] results = this.Invoke("GetAPPWD", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAPPWDAsync() {
            this.GetAPPWDAsync(null);
        }
        
        /// <remarks/>
        public void GetAPPWDAsync(object userState) {
            if ((this.GetAPPWDOperationCompleted == null)) {
                this.GetAPPWDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAPPWDOperationCompleted);
            }
            this.InvokeAsync("GetAPPWD", new object[0], this.GetAPPWDOperationCompleted, userState);
        }
        
        private void OnGetAPPWDOperationCompleted(object arg) {
            if ((this.GetAPPWDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAPPWDCompleted(this, new GetAPPWDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAASIP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAASIP() {
            object[] results = this.Invoke("GetAASIP", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAASIPAsync() {
            this.GetAASIPAsync(null);
        }
        
        /// <remarks/>
        public void GetAASIPAsync(object userState) {
            if ((this.GetAASIPOperationCompleted == null)) {
                this.GetAASIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAASIPOperationCompleted);
            }
            this.InvokeAsync("GetAASIP", new object[0], this.GetAASIPOperationCompleted, userState);
        }
        
        private void OnGetAASIPOperationCompleted(object arg) {
            if ((this.GetAASIPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAASIPCompleted(this, new GetAASIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTime() {
            object[] results = this.Invoke("GetTime", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTimeAsync() {
            this.GetTimeAsync(null);
        }
        
        /// <remarks/>
        public void GetTimeAsync(object userState) {
            if ((this.GetTimeOperationCompleted == null)) {
                this.GetTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTimeOperationCompleted);
            }
            this.InvokeAsync("GetTime", new object[0], this.GetTimeOperationCompleted, userState);
        }
        
        private void OnGetTimeOperationCompleted(object arg) {
            if ((this.GetTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTimeCompleted(this, new GetTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/apiResourceChangeState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string apiResourceChangeState(string sHostName, string sOperID, string sToStatus) {
            object[] results = this.Invoke("apiResourceChangeState", new object[] {
                        sHostName,
                        sOperID,
                        sToStatus});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void apiResourceChangeStateAsync(string sHostName, string sOperID, string sToStatus) {
            this.apiResourceChangeStateAsync(sHostName, sOperID, sToStatus, null);
        }
        
        /// <remarks/>
        public void apiResourceChangeStateAsync(string sHostName, string sOperID, string sToStatus, object userState) {
            if ((this.apiResourceChangeStateOperationCompleted == null)) {
                this.apiResourceChangeStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapiResourceChangeStateOperationCompleted);
            }
            this.InvokeAsync("apiResourceChangeState", new object[] {
                        sHostName,
                        sOperID,
                        sToStatus}, this.apiResourceChangeStateOperationCompleted, userState);
        }
        
        private void OnapiResourceChangeStateOperationCompleted(object arg) {
            if ((this.apiResourceChangeStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.apiResourceChangeStateCompleted(this, new apiResourceChangeStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckEECertificationCompletedEventHandler(object sender, CheckEECertificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckEECertificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckEECertificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAMSCusLotNO_CusNameByUstLotNoCompletedEventHandler(object sender, GetAMSCusLotNO_CusNameByUstLotNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAMSCusLotNO_CusNameByUstLotNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAMSCusLotNO_CusNameByUstLotNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LotDispatch_API_ByAMSLotIdCompletedEventHandler(object sender, LotDispatch_API_ByAMSLotIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LotDispatch_API_ByAMSLotIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LotDispatch_API_ByAMSLotIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ChangeAMSLotAttributeCompletedEventHandler(object sender, ChangeAMSLotAttributeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeAMSLotAttributeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeAMSLotAttributeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetONSEMITestProgramsForBOMCompletedEventHandler(object sender, GetONSEMITestProgramsForBOMCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetONSEMITestProgramsForBOMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetONSEMITestProgramsForBOMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void B2B_QORVO_USP_CHECKCompletedEventHandler(object sender, B2B_QORVO_USP_CHECKCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class B2B_QORVO_USP_CHECKCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal B2B_QORVO_USP_CHECKCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetNPIBulidPlanForAMSCompletedEventHandler(object sender, GetNPIBulidPlanForAMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNPIBulidPlanForAMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNPIBulidPlanForAMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetMCNDeviceCodeForNotesCompletedEventHandler(object sender, GetMCNDeviceCodeForNotesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMCNDeviceCodeForNotesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMCNDeviceCodeForNotesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GenFCMaterialLabelInfoCompletedEventHandler(object sender, GenFCMaterialLabelInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenFCMaterialLabelInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenFCMaterialLabelInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void RCV_NotesCPBOM_NumberCompletedEventHandler(object sender, RCV_NotesCPBOM_NumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RCV_NotesCPBOM_NumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RCV_NotesCPBOM_NumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void RCV_NotesPCN_NumberCompletedEventHandler(object sender, RCV_NotesPCN_NumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RCV_NotesPCN_NumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RCV_NotesPCN_NumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ToGet_TestProgram_EffectiveDateCompletedEventHandler(object sender, ToGet_TestProgram_EffectiveDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ToGet_TestProgram_EffectiveDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ToGet_TestProgram_EffectiveDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPSMData_MaskIDListCompletedEventHandler(object sender, GetPSMData_MaskIDListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPSMData_MaskIDListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPSMData_MaskIDListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetBladeRecipeCompletedEventHandler(object sender, GetBladeRecipeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBladeRecipeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBladeRecipeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void eCIMToMESAlarmCompletedEventHandler(object sender, eCIMToMESAlarmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class eCIMToMESAlarmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal eCIMToMESAlarmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckResourceLogFileCompletedEventHandler(object sender, CheckResourceLogFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckResourceLogFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckResourceLogFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckResourceLogFileForTestCompletedEventHandler(object sender, CheckResourceLogFileForTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckResourceLogFileForTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckResourceLogFileForTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetECLikeSetting_HoldReasonCompletedEventHandler(object sender, GetECLikeSetting_HoldReasonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetECLikeSetting_HoldReasonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetECLikeSetting_HoldReasonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetECLikeSetting_OwnerDepartmentCompletedEventHandler(object sender, GetECLikeSetting_OwnerDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetECLikeSetting_OwnerDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetECLikeSetting_OwnerDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ECLikeAllowSkipCompletedEventHandler(object sender, ECLikeAllowSkipCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ECLikeAllowSkipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ECLikeAllowSkipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ECLikeCheckHaveSettingCompletedEventHandler(object sender, ECLikeCheckHaveSettingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ECLikeCheckHaveSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ECLikeCheckHaveSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetECLikeSetting_IsHoldLotCompletedEventHandler(object sender, GetECLikeSetting_IsHoldLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetECLikeSetting_IsHoldLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetECLikeSetting_IsHoldLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDPTapingRecipeCompletedEventHandler(object sender, GetDPTapingRecipeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDPTapingRecipeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDPTapingRecipeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetRecipeNameCompletedEventHandler(object sender, GetRecipeNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRecipeNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRecipeNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void RecordTestProgramForWSCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetOperInstrCompletedEventHandler(object sender, GetOperInstrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOperInstrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOperInstrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetOperSIDCompletedEventHandler(object sender, GetOperSIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOperSIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOperSIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetOperSID_WithValidateCompletedEventHandler(object sender, GetOperSID_WithValidateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOperSID_WithValidateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOperSID_WithValidateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDPGRINDRecipeCompletedEventHandler(object sender, GetDPGRINDRecipeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDPGRINDRecipeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDPGRINDRecipeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertRawDataCompletedEventHandler(object sender, InsertRawDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertRawDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertRawDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDPPnPRecipeCompletedEventHandler(object sender, GetDPPnPRecipeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDPPnPRecipeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDPPnPRecipeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDPPnPRecipeByParameterCompletedEventHandler(object sender, GetDPPnPRecipeByParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDPPnPRecipeByParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDPPnPRecipeByParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetBSRecipeCompletedEventHandler(object sender, GetBSRecipeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBSRecipeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBSRecipeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetBSRecipeRuncardCompletedEventHandler(object sender, GetBSRecipeRuncardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBSRecipeRuncardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBSRecipeRuncardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetQCLPNCodeCompletedEventHandler(object sender, GetQCLPNCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQCLPNCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQCLPNCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetQCLPNCodeBySiteCompletedEventHandler(object sender, GetQCLPNCodeBySiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQCLPNCodeBySiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQCLPNCodeBySiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetRICHTEKLPNCodeCompletedEventHandler(object sender, GetRICHTEKLPNCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRICHTEKLPNCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRICHTEKLPNCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetMTKLPNCodeCompletedEventHandler(object sender, GetMTKLPNCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMTKLPNCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMTKLPNCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAUDIENCELPNCodeCompletedEventHandler(object sender, GetAUDIENCELPNCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAUDIENCELPNCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAUDIENCELPNCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetSONYLPNCodeCompletedEventHandler(object sender, GetSONYLPNCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSONYLPNCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSONYLPNCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetLotAttributeFieldsCompletedEventHandler(object sender, GetLotAttributeFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLotAttributeFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLotAttributeFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void apiChangeAttributeCompletedEventHandler(object sender, apiChangeAttributeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class apiChangeAttributeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal apiChangeAttributeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GeneraterCustLotIDCompletedEventHandler(object sender, GeneraterCustLotIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneraterCustLotIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeneraterCustLotIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GeneraterDateCodeCompletedEventHandler(object sender, GeneraterDateCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneraterDateCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeneraterDateCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GeneraterTraceCodeCompletedEventHandler(object sender, GeneraterTraceCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneraterTraceCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeneraterTraceCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GeneratorWaferIDWithCheckSumCompletedEventHandler(object sender, GeneratorWaferIDWithCheckSumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneratorWaferIDWithCheckSumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeneratorWaferIDWithCheckSumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GeneraterJsonFileCompletedEventHandler(object sender, GeneraterJsonFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneraterJsonFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeneraterJsonFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void QARMS2_RecipeApplyCompletedEventHandler(object sender, QARMS2_RecipeApplyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QARMS2_RecipeApplyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QARMS2_RecipeApplyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetBrcmDataForBomCompletedEventHandler(object sender, GetBrcmDataForBomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBrcmDataForBomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBrcmDataForBomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ChkBrcmGatingRuleCompletedEventHandler(object sender, ChkBrcmGatingRuleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChkBrcmGatingRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChkBrcmGatingRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ChkBrcmProdEngCompletedEventHandler(object sender, ChkBrcmProdEngCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChkBrcmProdEngCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChkBrcmProdEngCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ChkBrcmTestProgramWhenASISCreateSICompletedEventHandler(object sender, ChkBrcmTestProgramWhenASISCreateSICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChkBrcmTestProgramWhenASISCreateSICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChkBrcmTestProgramWhenASISCreateSICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ChkBrcmASISEndorseRuleCompletedEventHandler(object sender, ChkBrcmASISEndorseRuleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChkBrcmASISEndorseRuleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChkBrcmASISEndorseRuleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetBrcmSkipBinListForBomCompletedEventHandler(object sender, GetBrcmSkipBinListForBomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBrcmSkipBinListForBomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBrcmSkipBinListForBomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckSourceDevice_GF_BumpCompletedEventHandler(object sender, CheckSourceDevice_GF_BumpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSourceDevice_GF_BumpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSourceDevice_GF_BumpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFoupCleanStatusFromPCServerCompletedEventHandler(object sender, GetFoupCleanStatusFromPCServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFoupCleanStatusFromPCServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFoupCleanStatusFromPCServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void PCSERVERDBQueryCompletedEventHandler(object sender, PCSERVERDBQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PCSERVERDBQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PCSERVERDBQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void OperatorReviewMFGNotificationCompletedEventHandler(object sender, OperatorReviewMFGNotificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OperatorReviewMFGNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OperatorReviewMFGNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAMSLotInfoByBlueToothTagCompletedEventHandler(object sender, GetAMSLotInfoByBlueToothTagCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAMSLotInfoByBlueToothTagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAMSLotInfoByBlueToothTagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateBlutToothTagBaseInfoCompletedEventHandler(object sender, UpdateBlutToothTagBaseInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateBlutToothTagBaseInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateBlutToothTagBaseInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateBlutToothTagBaseInfo4ServerDownCompletedEventHandler(object sender, UpdateBlutToothTagBaseInfo4ServerDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateBlutToothTagBaseInfo4ServerDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateBlutToothTagBaseInfo4ServerDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DisassociateCarrierRelationByLotCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DisassociateCarrierRelationByTxnTypeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetADIDPSMarkingSpecCompletedEventHandler(object sender, GetADIDPSMarkingSpecCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetADIDPSMarkingSpecCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetADIDPSMarkingSpecCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ExecAMSAPICompletedEventHandler(object sender, ExecAMSAPICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecAMSAPICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecAMSAPICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAMSAPI_DataStructureCompletedEventHandler(object sender, GetAMSAPI_DataStructureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAMSAPI_DataStructureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAMSAPI_DataStructureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateANFCompletedEventHandler(object sender, CreateANFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateANFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateANFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void apiAmkGroupHoldMaintCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void apiAmkGroupHoldMaintWithUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void apiUpdateResourceStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void apiQACompleteCompletedEventHandler(object sender, apiQACompleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class apiQACompleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal apiQACompleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void apiChangeLotAttributeCompletedEventHandler(object sender, apiChangeLotAttributeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class apiChangeLotAttributeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal apiChangeLotAttributeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void apiChangeLotAttribute2CompletedEventHandler(object sender, apiChangeLotAttribute2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class apiChangeLotAttribute2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal apiChangeLotAttribute2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CTM_UpdateCPToolBLOBCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CTM_GetCPToolBLOBCompletedEventHandler(object sender, CTM_GetCPToolBLOBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CTM_GetCPToolBLOBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CTM_GetCPToolBLOBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] sData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CTM_SendMailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AES_GetWaferBinDataCompletedEventHandler(object sender, AES_GetWaferBinDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AES_GetWaferBinDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AES_GetWaferBinDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AES_UpdateFTPServerFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AES_CheckSamplingLotCompletedEventHandler(object sender, AES_CheckSamplingLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AES_CheckSamplingLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AES_CheckSamplingLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetMultiLotAndWaferCountCompletedEventHandler(object sender, GetMultiLotAndWaferCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMultiLotAndWaferCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMultiLotAndWaferCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InlineStockDBQueryCompletedEventHandler(object sender, InlineStockDBQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InlineStockDBQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InlineStockDBQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AESDBQueryCompletedEventHandler(object sender, AESDBQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AESDBQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AESDBQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LEGACYDBQueryCompletedEventHandler(object sender, LEGACYDBQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LEGACYDBQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LEGACYDBQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InlineStockMTSQLExecCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AMSDBQueryForVBCompletedEventHandler(object sender, AMSDBQueryForVBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AMSDBQueryForVBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AMSDBQueryForVBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AMSDBQueryCompletedEventHandler(object sender, AMSDBQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AMSDBQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AMSDBQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool bSuccess {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AMSDBQuery1CompletedEventHandler(object sender, AMSDBQuery1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AMSDBQuery1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AMSDBQuery1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AMSDBQuery2CompletedEventHandler(object sender, AMSDBQuery2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AMSDBQuery2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AMSDBQuery2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AMSDBQuery3CompletedEventHandler(object sender, AMSDBQuery3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AMSDBQuery3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AMSDBQuery3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AMSDBQuery4CompletedEventHandler(object sender, AMSDBQuery4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AMSDBQuery4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AMSDBQuery4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AMSMTSQLExecCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AMSMTSQLExecRPTCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AMSDBQueryRPTCompletedEventHandler(object sender, AMSDBQueryRPTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AMSDBQueryRPTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AMSDBQueryRPTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AMSDBQueryRPT1CompletedEventHandler(object sender, AMSDBQueryRPT1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AMSDBQueryRPT1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AMSDBQueryRPT1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AMSDBQueryRENCompletedEventHandler(object sender, AMSDBQueryRENCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AMSDBQueryRENCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AMSDBQueryRENCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AMS_UpdateBLOBCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AMS_GetBLOBCompletedEventHandler(object sender, AMS_GetBLOBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AMS_GetBLOBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AMS_GetBLOBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] sData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AMSDBQueryWithExcelCompletedEventHandler(object sender, AMSDBQueryWithExcelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AMSDBQueryWithExcelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AMSDBQueryWithExcelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AMS_PI_IsPMBeforeRtnToMFGCompletedEventHandler(object sender, AMS_PI_IsPMBeforeRtnToMFGCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AMS_PI_IsPMBeforeRtnToMFGCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AMS_PI_IsPMBeforeRtnToMFGCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AMS_ShutdownMCCompletedEventHandler(object sender, AMS_ShutdownMCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AMS_ShutdownMCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AMS_ShutdownMCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void eCIMInfoToAMSPICompletedEventHandler(object sender, eCIMInfoToAMSPICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class eCIMInfoToAMSPICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal eCIMInfoToAMSPICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void QAOperationLotMoveCompletedEventHandler(object sender, QAOperationLotMoveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QAOperationLotMoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QAOperationLotMoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void Check_FAIReportCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckMaskInStockByTrackingNoCompletedEventHandler(object sender, CheckMaskInStockByTrackingNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckMaskInStockByTrackingNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckMaskInStockByTrackingNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMasks {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckMaskPhaseOutByTrackingNoCompletedEventHandler(object sender, CheckMaskPhaseOutByTrackingNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckMaskPhaseOutByTrackingNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckMaskPhaseOutByTrackingNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetBomDataForAMSCompletedEventHandler(object sender, GetBomDataForAMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBomDataForAMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBomDataForAMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetGFCustInputDataForAMSCompletedEventHandler(object sender, GetGFCustInputDataForAMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGFCustInputDataForAMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGFCustInputDataForAMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LotTxnValidationCompletedEventHandler(object sender, LotTxnValidationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LotTxnValidationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LotTxnValidationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LotTxnValidation2CompletedEventHandler(object sender, LotTxnValidation2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LotTxnValidation2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LotTxnValidation2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetMultipleBinLotDataCompletedEventHandler(object sender, GetMultipleBinLotDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMultipleBinLotDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMultipleBinLotDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void TnRCombineRuleCheckCompletedEventHandler(object sender, TnRCombineRuleCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TnRCombineRuleCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TnRCombineRuleCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void TnRCombineRuleCheckMsgCompletedEventHandler(object sender, TnRCombineRuleCheckMsgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TnRCombineRuleCheckMsgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TnRCombineRuleCheckMsgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void TnRCombineRuleGetByNameCompletedEventHandler(object sender, TnRCombineRuleGetByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TnRCombineRuleGetByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TnRCombineRuleGetByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void TnRCombineRuleGetByLotCompletedEventHandler(object sender, TnRCombineRuleGetByLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TnRCombineRuleGetByLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TnRCombineRuleGetByLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void StringParserCompletedEventHandler(object sender, StringParserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StringParserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StringParserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LowYieldCheckCompletedEventHandler(object sender, LowYieldCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LowYieldCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LowYieldCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LowYieldCheckXMLCompletedEventHandler(object sender, LowYieldCheckXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LowYieldCheckXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LowYieldCheckXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetReelAutoNumberCompletedEventHandler(object sender, GetReelAutoNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReelAutoNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReelAutoNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckLotIsAllowedToOpenNowCompletedEventHandler(object sender, CheckLotIsAllowedToOpenNowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckLotIsAllowedToOpenNowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckLotIsAllowedToOpenNowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DieSorterEndorseCompletedEventHandler(object sender, DieSorterEndorseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DieSorterEndorseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DieSorterEndorseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string PrintProgram {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string PrintFile {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string OutputFile {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string[] OutputData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GenAttributeNewValueCompletedEventHandler(object sender, GenAttributeNewValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenAttributeNewValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenAttributeNewValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GenAttributeNewValue3CompletedEventHandler(object sender, GenAttributeNewValue3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenAttributeNewValue3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenAttributeNewValue3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GenAttributeNewValue2CompletedEventHandler(object sender, GenAttributeNewValue2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenAttributeNewValue2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenAttributeNewValue2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GenAttributeNewValue_SAPInterfaceCompletedEventHandler(object sender, GenAttributeNewValue_SAPInterfaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenAttributeNewValue_SAPInterfaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenAttributeNewValue_SAPInterfaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPSMDataCompletedEventHandler(object sender, GetPSMDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPSMDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPSMDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPSMData_ProductCustomerReqInfoCompletedEventHandler(object sender, GetPSMData_ProductCustomerReqInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPSMData_ProductCustomerReqInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPSMData_ProductCustomerReqInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void VMM_SendToEasyFlowCompletedEventHandler(object sender, VMM_SendToEasyFlowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VMM_SendToEasyFlowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VMM_SendToEasyFlowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAMSServiceStatusCompletedEventHandler(object sender, GetAMSServiceStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAMSServiceStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAMSServiceStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateFTDeviationReportCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateFTDeviationReportByStepCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFTRTBinCompletedEventHandler(object sender, GetFTRTBinCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFTRTBinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFTRTBinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckFTRTCommandCompletedEventHandler(object sender, CheckFTRTCommandCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckFTRTCommandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckFTRTCommandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetOperationByCustLotIdCompletedEventHandler(object sender, GetOperationByCustLotIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOperationByCustLotIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOperationByCustLotIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetHandlerDataCompletedEventHandler(object sender, GetHandlerDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHandlerDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHandlerDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAMSLotNoByWSLotNoCompletedEventHandler(object sender, GetAMSLotNoByWSLotNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAMSLotNoByWSLotNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAMSLotNoByWSLotNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetWSLotNoByAMSLotNoCompletedEventHandler(object sender, GetWSLotNoByAMSLotNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWSLotNoByAMSLotNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWSLotNoByAMSLotNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetWaferListByCustLotId_EqualCompletedEventHandler(object sender, GetWaferListByCustLotId_EqualCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWaferListByCustLotId_EqualCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWaferListByCustLotId_EqualCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool bSuccess {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetWaferListByCustLotId_LikeCompletedEventHandler(object sender, GetWaferListByCustLotId_LikeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWaferListByCustLotId_LikeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWaferListByCustLotId_LikeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetWaferListByAMSLotId_EqualCompletedEventHandler(object sender, GetWaferListByAMSLotId_EqualCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWaferListByAMSLotId_EqualCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWaferListByAMSLotId_EqualCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool bSuccess {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetWaferListByAMSLotId_LikeCompletedEventHandler(object sender, GetWaferListByAMSLotId_LikeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWaferListByAMSLotId_LikeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWaferListByAMSLotId_LikeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool bSuccess {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAllSubLotByAMSLotIdCompletedEventHandler(object sender, GetAllSubLotByAMSLotIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllSubLotByAMSLotIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllSubLotByAMSLotIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool bSuccess {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetCustLotIDbyWaferIdCompletedEventHandler(object sender, GetCustLotIDbyWaferIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustLotIDbyWaferIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustLotIDbyWaferIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool bSuccess {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetMachineNameByAMSLotIdCompletedEventHandler(object sender, GetMachineNameByAMSLotIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMachineNameByAMSLotIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMachineNameByAMSLotIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool bSuccess {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAMSLotInfoCompletedEventHandler(object sender, GetAMSLotInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAMSLotInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAMSLotInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool bSuccess {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetTIIASN_DSByBatchNumberCompletedEventHandler(object sender, GetTIIASN_DSByBatchNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTIIASN_DSByBatchNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTIIASN_DSByBatchNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool bSuccess {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LotHold_API_ByAMSLotIdCompletedEventHandler(object sender, LotHold_API_ByAMSLotIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LotHold_API_ByAMSLotIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LotHold_API_ByAMSLotIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LotHold_API_ByAMSLotIdwithUserCompletedEventHandler(object sender, LotHold_API_ByAMSLotIdwithUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LotHold_API_ByAMSLotIdwithUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LotHold_API_ByAMSLotIdwithUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LotRelease_API_ByAMSLotIdCompletedEventHandler(object sender, LotRelease_API_ByAMSLotIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LotRelease_API_ByAMSLotIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LotRelease_API_ByAMSLotIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LotRelease_API_ByAMSLotIdwithUserCompletedEventHandler(object sender, LotRelease_API_ByAMSLotIdwithUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LotRelease_API_ByAMSLotIdwithUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LotRelease_API_ByAMSLotIdwithUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LotSplit_API_ByAMSLotIdCompletedEventHandler(object sender, LotSplit_API_ByAMSLotIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LotSplit_API_ByAMSLotIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LotSplit_API_ByAMSLotIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LotRelease_API_ByAMSLotIdWithHoldCommentCompletedEventHandler(object sender, LotRelease_API_ByAMSLotIdWithHoldCommentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LotRelease_API_ByAMSLotIdWithHoldCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LotRelease_API_ByAMSLotIdWithHoldCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateEDATAReplyStatusFor8HCompletedEventHandler(object sender, UpdateEDATAReplyStatusFor8HCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEDATAReplyStatusFor8HCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateEDATAReplyStatusFor8HCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateEDATAConvertStatusCompletedEventHandler(object sender, UpdateEDATAConvertStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEDATAConvertStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateEDATAConvertStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateEDATAConvertInfoCompletedEventHandler(object sender, UpdateEDATAConvertInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEDATAConvertInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateEDATAConvertInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateEDATAUploadStatus2NullCompletedEventHandler(object sender, UpdateEDATAUploadStatus2NullCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEDATAUploadStatus2NullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateEDATAUploadStatus2NullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateEDATAReplyStatusCompletedEventHandler(object sender, UpdateEDATAReplyStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEDATAReplyStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateEDATAReplyStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void EDataFrozenCompletedEventHandler(object sender, EDataFrozenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EDataFrozenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EDataFrozenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetEDC_Time_OperatorByTypeCompletedEventHandler(object sender, GetEDC_Time_OperatorByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEDC_Time_OperatorByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEDC_Time_OperatorByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sOperator {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetEDC_DataByTypeCompletedEventHandler(object sender, GetEDC_DataByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEDC_DataByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEDC_DataByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sRealLotID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateWaferDetailsCompletedEventHandler(object sender, UpdateWaferDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateWaferDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateWaferDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateWaferDetailsWithBinCompletedEventHandler(object sender, UpdateWaferDetailsWithBinCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateWaferDetailsWithBinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateWaferDetailsWithBinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void EData_UPDWaferIDCompletedEventHandler(object sender, EData_UPDWaferIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EData_UPDWaferIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EData_UPDWaferIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void EData_FQC_RPT_SuccessCompletedEventHandler(object sender, EData_FQC_RPT_SuccessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EData_FQC_RPT_SuccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EData_FQC_RPT_SuccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckBumpMapFilesAndFolderCompletedEventHandler(object sender, CheckBumpMapFilesAndFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckBumpMapFilesAndFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckBumpMapFilesAndFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pRetMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void RetrieveBumpMapCombineFilesCompletedEventHandler(object sender, RetrieveBumpMapCombineFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveBumpMapCombineFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveBumpMapCombineFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckBumpMapSamplingCompletedEventHandler(object sender, CheckBumpMapSamplingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckBumpMapSamplingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckBumpMapSamplingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetF054_StdLogReportByLotCompletedEventHandler(object sender, GetF054_StdLogReportByLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetF054_StdLogReportByLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetF054_StdLogReportByLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AETC_RSC_StatusUpdateCompletedEventHandler(object sender, AETC_RSC_StatusUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AETC_RSC_StatusUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AETC_RSC_StatusUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void PLAT_RSC_StatusUpdateCompletedEventHandler(object sender, PLAT_RSC_StatusUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PLAT_RSC_StatusUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PLAT_RSC_StatusUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ATT_FC_FileTmpeMaintCompletedEventHandler(object sender, ATT_FC_FileTmpeMaintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ATT_FC_FileTmpeMaintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ATT_FC_FileTmpeMaintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ATT_FC_GetFileTmpeCompletedEventHandler(object sender, ATT_FC_GetFileTmpeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ATT_FC_GetFileTmpeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ATT_FC_GetFileTmpeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ATT_FC_GetRecipeCompletedEventHandler(object sender, ATT_FC_GetRecipeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ATT_FC_GetRecipeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ATT_FC_GetRecipeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ATT_FCGetSIDBYBDCompletedEventHandler(object sender, ATT_FCGetSIDBYBDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ATT_FCGetSIDBYBDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ATT_FCGetSIDBYBDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void VerifyDomainAccountCompletedEventHandler(object sender, VerifyDomainAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyDomainAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyDomainAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void VerifyDomainAccount2CompletedEventHandler(object sender, VerifyDomainAccount2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyDomainAccount2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyDomainAccount2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int iExpireIn15Days {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDomainServerIPCompletedEventHandler(object sender, GetDomainServerIPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainServerIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainServerIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ResetDomainPasswordCompletedEventHandler(object sender, ResetDomainPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetDomainPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResetDomainPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetEnvInfoCompletedEventHandler(object sender, GetEnvInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEnvInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEnvInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAPIPCompletedEventHandler(object sender, GetAPIPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAPIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAPIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAPUIDCompletedEventHandler(object sender, GetAPUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAPUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAPUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAPPWDCompletedEventHandler(object sender, GetAPPWDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAPPWDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAPPWDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAASIPCompletedEventHandler(object sender, GetAASIPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAASIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAASIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetTimeCompletedEventHandler(object sender, GetTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void apiResourceChangeStateCompletedEventHandler(object sender, apiResourceChangeStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class apiResourceChangeStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal apiResourceChangeStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591